// This file is automatically generated by the `build.rs` script.
//
// Do _not_ edit this file directly but change `build.rs` script logic instead.

#[repr(u16)]
pub enum Op {
    Copy1_S {
        result: crate::Stack,
        value: crate::Stack,
    } = 0_u16,
    Copy {
        result: crate::Stack,
        len_values: ::core::primitive::usize,
    } = 1_u16,
    Copy1I32_I {
        result: crate::Stack,
        value: ::core::primitive::i32,
    } = 2_u16,
    Copy1I64_R {
        result: crate::Stack,
        value: crate::Reg,
    } = 3_u16,
    Copy1I64_I {
        result: crate::Stack,
        value: ::core::primitive::i64,
    } = 4_u16,
    Copy1F32_R {
        result: crate::Stack,
        value: crate::Reg,
    } = 5_u16,
    Copy1F32_I {
        result: crate::Stack,
        value: ::core::primitive::f32,
    } = 6_u16,
    Copy1F64_R {
        result: crate::Stack,
        value: crate::Reg,
    } = 7_u16,
    Copy1F64_I {
        result: crate::Stack,
        value: ::core::primitive::f64,
    } = 8_u16,
    Return0 = 9_u16,
    Return1_S {
        value: crate::Stack,
    } = 10_u16,
    Return {
        len_values: ::core::primitive::usize,
    } = 11_u16,
    Return1I32_R {
        value: crate::Reg,
    } = 12_u16,
    Return1I64_R {
        value: crate::Reg,
    } = 13_u16,
    Return1F32_R {
        value: crate::Reg,
    } = 14_u16,
    Return1F64_R {
        value: crate::Reg,
    } = 15_u16,
    Return1I32_I {
        value: ::core::primitive::i32,
    } = 16_u16,
    Return1I64_I {
        value: ::core::primitive::i64,
    } = 17_u16,
    Return1F32_I {
        value: ::core::primitive::f32,
    } = 18_u16,
    Return1F64_I {
        value: ::core::primitive::f64,
    } = 19_u16,
    GlobalGet_S {
        result: crate::Stack,
        global: crate::Global,
    } = 20_u16,
    GlobalGetI32_R {
        result: crate::Reg,
        global: crate::Global,
    } = 21_u16,
    GlobalGetI64_R {
        result: crate::Reg,
        global: crate::Global,
    } = 22_u16,
    GlobalGetF32_R {
        result: crate::Reg,
        global: crate::Global,
    } = 23_u16,
    GlobalGetF64_R {
        result: crate::Reg,
        global: crate::Global,
    } = 24_u16,
    GlobalSet_S {
        global: crate::Global,
        value: crate::Stack,
    } = 25_u16,
    GlobalSetI32_R {
        global: crate::Global,
        value: crate::Reg,
    } = 26_u16,
    GlobalSetI64_R {
        global: crate::Global,
        value: crate::Reg,
    } = 27_u16,
    GlobalSetF32_R {
        global: crate::Global,
        value: crate::Reg,
    } = 28_u16,
    GlobalSetF64_R {
        global: crate::Global,
        value: crate::Reg,
    } = 29_u16,
    GlobalSetI32_I {
        global: crate::Global,
        value: ::core::primitive::i32,
    } = 30_u16,
    GlobalSetI64_I {
        global: crate::Global,
        value: ::core::primitive::i64,
    } = 31_u16,
    GlobalSetF32_I {
        global: crate::Global,
        value: ::core::primitive::f32,
    } = 32_u16,
    GlobalSetF64_I {
        global: crate::Global,
        value: ::core::primitive::f64,
    } = 33_u16,
    BranchTable0_R {
        index: crate::Reg,
        len_targets: ::core::primitive::u32,
    } = 34_u16,
    BranchTable_R {
        index: crate::Reg,
        len_targets: ::core::primitive::u32,
    } = 35_u16,
    BranchTable0_S {
        index: crate::Stack,
        len_targets: ::core::primitive::u32,
    } = 36_u16,
    BranchTable_S {
        index: crate::Stack,
        len_targets: ::core::primitive::u32,
    } = 37_u16,
    I32EqBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 38_u16,
    I32EqBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
        offset: crate::BranchOffset,
    } = 39_u16,
    I32EqBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 40_u16,
    I32EqBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
        offset: crate::BranchOffset,
    } = 41_u16,
    I64EqBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 42_u16,
    I64EqBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
        offset: crate::BranchOffset,
    } = 43_u16,
    I64EqBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 44_u16,
    I64EqBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
        offset: crate::BranchOffset,
    } = 45_u16,
    F32EqBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 46_u16,
    F32EqBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
        offset: crate::BranchOffset,
    } = 47_u16,
    F32EqBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 48_u16,
    F32EqBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
        offset: crate::BranchOffset,
    } = 49_u16,
    F64EqBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 50_u16,
    F64EqBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
        offset: crate::BranchOffset,
    } = 51_u16,
    F64EqBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 52_u16,
    F64EqBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
        offset: crate::BranchOffset,
    } = 53_u16,
    I32NeBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 54_u16,
    I32NeBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
        offset: crate::BranchOffset,
    } = 55_u16,
    I32NeBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 56_u16,
    I32NeBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
        offset: crate::BranchOffset,
    } = 57_u16,
    I64NeBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 58_u16,
    I64NeBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
        offset: crate::BranchOffset,
    } = 59_u16,
    I64NeBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 60_u16,
    I64NeBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
        offset: crate::BranchOffset,
    } = 61_u16,
    F32NeBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 62_u16,
    F32NeBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
        offset: crate::BranchOffset,
    } = 63_u16,
    F32NeBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 64_u16,
    F32NeBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
        offset: crate::BranchOffset,
    } = 65_u16,
    F64NeBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 66_u16,
    F64NeBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
        offset: crate::BranchOffset,
    } = 67_u16,
    F64NeBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 68_u16,
    F64NeBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
        offset: crate::BranchOffset,
    } = 69_u16,
    I32LtSBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 70_u16,
    I32LtSBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
        offset: crate::BranchOffset,
    } = 71_u16,
    I32LtSBranch_SR {
        lhs: crate::Stack,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 72_u16,
    I32LtSBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 73_u16,
    I32LtSBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
        offset: crate::BranchOffset,
    } = 74_u16,
    I32LtSBranch_IR {
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 75_u16,
    I32LtSBranch_IS {
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 76_u16,
    I64LtSBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 77_u16,
    I64LtSBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
        offset: crate::BranchOffset,
    } = 78_u16,
    I64LtSBranch_SR {
        lhs: crate::Stack,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 79_u16,
    I64LtSBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 80_u16,
    I64LtSBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
        offset: crate::BranchOffset,
    } = 81_u16,
    I64LtSBranch_IR {
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 82_u16,
    I64LtSBranch_IS {
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 83_u16,
    I32LtUBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 84_u16,
    I32LtUBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
        offset: crate::BranchOffset,
    } = 85_u16,
    I32LtUBranch_SR {
        lhs: crate::Stack,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 86_u16,
    I32LtUBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 87_u16,
    I32LtUBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
        offset: crate::BranchOffset,
    } = 88_u16,
    I32LtUBranch_IR {
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 89_u16,
    I32LtUBranch_IS {
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 90_u16,
    I64LtUBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 91_u16,
    I64LtUBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
        offset: crate::BranchOffset,
    } = 92_u16,
    I64LtUBranch_SR {
        lhs: crate::Stack,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 93_u16,
    I64LtUBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 94_u16,
    I64LtUBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
        offset: crate::BranchOffset,
    } = 95_u16,
    I64LtUBranch_IR {
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 96_u16,
    I64LtUBranch_IS {
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 97_u16,
    I32LeSBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 98_u16,
    I32LeSBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
        offset: crate::BranchOffset,
    } = 99_u16,
    I32LeSBranch_SR {
        lhs: crate::Stack,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 100_u16,
    I32LeSBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 101_u16,
    I32LeSBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
        offset: crate::BranchOffset,
    } = 102_u16,
    I32LeSBranch_IR {
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 103_u16,
    I32LeSBranch_IS {
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 104_u16,
    I64LeSBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 105_u16,
    I64LeSBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
        offset: crate::BranchOffset,
    } = 106_u16,
    I64LeSBranch_SR {
        lhs: crate::Stack,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 107_u16,
    I64LeSBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 108_u16,
    I64LeSBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
        offset: crate::BranchOffset,
    } = 109_u16,
    I64LeSBranch_IR {
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 110_u16,
    I64LeSBranch_IS {
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 111_u16,
    I32LeUBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 112_u16,
    I32LeUBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
        offset: crate::BranchOffset,
    } = 113_u16,
    I32LeUBranch_SR {
        lhs: crate::Stack,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 114_u16,
    I32LeUBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 115_u16,
    I32LeUBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
        offset: crate::BranchOffset,
    } = 116_u16,
    I32LeUBranch_IR {
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 117_u16,
    I32LeUBranch_IS {
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 118_u16,
    I64LeUBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 119_u16,
    I64LeUBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
        offset: crate::BranchOffset,
    } = 120_u16,
    I64LeUBranch_SR {
        lhs: crate::Stack,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 121_u16,
    I64LeUBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 122_u16,
    I64LeUBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
        offset: crate::BranchOffset,
    } = 123_u16,
    I64LeUBranch_IR {
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 124_u16,
    I64LeUBranch_IS {
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 125_u16,
    F32LtBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 126_u16,
    F32LtBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
        offset: crate::BranchOffset,
    } = 127_u16,
    F32LtBranch_SR {
        lhs: crate::Stack,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 128_u16,
    F32LtBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 129_u16,
    F32LtBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
        offset: crate::BranchOffset,
    } = 130_u16,
    F32LtBranch_IR {
        lhs: ::core::primitive::f32,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 131_u16,
    F32LtBranch_IS {
        lhs: ::core::primitive::f32,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 132_u16,
    F64LtBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 133_u16,
    F64LtBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
        offset: crate::BranchOffset,
    } = 134_u16,
    F64LtBranch_SR {
        lhs: crate::Stack,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 135_u16,
    F64LtBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 136_u16,
    F64LtBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
        offset: crate::BranchOffset,
    } = 137_u16,
    F64LtBranch_IR {
        lhs: ::core::primitive::f64,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 138_u16,
    F64LtBranch_IS {
        lhs: ::core::primitive::f64,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 139_u16,
    F32LeBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 140_u16,
    F32LeBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
        offset: crate::BranchOffset,
    } = 141_u16,
    F32LeBranch_SR {
        lhs: crate::Stack,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 142_u16,
    F32LeBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 143_u16,
    F32LeBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
        offset: crate::BranchOffset,
    } = 144_u16,
    F32LeBranch_IR {
        lhs: ::core::primitive::f32,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 145_u16,
    F32LeBranch_IS {
        lhs: ::core::primitive::f32,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 146_u16,
    F64LeBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 147_u16,
    F64LeBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
        offset: crate::BranchOffset,
    } = 148_u16,
    F64LeBranch_SR {
        lhs: crate::Stack,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 149_u16,
    F64LeBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 150_u16,
    F64LeBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
        offset: crate::BranchOffset,
    } = 151_u16,
    F64LeBranch_IR {
        lhs: ::core::primitive::f64,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 152_u16,
    F64LeBranch_IS {
        lhs: ::core::primitive::f64,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 153_u16,
    I32Popcnt_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 154_u16,
    I32Popcnt_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 155_u16,
    I32Popcnt_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 156_u16,
    I32Popcnt_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 157_u16,
    I64Popcnt_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 158_u16,
    I64Popcnt_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 159_u16,
    I64Popcnt_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 160_u16,
    I64Popcnt_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 161_u16,
    I32Clz_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 162_u16,
    I32Clz_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 163_u16,
    I32Clz_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 164_u16,
    I32Clz_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 165_u16,
    I64Clz_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 166_u16,
    I64Clz_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 167_u16,
    I64Clz_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 168_u16,
    I64Clz_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 169_u16,
    I32Ctz_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 170_u16,
    I32Ctz_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 171_u16,
    I32Ctz_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 172_u16,
    I32Ctz_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 173_u16,
    I64Ctz_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 174_u16,
    I64Ctz_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 175_u16,
    I64Ctz_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 176_u16,
    I64Ctz_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 177_u16,
    F32Abs_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 178_u16,
    F32Abs_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 179_u16,
    F32Abs_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 180_u16,
    F32Abs_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 181_u16,
    F64Abs_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 182_u16,
    F64Abs_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 183_u16,
    F64Abs_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 184_u16,
    F64Abs_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 185_u16,
    F32Neg_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 186_u16,
    F32Neg_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 187_u16,
    F32Neg_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 188_u16,
    F32Neg_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 189_u16,
    F64Neg_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 190_u16,
    F64Neg_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 191_u16,
    F64Neg_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 192_u16,
    F64Neg_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 193_u16,
    F32Ceil_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 194_u16,
    F32Ceil_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 195_u16,
    F32Ceil_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 196_u16,
    F32Ceil_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 197_u16,
    F64Ceil_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 198_u16,
    F64Ceil_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 199_u16,
    F64Ceil_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 200_u16,
    F64Ceil_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 201_u16,
    F32Floor_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 202_u16,
    F32Floor_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 203_u16,
    F32Floor_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 204_u16,
    F32Floor_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 205_u16,
    F64Floor_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 206_u16,
    F64Floor_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 207_u16,
    F64Floor_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 208_u16,
    F64Floor_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 209_u16,
    F32Trunc_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 210_u16,
    F32Trunc_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 211_u16,
    F32Trunc_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 212_u16,
    F32Trunc_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 213_u16,
    F64Trunc_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 214_u16,
    F64Trunc_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 215_u16,
    F64Trunc_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 216_u16,
    F64Trunc_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 217_u16,
    F32Nearest_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 218_u16,
    F32Nearest_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 219_u16,
    F32Nearest_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 220_u16,
    F32Nearest_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 221_u16,
    F64Nearest_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 222_u16,
    F64Nearest_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 223_u16,
    F64Nearest_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 224_u16,
    F64Nearest_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 225_u16,
    F32Sqrt_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 226_u16,
    F32Sqrt_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 227_u16,
    F32Sqrt_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 228_u16,
    F32Sqrt_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 229_u16,
    F64Sqrt_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 230_u16,
    F64Sqrt_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 231_u16,
    F64Sqrt_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 232_u16,
    F64Sqrt_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 233_u16,
    F32Demote_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 234_u16,
    F32Demote_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 235_u16,
    F32Demote_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 236_u16,
    F32Demote_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 237_u16,
    F64Promote_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 238_u16,
    F64Promote_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 239_u16,
    F64Promote_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 240_u16,
    F64Promote_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 241_u16,
    F32ConvertI32S_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 242_u16,
    F32ConvertI32S_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 243_u16,
    F32ConvertI32S_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 244_u16,
    F32ConvertI32S_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 245_u16,
    F32ConvertI32U_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 246_u16,
    F32ConvertI32U_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 247_u16,
    F32ConvertI32U_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 248_u16,
    F32ConvertI32U_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 249_u16,
    F32ConvertI64S_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 250_u16,
    F32ConvertI64S_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 251_u16,
    F32ConvertI64S_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 252_u16,
    F32ConvertI64S_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 253_u16,
    F32ConvertI64U_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 254_u16,
    F32ConvertI64U_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 255_u16,
    F32ConvertI64U_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 256_u16,
    F32ConvertI64U_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 257_u16,
    F64ConvertI32S_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 258_u16,
    F64ConvertI32S_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 259_u16,
    F64ConvertI32S_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 260_u16,
    F64ConvertI32S_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 261_u16,
    F64ConvertI32U_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 262_u16,
    F64ConvertI32U_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 263_u16,
    F64ConvertI32U_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 264_u16,
    F64ConvertI32U_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 265_u16,
    F64ConvertI64S_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 266_u16,
    F64ConvertI64S_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 267_u16,
    F64ConvertI64S_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 268_u16,
    F64ConvertI64S_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 269_u16,
    F64ConvertI64U_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 270_u16,
    F64ConvertI64U_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 271_u16,
    F64ConvertI64U_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 272_u16,
    F64ConvertI64U_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 273_u16,
    I32TruncF32S_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 274_u16,
    I32TruncF32S_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 275_u16,
    I32TruncF32S_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 276_u16,
    I32TruncF32S_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 277_u16,
    I32TruncF32U_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 278_u16,
    I32TruncF32U_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 279_u16,
    I32TruncF32U_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 280_u16,
    I32TruncF32U_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 281_u16,
    I32TruncF64S_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 282_u16,
    I32TruncF64S_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 283_u16,
    I32TruncF64S_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 284_u16,
    I32TruncF64S_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 285_u16,
    I32TruncF64U_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 286_u16,
    I32TruncF64U_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 287_u16,
    I32TruncF64U_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 288_u16,
    I32TruncF64U_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 289_u16,
    I64TruncF32S_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 290_u16,
    I64TruncF32S_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 291_u16,
    I64TruncF32S_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 292_u16,
    I64TruncF32S_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 293_u16,
    I64TruncF32U_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 294_u16,
    I64TruncF32U_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 295_u16,
    I64TruncF32U_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 296_u16,
    I64TruncF32U_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 297_u16,
    I64TruncF64S_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 298_u16,
    I64TruncF64S_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 299_u16,
    I64TruncF64S_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 300_u16,
    I64TruncF64S_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 301_u16,
    I64TruncF64U_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 302_u16,
    I64TruncF64U_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 303_u16,
    I64TruncF64U_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 304_u16,
    I64TruncF64U_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 305_u16,
    I32TruncSatF32S_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 306_u16,
    I32TruncSatF32S_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 307_u16,
    I32TruncSatF32S_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 308_u16,
    I32TruncSatF32S_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 309_u16,
    I32TruncSatF32U_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 310_u16,
    I32TruncSatF32U_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 311_u16,
    I32TruncSatF32U_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 312_u16,
    I32TruncSatF32U_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 313_u16,
    I32TruncSatF64S_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 314_u16,
    I32TruncSatF64S_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 315_u16,
    I32TruncSatF64S_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 316_u16,
    I32TruncSatF64S_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 317_u16,
    I32TruncSatF64U_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 318_u16,
    I32TruncSatF64U_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 319_u16,
    I32TruncSatF64U_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 320_u16,
    I32TruncSatF64U_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 321_u16,
    I64TruncSatF32S_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 322_u16,
    I64TruncSatF32S_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 323_u16,
    I64TruncSatF32S_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 324_u16,
    I64TruncSatF32S_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 325_u16,
    I64TruncSatF32U_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 326_u16,
    I64TruncSatF32U_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 327_u16,
    I64TruncSatF32U_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 328_u16,
    I64TruncSatF32U_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 329_u16,
    I64TruncSatF64S_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 330_u16,
    I64TruncSatF64S_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 331_u16,
    I64TruncSatF64S_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 332_u16,
    I64TruncSatF64S_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 333_u16,
    I64TruncSatF64U_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 334_u16,
    I64TruncSatF64U_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 335_u16,
    I64TruncSatF64U_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 336_u16,
    I64TruncSatF64U_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 337_u16,
    I32Extend8S_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 338_u16,
    I32Extend8S_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 339_u16,
    I32Extend8S_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 340_u16,
    I32Extend8S_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 341_u16,
    I32Extend16S_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 342_u16,
    I32Extend16S_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 343_u16,
    I32Extend16S_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 344_u16,
    I32Extend16S_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 345_u16,
    I64Extend8S_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 346_u16,
    I64Extend8S_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 347_u16,
    I64Extend8S_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 348_u16,
    I64Extend8S_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 349_u16,
    I64Extend16S_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 350_u16,
    I64Extend16S_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 351_u16,
    I64Extend16S_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 352_u16,
    I64Extend16S_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 353_u16,
    I64Extend32S_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 354_u16,
    I64Extend32S_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 355_u16,
    I64Extend32S_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 356_u16,
    I64Extend32S_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 357_u16,
    I32WrapI64_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 358_u16,
    I32WrapI64_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 359_u16,
    I32WrapI64_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 360_u16,
    I32WrapI64_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 361_u16,
    I32Add_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 362_u16,
    I32Add_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 363_u16,
    I32Add_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 364_u16,
    I32Add_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 365_u16,
    I32Add_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 366_u16,
    I32Add_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 367_u16,
    I32Add_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 368_u16,
    I32Add_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 369_u16,
    I64Add_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 370_u16,
    I64Add_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 371_u16,
    I64Add_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 372_u16,
    I64Add_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 373_u16,
    I64Add_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 374_u16,
    I64Add_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 375_u16,
    I64Add_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 376_u16,
    I64Add_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 377_u16,
    I32Mul_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 378_u16,
    I32Mul_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 379_u16,
    I32Mul_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 380_u16,
    I32Mul_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 381_u16,
    I32Mul_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 382_u16,
    I32Mul_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 383_u16,
    I32Mul_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 384_u16,
    I32Mul_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 385_u16,
    I64Mul_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 386_u16,
    I64Mul_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 387_u16,
    I64Mul_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 388_u16,
    I64Mul_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 389_u16,
    I64Mul_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 390_u16,
    I64Mul_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 391_u16,
    I64Mul_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 392_u16,
    I64Mul_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 393_u16,
    I32And_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 394_u16,
    I32And_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 395_u16,
    I32And_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 396_u16,
    I32And_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 397_u16,
    I32And_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 398_u16,
    I32And_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 399_u16,
    I32And_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 400_u16,
    I32And_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 401_u16,
    I64And_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 402_u16,
    I64And_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 403_u16,
    I64And_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 404_u16,
    I64And_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 405_u16,
    I64And_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 406_u16,
    I64And_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 407_u16,
    I64And_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 408_u16,
    I64And_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 409_u16,
    I32Or_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 410_u16,
    I32Or_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 411_u16,
    I32Or_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 412_u16,
    I32Or_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 413_u16,
    I32Or_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 414_u16,
    I32Or_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 415_u16,
    I32Or_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 416_u16,
    I32Or_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 417_u16,
    I64Or_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 418_u16,
    I64Or_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 419_u16,
    I64Or_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 420_u16,
    I64Or_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 421_u16,
    I64Or_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 422_u16,
    I64Or_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 423_u16,
    I64Or_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 424_u16,
    I64Or_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 425_u16,
    I32Xor_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 426_u16,
    I32Xor_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 427_u16,
    I32Xor_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 428_u16,
    I32Xor_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 429_u16,
    I32Xor_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 430_u16,
    I32Xor_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 431_u16,
    I32Xor_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 432_u16,
    I32Xor_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 433_u16,
    I64Xor_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 434_u16,
    I64Xor_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 435_u16,
    I64Xor_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 436_u16,
    I64Xor_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 437_u16,
    I64Xor_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 438_u16,
    I64Xor_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 439_u16,
    I64Xor_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 440_u16,
    I64Xor_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 441_u16,
    I32Eq_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 442_u16,
    I32Eq_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 443_u16,
    I32Eq_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 444_u16,
    I32Eq_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 445_u16,
    I32Eq_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 446_u16,
    I32Eq_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 447_u16,
    I32Eq_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 448_u16,
    I32Eq_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 449_u16,
    I64Eq_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 450_u16,
    I64Eq_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 451_u16,
    I64Eq_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 452_u16,
    I64Eq_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 453_u16,
    I64Eq_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 454_u16,
    I64Eq_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 455_u16,
    I64Eq_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 456_u16,
    I64Eq_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 457_u16,
    I32Ne_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 458_u16,
    I32Ne_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 459_u16,
    I32Ne_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 460_u16,
    I32Ne_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 461_u16,
    I32Ne_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 462_u16,
    I32Ne_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 463_u16,
    I32Ne_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 464_u16,
    I32Ne_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 465_u16,
    I64Ne_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 466_u16,
    I64Ne_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 467_u16,
    I64Ne_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 468_u16,
    I64Ne_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 469_u16,
    I64Ne_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 470_u16,
    I64Ne_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 471_u16,
    I64Ne_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 472_u16,
    I64Ne_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 473_u16,
    F32Add_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 474_u16,
    F32Add_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
    } = 475_u16,
    F32Add_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 476_u16,
    F32Add_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
    } = 477_u16,
    F32Add_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 478_u16,
    F32Add_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
    } = 479_u16,
    F32Add_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 480_u16,
    F32Add_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
    } = 481_u16,
    F64Add_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 482_u16,
    F64Add_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
    } = 483_u16,
    F64Add_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 484_u16,
    F64Add_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
    } = 485_u16,
    F64Add_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 486_u16,
    F64Add_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
    } = 487_u16,
    F64Add_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 488_u16,
    F64Add_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
    } = 489_u16,
    F32Mul_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 490_u16,
    F32Mul_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
    } = 491_u16,
    F32Mul_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 492_u16,
    F32Mul_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
    } = 493_u16,
    F32Mul_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 494_u16,
    F32Mul_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
    } = 495_u16,
    F32Mul_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 496_u16,
    F32Mul_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
    } = 497_u16,
    F64Mul_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 498_u16,
    F64Mul_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
    } = 499_u16,
    F64Mul_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 500_u16,
    F64Mul_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
    } = 501_u16,
    F64Mul_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 502_u16,
    F64Mul_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
    } = 503_u16,
    F64Mul_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 504_u16,
    F64Mul_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
    } = 505_u16,
    F32Eq_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 506_u16,
    F32Eq_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
    } = 507_u16,
    F32Eq_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 508_u16,
    F32Eq_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
    } = 509_u16,
    F32Eq_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 510_u16,
    F32Eq_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
    } = 511_u16,
    F32Eq_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 512_u16,
    F32Eq_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
    } = 513_u16,
    F64Eq_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 514_u16,
    F64Eq_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
    } = 515_u16,
    F64Eq_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 516_u16,
    F64Eq_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
    } = 517_u16,
    F64Eq_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 518_u16,
    F64Eq_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
    } = 519_u16,
    F64Eq_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 520_u16,
    F64Eq_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
    } = 521_u16,
    F32Ne_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 522_u16,
    F32Ne_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
    } = 523_u16,
    F32Ne_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 524_u16,
    F32Ne_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
    } = 525_u16,
    F32Ne_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 526_u16,
    F32Ne_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
    } = 527_u16,
    F32Ne_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 528_u16,
    F32Ne_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
    } = 529_u16,
    F64Ne_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 530_u16,
    F64Ne_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
    } = 531_u16,
    F64Ne_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 532_u16,
    F64Ne_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
    } = 533_u16,
    F64Ne_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 534_u16,
    F64Ne_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
    } = 535_u16,
    F64Ne_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 536_u16,
    F64Ne_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
    } = 537_u16,
    F32Min_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 538_u16,
    F32Min_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
    } = 539_u16,
    F32Min_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 540_u16,
    F32Min_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
    } = 541_u16,
    F32Min_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 542_u16,
    F32Min_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
    } = 543_u16,
    F32Min_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 544_u16,
    F32Min_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
    } = 545_u16,
    F64Min_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 546_u16,
    F64Min_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
    } = 547_u16,
    F64Min_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 548_u16,
    F64Min_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
    } = 549_u16,
    F64Min_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 550_u16,
    F64Min_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
    } = 551_u16,
    F64Min_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 552_u16,
    F64Min_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
    } = 553_u16,
    F32Max_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 554_u16,
    F32Max_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
    } = 555_u16,
    F32Max_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 556_u16,
    F32Max_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
    } = 557_u16,
    F32Max_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 558_u16,
    F32Max_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
    } = 559_u16,
    F32Max_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 560_u16,
    F32Max_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
    } = 561_u16,
    F64Max_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 562_u16,
    F64Max_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
    } = 563_u16,
    F64Max_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 564_u16,
    F64Max_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
    } = 565_u16,
    F64Max_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 566_u16,
    F64Max_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
    } = 567_u16,
    F64Max_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 568_u16,
    F64Max_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
    } = 569_u16,
    I32Sub_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 570_u16,
    I32Sub_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 571_u16,
    I32Sub_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 572_u16,
    I32Sub_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 573_u16,
    I32Sub_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 574_u16,
    I32Sub_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
    } = 575_u16,
    I32Sub_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
    } = 576_u16,
    I64Sub_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 577_u16,
    I64Sub_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 578_u16,
    I64Sub_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 579_u16,
    I64Sub_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 580_u16,
    I64Sub_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 581_u16,
    I64Sub_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
    } = 582_u16,
    I64Sub_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
    } = 583_u16,
    I32LtS_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 584_u16,
    I32LtS_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 585_u16,
    I32LtS_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 586_u16,
    I32LtS_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 587_u16,
    I32LtS_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 588_u16,
    I32LtS_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
    } = 589_u16,
    I32LtS_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
    } = 590_u16,
    I64LtS_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 591_u16,
    I64LtS_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 592_u16,
    I64LtS_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 593_u16,
    I64LtS_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 594_u16,
    I64LtS_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 595_u16,
    I64LtS_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
    } = 596_u16,
    I64LtS_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
    } = 597_u16,
    I32LtU_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 598_u16,
    I32LtU_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 599_u16,
    I32LtU_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 600_u16,
    I32LtU_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 601_u16,
    I32LtU_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 602_u16,
    I32LtU_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
    } = 603_u16,
    I32LtU_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
    } = 604_u16,
    I64LtU_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 605_u16,
    I64LtU_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 606_u16,
    I64LtU_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 607_u16,
    I64LtU_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 608_u16,
    I64LtU_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 609_u16,
    I64LtU_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
    } = 610_u16,
    I64LtU_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
    } = 611_u16,
    I32LeS_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 612_u16,
    I32LeS_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 613_u16,
    I32LeS_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 614_u16,
    I32LeS_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 615_u16,
    I32LeS_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 616_u16,
    I32LeS_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
    } = 617_u16,
    I32LeS_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
    } = 618_u16,
    I64LeS_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 619_u16,
    I64LeS_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 620_u16,
    I64LeS_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 621_u16,
    I64LeS_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 622_u16,
    I64LeS_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 623_u16,
    I64LeS_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
    } = 624_u16,
    I64LeS_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
    } = 625_u16,
    I32LeU_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 626_u16,
    I32LeU_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 627_u16,
    I32LeU_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 628_u16,
    I32LeU_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 629_u16,
    I32LeU_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 630_u16,
    I32LeU_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
    } = 631_u16,
    I32LeU_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
    } = 632_u16,
    I64LeU_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 633_u16,
    I64LeU_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 634_u16,
    I64LeU_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 635_u16,
    I64LeU_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 636_u16,
    I64LeU_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 637_u16,
    I64LeU_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
    } = 638_u16,
    I64LeU_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
    } = 639_u16,
    I32DivS_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 640_u16,
    I32DivS_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 641_u16,
    I32DivS_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 642_u16,
    I32DivS_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 643_u16,
    I32DivS_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 644_u16,
    I32DivS_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
    } = 645_u16,
    I32DivS_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
    } = 646_u16,
    I64DivS_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 647_u16,
    I64DivS_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 648_u16,
    I64DivS_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 649_u16,
    I64DivS_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 650_u16,
    I64DivS_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 651_u16,
    I64DivS_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
    } = 652_u16,
    I64DivS_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
    } = 653_u16,
    I32DivU_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 654_u16,
    I32DivU_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 655_u16,
    I32DivU_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 656_u16,
    I32DivU_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 657_u16,
    I32DivU_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 658_u16,
    I32DivU_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
    } = 659_u16,
    I32DivU_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
    } = 660_u16,
    I64DivU_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 661_u16,
    I64DivU_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 662_u16,
    I64DivU_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 663_u16,
    I64DivU_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 664_u16,
    I64DivU_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 665_u16,
    I64DivU_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
    } = 666_u16,
    I64DivU_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
    } = 667_u16,
    I32RemS_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 668_u16,
    I32RemS_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 669_u16,
    I32RemS_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 670_u16,
    I32RemS_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 671_u16,
    I32RemS_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 672_u16,
    I32RemS_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
    } = 673_u16,
    I32RemS_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
    } = 674_u16,
    I64RemS_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 675_u16,
    I64RemS_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 676_u16,
    I64RemS_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 677_u16,
    I64RemS_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 678_u16,
    I64RemS_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 679_u16,
    I64RemS_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
    } = 680_u16,
    I64RemS_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
    } = 681_u16,
    I32RemU_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 682_u16,
    I32RemU_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 683_u16,
    I32RemU_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 684_u16,
    I32RemU_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 685_u16,
    I32RemU_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 686_u16,
    I32RemU_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
    } = 687_u16,
    I32RemU_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
    } = 688_u16,
    I64RemU_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 689_u16,
    I64RemU_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 690_u16,
    I64RemU_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 691_u16,
    I64RemU_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 692_u16,
    I64RemU_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 693_u16,
    I64RemU_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
    } = 694_u16,
    I64RemU_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
    } = 695_u16,
    I32Shl_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 696_u16,
    I32Shl_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 697_u16,
    I32Shl_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 698_u16,
    I32Shl_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 699_u16,
    I32Shl_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 700_u16,
    I32Shl_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
    } = 701_u16,
    I32Shl_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
    } = 702_u16,
    I64Shl_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 703_u16,
    I64Shl_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 704_u16,
    I64Shl_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 705_u16,
    I64Shl_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 706_u16,
    I64Shl_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 707_u16,
    I64Shl_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
    } = 708_u16,
    I64Shl_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
    } = 709_u16,
    I32ShrS_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 710_u16,
    I32ShrS_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 711_u16,
    I32ShrS_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 712_u16,
    I32ShrS_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 713_u16,
    I32ShrS_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 714_u16,
    I32ShrS_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
    } = 715_u16,
    I32ShrS_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
    } = 716_u16,
    I64ShrS_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 717_u16,
    I64ShrS_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 718_u16,
    I64ShrS_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 719_u16,
    I64ShrS_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 720_u16,
    I64ShrS_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 721_u16,
    I64ShrS_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
    } = 722_u16,
    I64ShrS_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
    } = 723_u16,
    I32ShrU_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 724_u16,
    I32ShrU_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 725_u16,
    I32ShrU_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 726_u16,
    I32ShrU_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 727_u16,
    I32ShrU_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 728_u16,
    I32ShrU_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
    } = 729_u16,
    I32ShrU_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
    } = 730_u16,
    I64ShrU_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 731_u16,
    I64ShrU_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 732_u16,
    I64ShrU_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 733_u16,
    I64ShrU_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 734_u16,
    I64ShrU_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 735_u16,
    I64ShrU_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
    } = 736_u16,
    I64ShrU_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
    } = 737_u16,
    I32Rotl_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 738_u16,
    I32Rotl_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 739_u16,
    I32Rotl_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 740_u16,
    I32Rotl_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 741_u16,
    I32Rotl_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 742_u16,
    I32Rotl_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
    } = 743_u16,
    I32Rotl_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
    } = 744_u16,
    I64Rotl_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 745_u16,
    I64Rotl_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 746_u16,
    I64Rotl_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 747_u16,
    I64Rotl_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 748_u16,
    I64Rotl_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 749_u16,
    I64Rotl_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
    } = 750_u16,
    I64Rotl_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
    } = 751_u16,
    I32Rotr_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 752_u16,
    I32Rotr_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 753_u16,
    I32Rotr_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 754_u16,
    I32Rotr_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 755_u16,
    I32Rotr_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 756_u16,
    I32Rotr_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
    } = 757_u16,
    I32Rotr_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
    } = 758_u16,
    I64Rotr_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 759_u16,
    I64Rotr_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 760_u16,
    I64Rotr_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 761_u16,
    I64Rotr_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 762_u16,
    I64Rotr_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 763_u16,
    I64Rotr_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
    } = 764_u16,
    I64Rotr_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
    } = 765_u16,
    F32Sub_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 766_u16,
    F32Sub_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
    } = 767_u16,
    F32Sub_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 768_u16,
    F32Sub_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 769_u16,
    F32Sub_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
    } = 770_u16,
    F32Sub_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::f32,
        rhs: crate::Reg,
    } = 771_u16,
    F32Sub_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::f32,
        rhs: crate::Stack,
    } = 772_u16,
    F64Sub_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 773_u16,
    F64Sub_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
    } = 774_u16,
    F64Sub_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 775_u16,
    F64Sub_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 776_u16,
    F64Sub_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
    } = 777_u16,
    F64Sub_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::f64,
        rhs: crate::Reg,
    } = 778_u16,
    F64Sub_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::f64,
        rhs: crate::Stack,
    } = 779_u16,
    F32Div_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 780_u16,
    F32Div_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
    } = 781_u16,
    F32Div_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 782_u16,
    F32Div_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 783_u16,
    F32Div_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
    } = 784_u16,
    F32Div_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::f32,
        rhs: crate::Reg,
    } = 785_u16,
    F32Div_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::f32,
        rhs: crate::Stack,
    } = 786_u16,
    F64Div_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 787_u16,
    F64Div_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
    } = 788_u16,
    F64Div_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 789_u16,
    F64Div_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 790_u16,
    F64Div_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
    } = 791_u16,
    F64Div_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::f64,
        rhs: crate::Reg,
    } = 792_u16,
    F64Div_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::f64,
        rhs: crate::Stack,
    } = 793_u16,
    F32Copysign_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 794_u16,
    F32Copysign_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
    } = 795_u16,
    F32Copysign_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 796_u16,
    F32Copysign_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 797_u16,
    F32Copysign_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
    } = 798_u16,
    F32Copysign_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::f32,
        rhs: crate::Reg,
    } = 799_u16,
    F32Copysign_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::f32,
        rhs: crate::Stack,
    } = 800_u16,
    F64Copysign_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 801_u16,
    F64Copysign_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
    } = 802_u16,
    F64Copysign_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 803_u16,
    F64Copysign_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 804_u16,
    F64Copysign_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
    } = 805_u16,
    F64Copysign_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::f64,
        rhs: crate::Reg,
    } = 806_u16,
    F64Copysign_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::f64,
        rhs: crate::Stack,
    } = 807_u16,
    I32Load_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 808_u16,
    I32Load_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 809_u16,
    I32Load_RI {
        result: crate::Reg,
        address: crate::Address,
        memory: crate::Memory,
    } = 810_u16,
    I32LoadMem0_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 811_u16,
    I32LoadMem0_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 812_u16,
    I32LoadMem0_RI {
        result: crate::Reg,
        address: crate::Address,
    } = 813_u16,
    I32LoadMem0_SR {
        result: crate::Stack,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 814_u16,
    I32LoadMem0_SS {
        result: crate::Stack,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 815_u16,
    I32LoadMem0_SI {
        result: crate::Stack,
        address: crate::Address,
    } = 816_u16,
    I64Load_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 817_u16,
    I64Load_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 818_u16,
    I64Load_RI {
        result: crate::Reg,
        address: crate::Address,
        memory: crate::Memory,
    } = 819_u16,
    I64LoadMem0_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 820_u16,
    I64LoadMem0_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 821_u16,
    I64LoadMem0_RI {
        result: crate::Reg,
        address: crate::Address,
    } = 822_u16,
    I64LoadMem0_SR {
        result: crate::Stack,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 823_u16,
    I64LoadMem0_SS {
        result: crate::Stack,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 824_u16,
    I64LoadMem0_SI {
        result: crate::Stack,
        address: crate::Address,
    } = 825_u16,
    F32Load_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 826_u16,
    F32Load_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 827_u16,
    F32Load_RI {
        result: crate::Reg,
        address: crate::Address,
        memory: crate::Memory,
    } = 828_u16,
    F32LoadMem0_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 829_u16,
    F32LoadMem0_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 830_u16,
    F32LoadMem0_RI {
        result: crate::Reg,
        address: crate::Address,
    } = 831_u16,
    F32LoadMem0_SR {
        result: crate::Stack,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 832_u16,
    F32LoadMem0_SS {
        result: crate::Stack,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 833_u16,
    F32LoadMem0_SI {
        result: crate::Stack,
        address: crate::Address,
    } = 834_u16,
    F64Load_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 835_u16,
    F64Load_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 836_u16,
    F64Load_RI {
        result: crate::Reg,
        address: crate::Address,
        memory: crate::Memory,
    } = 837_u16,
    F64LoadMem0_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 838_u16,
    F64LoadMem0_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 839_u16,
    F64LoadMem0_RI {
        result: crate::Reg,
        address: crate::Address,
    } = 840_u16,
    F64LoadMem0_SR {
        result: crate::Stack,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 841_u16,
    F64LoadMem0_SS {
        result: crate::Stack,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 842_u16,
    F64LoadMem0_SI {
        result: crate::Stack,
        address: crate::Address,
    } = 843_u16,
    I32Load8S_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 844_u16,
    I32Load8S_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 845_u16,
    I32Load8S_RI {
        result: crate::Reg,
        address: crate::Address,
        memory: crate::Memory,
    } = 846_u16,
    I32Load8SMem0_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 847_u16,
    I32Load8SMem0_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 848_u16,
    I32Load8SMem0_RI {
        result: crate::Reg,
        address: crate::Address,
    } = 849_u16,
    I32Load8SMem0_SR {
        result: crate::Stack,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 850_u16,
    I32Load8SMem0_SS {
        result: crate::Stack,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 851_u16,
    I32Load8SMem0_SI {
        result: crate::Stack,
        address: crate::Address,
    } = 852_u16,
    I64Load8S_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 853_u16,
    I64Load8S_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 854_u16,
    I64Load8S_RI {
        result: crate::Reg,
        address: crate::Address,
        memory: crate::Memory,
    } = 855_u16,
    I64Load8SMem0_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 856_u16,
    I64Load8SMem0_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 857_u16,
    I64Load8SMem0_RI {
        result: crate::Reg,
        address: crate::Address,
    } = 858_u16,
    I64Load8SMem0_SR {
        result: crate::Stack,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 859_u16,
    I64Load8SMem0_SS {
        result: crate::Stack,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 860_u16,
    I64Load8SMem0_SI {
        result: crate::Stack,
        address: crate::Address,
    } = 861_u16,
    I32Load8U_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 862_u16,
    I32Load8U_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 863_u16,
    I32Load8U_RI {
        result: crate::Reg,
        address: crate::Address,
        memory: crate::Memory,
    } = 864_u16,
    I32Load8UMem0_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 865_u16,
    I32Load8UMem0_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 866_u16,
    I32Load8UMem0_RI {
        result: crate::Reg,
        address: crate::Address,
    } = 867_u16,
    I32Load8UMem0_SR {
        result: crate::Stack,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 868_u16,
    I32Load8UMem0_SS {
        result: crate::Stack,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 869_u16,
    I32Load8UMem0_SI {
        result: crate::Stack,
        address: crate::Address,
    } = 870_u16,
    I64Load8U_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 871_u16,
    I64Load8U_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 872_u16,
    I64Load8U_RI {
        result: crate::Reg,
        address: crate::Address,
        memory: crate::Memory,
    } = 873_u16,
    I64Load8UMem0_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 874_u16,
    I64Load8UMem0_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 875_u16,
    I64Load8UMem0_RI {
        result: crate::Reg,
        address: crate::Address,
    } = 876_u16,
    I64Load8UMem0_SR {
        result: crate::Stack,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 877_u16,
    I64Load8UMem0_SS {
        result: crate::Stack,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 878_u16,
    I64Load8UMem0_SI {
        result: crate::Stack,
        address: crate::Address,
    } = 879_u16,
    I32Load16S_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 880_u16,
    I32Load16S_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 881_u16,
    I32Load16S_RI {
        result: crate::Reg,
        address: crate::Address,
        memory: crate::Memory,
    } = 882_u16,
    I32Load16SMem0_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 883_u16,
    I32Load16SMem0_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 884_u16,
    I32Load16SMem0_RI {
        result: crate::Reg,
        address: crate::Address,
    } = 885_u16,
    I32Load16SMem0_SR {
        result: crate::Stack,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 886_u16,
    I32Load16SMem0_SS {
        result: crate::Stack,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 887_u16,
    I32Load16SMem0_SI {
        result: crate::Stack,
        address: crate::Address,
    } = 888_u16,
    I64Load16S_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 889_u16,
    I64Load16S_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 890_u16,
    I64Load16S_RI {
        result: crate::Reg,
        address: crate::Address,
        memory: crate::Memory,
    } = 891_u16,
    I64Load16SMem0_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 892_u16,
    I64Load16SMem0_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 893_u16,
    I64Load16SMem0_RI {
        result: crate::Reg,
        address: crate::Address,
    } = 894_u16,
    I64Load16SMem0_SR {
        result: crate::Stack,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 895_u16,
    I64Load16SMem0_SS {
        result: crate::Stack,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 896_u16,
    I64Load16SMem0_SI {
        result: crate::Stack,
        address: crate::Address,
    } = 897_u16,
    I32Load16U_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 898_u16,
    I32Load16U_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 899_u16,
    I32Load16U_RI {
        result: crate::Reg,
        address: crate::Address,
        memory: crate::Memory,
    } = 900_u16,
    I32Load16UMem0_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 901_u16,
    I32Load16UMem0_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 902_u16,
    I32Load16UMem0_RI {
        result: crate::Reg,
        address: crate::Address,
    } = 903_u16,
    I32Load16UMem0_SR {
        result: crate::Stack,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 904_u16,
    I32Load16UMem0_SS {
        result: crate::Stack,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 905_u16,
    I32Load16UMem0_SI {
        result: crate::Stack,
        address: crate::Address,
    } = 906_u16,
    I64Load16U_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 907_u16,
    I64Load16U_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 908_u16,
    I64Load16U_RI {
        result: crate::Reg,
        address: crate::Address,
        memory: crate::Memory,
    } = 909_u16,
    I64Load16UMem0_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 910_u16,
    I64Load16UMem0_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 911_u16,
    I64Load16UMem0_RI {
        result: crate::Reg,
        address: crate::Address,
    } = 912_u16,
    I64Load16UMem0_SR {
        result: crate::Stack,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 913_u16,
    I64Load16UMem0_SS {
        result: crate::Stack,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 914_u16,
    I64Load16UMem0_SI {
        result: crate::Stack,
        address: crate::Address,
    } = 915_u16,
    I64Load32S_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 916_u16,
    I64Load32S_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 917_u16,
    I64Load32S_RI {
        result: crate::Reg,
        address: crate::Address,
        memory: crate::Memory,
    } = 918_u16,
    I64Load32SMem0_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 919_u16,
    I64Load32SMem0_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 920_u16,
    I64Load32SMem0_RI {
        result: crate::Reg,
        address: crate::Address,
    } = 921_u16,
    I64Load32SMem0_SR {
        result: crate::Stack,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 922_u16,
    I64Load32SMem0_SS {
        result: crate::Stack,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 923_u16,
    I64Load32SMem0_SI {
        result: crate::Stack,
        address: crate::Address,
    } = 924_u16,
    I64Load32U_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 925_u16,
    I64Load32U_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 926_u16,
    I64Load32U_RI {
        result: crate::Reg,
        address: crate::Address,
        memory: crate::Memory,
    } = 927_u16,
    I64Load32UMem0_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 928_u16,
    I64Load32UMem0_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 929_u16,
    I64Load32UMem0_RI {
        result: crate::Reg,
        address: crate::Address,
    } = 930_u16,
    I64Load32UMem0_SR {
        result: crate::Stack,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 931_u16,
    I64Load32UMem0_SS {
        result: crate::Stack,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 932_u16,
    I64Load32UMem0_SI {
        result: crate::Stack,
        address: crate::Address,
    } = 933_u16,
    I32Store_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 934_u16,
    I32Store_SI {
        ptr: crate::Stack,
        value: ::core::primitive::i32,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 935_u16,
    I32Store_IS {
        address: crate::Address,
        value: crate::Stack,
        memory: crate::Memory,
    } = 936_u16,
    I32Store_II {
        address: crate::Address,
        value: ::core::primitive::i32,
        memory: crate::Memory,
    } = 937_u16,
    I32StoreMem0_RS {
        ptr: crate::Reg,
        value: crate::Stack,
        offset: crate::Offset,
    } = 938_u16,
    I32StoreMem0_RI {
        ptr: crate::Reg,
        value: ::core::primitive::i32,
        offset: crate::Offset,
    } = 939_u16,
    I32StoreMem0_SR {
        ptr: crate::Stack,
        value: crate::Reg,
        offset: crate::Offset,
    } = 940_u16,
    I32StoreMem0_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
    } = 941_u16,
    I32StoreMem0_SI {
        ptr: crate::Stack,
        value: ::core::primitive::i32,
        offset: crate::Offset,
    } = 942_u16,
    I32StoreMem0_IR {
        address: crate::Address,
        value: crate::Reg,
    } = 943_u16,
    I32StoreMem0_IS {
        address: crate::Address,
        value: crate::Stack,
    } = 944_u16,
    I32StoreMem0_II {
        address: crate::Address,
        value: ::core::primitive::i32,
    } = 945_u16,
    I64Store_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 946_u16,
    I64Store_SI {
        ptr: crate::Stack,
        value: ::core::primitive::i64,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 947_u16,
    I64Store_IS {
        address: crate::Address,
        value: crate::Stack,
        memory: crate::Memory,
    } = 948_u16,
    I64Store_II {
        address: crate::Address,
        value: ::core::primitive::i64,
        memory: crate::Memory,
    } = 949_u16,
    I64StoreMem0_RS {
        ptr: crate::Reg,
        value: crate::Stack,
        offset: crate::Offset,
    } = 950_u16,
    I64StoreMem0_RI {
        ptr: crate::Reg,
        value: ::core::primitive::i64,
        offset: crate::Offset,
    } = 951_u16,
    I64StoreMem0_SR {
        ptr: crate::Stack,
        value: crate::Reg,
        offset: crate::Offset,
    } = 952_u16,
    I64StoreMem0_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
    } = 953_u16,
    I64StoreMem0_SI {
        ptr: crate::Stack,
        value: ::core::primitive::i64,
        offset: crate::Offset,
    } = 954_u16,
    I64StoreMem0_IR {
        address: crate::Address,
        value: crate::Reg,
    } = 955_u16,
    I64StoreMem0_IS {
        address: crate::Address,
        value: crate::Stack,
    } = 956_u16,
    I64StoreMem0_II {
        address: crate::Address,
        value: ::core::primitive::i64,
    } = 957_u16,
    F32Store_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 958_u16,
    F32Store_SI {
        ptr: crate::Stack,
        value: ::core::primitive::f32,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 959_u16,
    F32Store_IS {
        address: crate::Address,
        value: crate::Stack,
        memory: crate::Memory,
    } = 960_u16,
    F32Store_II {
        address: crate::Address,
        value: ::core::primitive::f32,
        memory: crate::Memory,
    } = 961_u16,
    F32StoreMem0_RR {
        ptr: crate::Reg,
        value: crate::Reg,
        offset: crate::Offset,
    } = 962_u16,
    F32StoreMem0_RS {
        ptr: crate::Reg,
        value: crate::Stack,
        offset: crate::Offset,
    } = 963_u16,
    F32StoreMem0_RI {
        ptr: crate::Reg,
        value: ::core::primitive::f32,
        offset: crate::Offset,
    } = 964_u16,
    F32StoreMem0_SR {
        ptr: crate::Stack,
        value: crate::Reg,
        offset: crate::Offset,
    } = 965_u16,
    F32StoreMem0_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
    } = 966_u16,
    F32StoreMem0_SI {
        ptr: crate::Stack,
        value: ::core::primitive::f32,
        offset: crate::Offset,
    } = 967_u16,
    F32StoreMem0_IR {
        address: crate::Address,
        value: crate::Reg,
    } = 968_u16,
    F32StoreMem0_IS {
        address: crate::Address,
        value: crate::Stack,
    } = 969_u16,
    F32StoreMem0_II {
        address: crate::Address,
        value: ::core::primitive::f32,
    } = 970_u16,
    F64Store_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 971_u16,
    F64Store_SI {
        ptr: crate::Stack,
        value: ::core::primitive::f64,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 972_u16,
    F64Store_IS {
        address: crate::Address,
        value: crate::Stack,
        memory: crate::Memory,
    } = 973_u16,
    F64Store_II {
        address: crate::Address,
        value: ::core::primitive::f64,
        memory: crate::Memory,
    } = 974_u16,
    F64StoreMem0_RR {
        ptr: crate::Reg,
        value: crate::Reg,
        offset: crate::Offset,
    } = 975_u16,
    F64StoreMem0_RS {
        ptr: crate::Reg,
        value: crate::Stack,
        offset: crate::Offset,
    } = 976_u16,
    F64StoreMem0_RI {
        ptr: crate::Reg,
        value: ::core::primitive::f64,
        offset: crate::Offset,
    } = 977_u16,
    F64StoreMem0_SR {
        ptr: crate::Stack,
        value: crate::Reg,
        offset: crate::Offset,
    } = 978_u16,
    F64StoreMem0_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
    } = 979_u16,
    F64StoreMem0_SI {
        ptr: crate::Stack,
        value: ::core::primitive::f64,
        offset: crate::Offset,
    } = 980_u16,
    F64StoreMem0_IR {
        address: crate::Address,
        value: crate::Reg,
    } = 981_u16,
    F64StoreMem0_IS {
        address: crate::Address,
        value: crate::Stack,
    } = 982_u16,
    F64StoreMem0_II {
        address: crate::Address,
        value: ::core::primitive::f64,
    } = 983_u16,
    I32Store8_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 984_u16,
    I32Store8_SI {
        ptr: crate::Stack,
        value: ::core::primitive::i32,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 985_u16,
    I32Store8_IS {
        address: crate::Address,
        value: crate::Stack,
        memory: crate::Memory,
    } = 986_u16,
    I32Store8_II {
        address: crate::Address,
        value: ::core::primitive::i32,
        memory: crate::Memory,
    } = 987_u16,
    I32Store8Mem0_RS {
        ptr: crate::Reg,
        value: crate::Stack,
        offset: crate::Offset,
    } = 988_u16,
    I32Store8Mem0_RI {
        ptr: crate::Reg,
        value: ::core::primitive::i32,
        offset: crate::Offset,
    } = 989_u16,
    I32Store8Mem0_SR {
        ptr: crate::Stack,
        value: crate::Reg,
        offset: crate::Offset,
    } = 990_u16,
    I32Store8Mem0_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
    } = 991_u16,
    I32Store8Mem0_SI {
        ptr: crate::Stack,
        value: ::core::primitive::i32,
        offset: crate::Offset,
    } = 992_u16,
    I32Store8Mem0_IR {
        address: crate::Address,
        value: crate::Reg,
    } = 993_u16,
    I32Store8Mem0_IS {
        address: crate::Address,
        value: crate::Stack,
    } = 994_u16,
    I32Store8Mem0_II {
        address: crate::Address,
        value: ::core::primitive::i32,
    } = 995_u16,
    I64Store8_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 996_u16,
    I64Store8_SI {
        ptr: crate::Stack,
        value: ::core::primitive::i64,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 997_u16,
    I64Store8_IS {
        address: crate::Address,
        value: crate::Stack,
        memory: crate::Memory,
    } = 998_u16,
    I64Store8_II {
        address: crate::Address,
        value: ::core::primitive::i64,
        memory: crate::Memory,
    } = 999_u16,
    I64Store8Mem0_RS {
        ptr: crate::Reg,
        value: crate::Stack,
        offset: crate::Offset,
    } = 1000_u16,
    I64Store8Mem0_RI {
        ptr: crate::Reg,
        value: ::core::primitive::i64,
        offset: crate::Offset,
    } = 1001_u16,
    I64Store8Mem0_SR {
        ptr: crate::Stack,
        value: crate::Reg,
        offset: crate::Offset,
    } = 1002_u16,
    I64Store8Mem0_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
    } = 1003_u16,
    I64Store8Mem0_SI {
        ptr: crate::Stack,
        value: ::core::primitive::i64,
        offset: crate::Offset,
    } = 1004_u16,
    I64Store8Mem0_IR {
        address: crate::Address,
        value: crate::Reg,
    } = 1005_u16,
    I64Store8Mem0_IS {
        address: crate::Address,
        value: crate::Stack,
    } = 1006_u16,
    I64Store8Mem0_II {
        address: crate::Address,
        value: ::core::primitive::i64,
    } = 1007_u16,
    I32Store16_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 1008_u16,
    I32Store16_SI {
        ptr: crate::Stack,
        value: ::core::primitive::i32,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 1009_u16,
    I32Store16_IS {
        address: crate::Address,
        value: crate::Stack,
        memory: crate::Memory,
    } = 1010_u16,
    I32Store16_II {
        address: crate::Address,
        value: ::core::primitive::i32,
        memory: crate::Memory,
    } = 1011_u16,
    I32Store16Mem0_RS {
        ptr: crate::Reg,
        value: crate::Stack,
        offset: crate::Offset,
    } = 1012_u16,
    I32Store16Mem0_RI {
        ptr: crate::Reg,
        value: ::core::primitive::i32,
        offset: crate::Offset,
    } = 1013_u16,
    I32Store16Mem0_SR {
        ptr: crate::Stack,
        value: crate::Reg,
        offset: crate::Offset,
    } = 1014_u16,
    I32Store16Mem0_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
    } = 1015_u16,
    I32Store16Mem0_SI {
        ptr: crate::Stack,
        value: ::core::primitive::i32,
        offset: crate::Offset,
    } = 1016_u16,
    I32Store16Mem0_IR {
        address: crate::Address,
        value: crate::Reg,
    } = 1017_u16,
    I32Store16Mem0_IS {
        address: crate::Address,
        value: crate::Stack,
    } = 1018_u16,
    I32Store16Mem0_II {
        address: crate::Address,
        value: ::core::primitive::i32,
    } = 1019_u16,
    I64Store16_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 1020_u16,
    I64Store16_SI {
        ptr: crate::Stack,
        value: ::core::primitive::i64,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 1021_u16,
    I64Store16_IS {
        address: crate::Address,
        value: crate::Stack,
        memory: crate::Memory,
    } = 1022_u16,
    I64Store16_II {
        address: crate::Address,
        value: ::core::primitive::i64,
        memory: crate::Memory,
    } = 1023_u16,
    I64Store16Mem0_RS {
        ptr: crate::Reg,
        value: crate::Stack,
        offset: crate::Offset,
    } = 1024_u16,
    I64Store16Mem0_RI {
        ptr: crate::Reg,
        value: ::core::primitive::i64,
        offset: crate::Offset,
    } = 1025_u16,
    I64Store16Mem0_SR {
        ptr: crate::Stack,
        value: crate::Reg,
        offset: crate::Offset,
    } = 1026_u16,
    I64Store16Mem0_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
    } = 1027_u16,
    I64Store16Mem0_SI {
        ptr: crate::Stack,
        value: ::core::primitive::i64,
        offset: crate::Offset,
    } = 1028_u16,
    I64Store16Mem0_IR {
        address: crate::Address,
        value: crate::Reg,
    } = 1029_u16,
    I64Store16Mem0_IS {
        address: crate::Address,
        value: crate::Stack,
    } = 1030_u16,
    I64Store16Mem0_II {
        address: crate::Address,
        value: ::core::primitive::i64,
    } = 1031_u16,
    I64Store32_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 1032_u16,
    I64Store32_SI {
        ptr: crate::Stack,
        value: ::core::primitive::i64,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 1033_u16,
    I64Store32_IS {
        address: crate::Address,
        value: crate::Stack,
        memory: crate::Memory,
    } = 1034_u16,
    I64Store32_II {
        address: crate::Address,
        value: ::core::primitive::i64,
        memory: crate::Memory,
    } = 1035_u16,
    I64Store32Mem0_RS {
        ptr: crate::Reg,
        value: crate::Stack,
        offset: crate::Offset,
    } = 1036_u16,
    I64Store32Mem0_RI {
        ptr: crate::Reg,
        value: ::core::primitive::i64,
        offset: crate::Offset,
    } = 1037_u16,
    I64Store32Mem0_SR {
        ptr: crate::Stack,
        value: crate::Reg,
        offset: crate::Offset,
    } = 1038_u16,
    I64Store32Mem0_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
    } = 1039_u16,
    I64Store32Mem0_SI {
        ptr: crate::Stack,
        value: ::core::primitive::i64,
        offset: crate::Offset,
    } = 1040_u16,
    I64Store32Mem0_IR {
        address: crate::Address,
        value: crate::Reg,
    } = 1041_u16,
    I64Store32Mem0_IS {
        address: crate::Address,
        value: crate::Stack,
    } = 1042_u16,
    I64Store32Mem0_II {
        address: crate::Address,
        value: ::core::primitive::i64,
    } = 1043_u16,
    Select {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 1044_u16,
    SelectI32_RSSS {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 1045_u16,
    SelectI32_RSSI {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 1046_u16,
    SelectI32_RSIS {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
    } = 1047_u16,
    SelectI32_RSII {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: ::core::primitive::i32,
        rhs: ::core::primitive::i32,
    } = 1048_u16,
    SelectI64_RRSS {
        result: crate::Reg,
        condition: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 1049_u16,
    SelectI64_RRSI {
        result: crate::Reg,
        condition: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 1050_u16,
    SelectI64_RRIS {
        result: crate::Reg,
        condition: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
    } = 1051_u16,
    SelectI64_RRII {
        result: crate::Reg,
        condition: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: ::core::primitive::i64,
    } = 1052_u16,
    SelectI64_RSRS {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 1053_u16,
    SelectI64_RSRI {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 1054_u16,
    SelectI64_RSSR {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 1055_u16,
    SelectI64_RSSS {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 1056_u16,
    SelectI64_RSSI {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 1057_u16,
    SelectI64_RSIR {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
    } = 1058_u16,
    SelectI64_RSIS {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
    } = 1059_u16,
    SelectI64_RSII {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: ::core::primitive::i64,
        rhs: ::core::primitive::i64,
    } = 1060_u16,
    SelectF32_RRSS {
        result: crate::Reg,
        condition: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 1061_u16,
    SelectF32_RRSI {
        result: crate::Reg,
        condition: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
    } = 1062_u16,
    SelectF32_RRIS {
        result: crate::Reg,
        condition: crate::Reg,
        lhs: ::core::primitive::f32,
        rhs: crate::Stack,
    } = 1063_u16,
    SelectF32_RRII {
        result: crate::Reg,
        condition: crate::Reg,
        lhs: ::core::primitive::f32,
        rhs: ::core::primitive::f32,
    } = 1064_u16,
    SelectF32_RSRS {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 1065_u16,
    SelectF32_RSRI {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
    } = 1066_u16,
    SelectF32_RSSR {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 1067_u16,
    SelectF32_RSSS {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 1068_u16,
    SelectF32_RSSI {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
    } = 1069_u16,
    SelectF32_RSIR {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: ::core::primitive::f32,
        rhs: crate::Reg,
    } = 1070_u16,
    SelectF32_RSIS {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: ::core::primitive::f32,
        rhs: crate::Stack,
    } = 1071_u16,
    SelectF32_RSII {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: ::core::primitive::f32,
        rhs: ::core::primitive::f32,
    } = 1072_u16,
    SelectF64_RRSS {
        result: crate::Reg,
        condition: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 1073_u16,
    SelectF64_RRSI {
        result: crate::Reg,
        condition: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
    } = 1074_u16,
    SelectF64_RRIS {
        result: crate::Reg,
        condition: crate::Reg,
        lhs: ::core::primitive::f64,
        rhs: crate::Stack,
    } = 1075_u16,
    SelectF64_RRII {
        result: crate::Reg,
        condition: crate::Reg,
        lhs: ::core::primitive::f64,
        rhs: ::core::primitive::f64,
    } = 1076_u16,
    SelectF64_RSRS {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 1077_u16,
    SelectF64_RSRI {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
    } = 1078_u16,
    SelectF64_RSSR {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 1079_u16,
    SelectF64_RSSS {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 1080_u16,
    SelectF64_RSSI {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
    } = 1081_u16,
    SelectF64_RSIR {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: ::core::primitive::f64,
        rhs: crate::Reg,
    } = 1082_u16,
    SelectF64_RSIS {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: ::core::primitive::f64,
        rhs: crate::Stack,
    } = 1083_u16,
    SelectF64_RSII {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: ::core::primitive::f64,
        rhs: ::core::primitive::f64,
    } = 1084_u16,
    TableSize_R {
        result: crate::Reg,
        table: crate::Table,
    } = 1085_u16,
    TableSize_S {
        result: crate::Stack,
        table: crate::Table,
    } = 1086_u16,
    TableGet_RR {
        result: crate::Reg,
        index: crate::Reg,
        table: crate::Table,
    } = 1087_u16,
    TableGet_RS {
        result: crate::Reg,
        index: crate::Stack,
        table: crate::Table,
    } = 1088_u16,
    TableGet_RI {
        result: crate::Reg,
        index: ::core::primitive::i64,
        table: crate::Table,
    } = 1089_u16,
    TableSet_RS {
        index: crate::Reg,
        value: crate::Stack,
        table: crate::Table,
    } = 1090_u16,
    TableSet_RI {
        index: crate::Reg,
        value: ::core::primitive::i32,
        table: crate::Table,
    } = 1091_u16,
    TableSet_SR {
        index: crate::Stack,
        value: crate::Reg,
        table: crate::Table,
    } = 1092_u16,
    TableSet_SS {
        index: crate::Stack,
        value: crate::Stack,
        table: crate::Table,
    } = 1093_u16,
    TableSet_SI {
        index: crate::Stack,
        value: ::core::primitive::i32,
        table: crate::Table,
    } = 1094_u16,
    TableSet_IR {
        index: ::core::primitive::i64,
        value: crate::Reg,
        table: crate::Table,
    } = 1095_u16,
    TableSet_IS {
        index: ::core::primitive::i64,
        value: crate::Stack,
        table: crate::Table,
    } = 1096_u16,
    TableSet_II {
        index: ::core::primitive::i64,
        value: ::core::primitive::i32,
        table: crate::Table,
    } = 1097_u16,
    TableGrow {
        result: crate::Stack,
        delta: crate::Stack,
        table: crate::Table,
    } = 1098_u16,
    TableCopy {
        dst_index: crate::Stack,
        src_index: crate::Stack,
        len: crate::Stack,
        dst_table: crate::Table,
        src_table: crate::Table,
    } = 1099_u16,
    TableFill {
        dst_index: crate::Stack,
        value: crate::Stack,
        len: crate::Stack,
        table: crate::Table,
    } = 1100_u16,
    TableInit {
        dst_index: crate::Stack,
        src_index: crate::Stack,
        len: crate::Stack,
        table: crate::Table,
        elem: crate::Elem,
    } = 1101_u16,
    MemorySize_R {
        result: crate::Reg,
        memory: crate::Memory,
    } = 1102_u16,
    MemorySize_S {
        result: crate::Stack,
        memory: crate::Memory,
    } = 1103_u16,
    MemoryGrow {
        result: crate::Reg,
        delta: crate::Stack,
        memory: crate::Memory,
    } = 1104_u16,
    MemoryCopy {
        dst_index: crate::Stack,
        src_index: crate::Stack,
        len: crate::Stack,
        dst_memory: crate::Memory,
        src_memory: crate::Memory,
    } = 1105_u16,
    MemoryFill {
        dst_index: crate::Stack,
        value: crate::Stack,
        len: crate::Stack,
        memory: crate::Memory,
    } = 1106_u16,
    MemoryInit {
        dst_index: crate::Stack,
        src_index: crate::Stack,
        len: crate::Stack,
        memory: crate::Memory,
        data: crate::Data,
    } = 1107_u16,
    CallInternal {
        func: crate::WasmFunc,
        len_params: ::core::primitive::usize,
        len_results: ::core::primitive::usize,
    } = 1108_u16,
    ReturnCallInternal {
        func: crate::WasmFunc,
        len_params: ::core::primitive::usize,
        len_results: ::core::primitive::usize,
    } = 1109_u16,
    CallImported {
        func: crate::Func,
        len_params: ::core::primitive::usize,
        len_results: ::core::primitive::usize,
    } = 1110_u16,
    ReturnCallImported {
        func: crate::Func,
        len_params: ::core::primitive::usize,
        len_results: ::core::primitive::usize,
    } = 1111_u16,
    CallIndirect_R {
        table: crate::Table,
        index: crate::Reg,
        len_params: ::core::primitive::usize,
        len_results: ::core::primitive::usize,
    } = 1112_u16,
    CallIndirect_S {
        table: crate::Table,
        index: crate::Stack,
        len_params: ::core::primitive::usize,
        len_results: ::core::primitive::usize,
    } = 1113_u16,
    CallIndirect_I {
        table: crate::Table,
        index: ::core::primitive::i64,
        len_params: ::core::primitive::usize,
        len_results: ::core::primitive::usize,
    } = 1114_u16,
    ReturnCallIndirect_R {
        table: crate::Table,
        index: crate::Reg,
        len_params: ::core::primitive::usize,
        len_results: ::core::primitive::usize,
    } = 1115_u16,
    ReturnCallIndirect_S {
        table: crate::Table,
        index: crate::Stack,
        len_params: ::core::primitive::usize,
        len_results: ::core::primitive::usize,
    } = 1116_u16,
    ReturnCallIndirect_I {
        table: crate::Table,
        index: ::core::primitive::i64,
        len_params: ::core::primitive::usize,
        len_results: ::core::primitive::usize,
    } = 1117_u16,
}
impl ::core::marker::Copy for Op {}
impl ::core::clone::Clone for Op {
    fn clone(&self) -> Self {
        *self
    }
}
impl Op {
    /// Encodes `self` without its [`OpCode`][crate::OpCode].
    pub fn encode_params(
        &self,
        encoder: &mut crate::CopyEncoder,
    ) -> ::core::result::Result<::core::primitive::usize, crate::EncoderError> {
        match *self {
            Self::Copy1_S { result, value } => {
                encoder.encode(crate::op::Copy1_S { result, value })
            }
            Self::Copy { result, len_values } => {
                encoder.encode(crate::op::Copy { result, len_values })
            }
            Self::Copy1I32_I { result, value } => {
                encoder.encode(crate::op::Copy1I32_I { result, value })
            }
            Self::Copy1I64_R { result, value } => {
                encoder.encode(crate::op::Copy1I64_R { result, value })
            }
            Self::Copy1I64_I { result, value } => {
                encoder.encode(crate::op::Copy1I64_I { result, value })
            }
            Self::Copy1F32_R { result, value } => {
                encoder.encode(crate::op::Copy1F32_R { result, value })
            }
            Self::Copy1F32_I { result, value } => {
                encoder.encode(crate::op::Copy1F32_I { result, value })
            }
            Self::Copy1F64_R { result, value } => {
                encoder.encode(crate::op::Copy1F64_R { result, value })
            }
            Self::Copy1F64_I { result, value } => {
                encoder.encode(crate::op::Copy1F64_I { result, value })
            }
            Self::Return0 {  } => {
                encoder.encode(crate::op::Return0 {  })
            }
            Self::Return1_S { value } => {
                encoder.encode(crate::op::Return1_S { value })
            }
            Self::Return { len_values } => {
                encoder.encode(crate::op::Return { len_values })
            }
            Self::Return1I32_R { value } => {
                encoder.encode(crate::op::Return1I32_R { value })
            }
            Self::Return1I64_R { value } => {
                encoder.encode(crate::op::Return1I64_R { value })
            }
            Self::Return1F32_R { value } => {
                encoder.encode(crate::op::Return1F32_R { value })
            }
            Self::Return1F64_R { value } => {
                encoder.encode(crate::op::Return1F64_R { value })
            }
            Self::Return1I32_I { value } => {
                encoder.encode(crate::op::Return1I32_I { value })
            }
            Self::Return1I64_I { value } => {
                encoder.encode(crate::op::Return1I64_I { value })
            }
            Self::Return1F32_I { value } => {
                encoder.encode(crate::op::Return1F32_I { value })
            }
            Self::Return1F64_I { value } => {
                encoder.encode(crate::op::Return1F64_I { value })
            }
            Self::GlobalGet_S { result, global } => {
                encoder.encode(crate::op::GlobalGet_S { result, global })
            }
            Self::GlobalGetI32_R { result, global } => {
                encoder.encode(crate::op::GlobalGetI32_R { result, global })
            }
            Self::GlobalGetI64_R { result, global } => {
                encoder.encode(crate::op::GlobalGetI64_R { result, global })
            }
            Self::GlobalGetF32_R { result, global } => {
                encoder.encode(crate::op::GlobalGetF32_R { result, global })
            }
            Self::GlobalGetF64_R { result, global } => {
                encoder.encode(crate::op::GlobalGetF64_R { result, global })
            }
            Self::GlobalSet_S { global, value } => {
                encoder.encode(crate::op::GlobalSet_S { global, value })
            }
            Self::GlobalSetI32_R { global, value } => {
                encoder.encode(crate::op::GlobalSetI32_R { global, value })
            }
            Self::GlobalSetI64_R { global, value } => {
                encoder.encode(crate::op::GlobalSetI64_R { global, value })
            }
            Self::GlobalSetF32_R { global, value } => {
                encoder.encode(crate::op::GlobalSetF32_R { global, value })
            }
            Self::GlobalSetF64_R { global, value } => {
                encoder.encode(crate::op::GlobalSetF64_R { global, value })
            }
            Self::GlobalSetI32_I { global, value } => {
                encoder.encode(crate::op::GlobalSetI32_I { global, value })
            }
            Self::GlobalSetI64_I { global, value } => {
                encoder.encode(crate::op::GlobalSetI64_I { global, value })
            }
            Self::GlobalSetF32_I { global, value } => {
                encoder.encode(crate::op::GlobalSetF32_I { global, value })
            }
            Self::GlobalSetF64_I { global, value } => {
                encoder.encode(crate::op::GlobalSetF64_I { global, value })
            }
            Self::BranchTable0_R { index, len_targets } => {
                encoder.encode(crate::op::BranchTable0_R { index, len_targets })
            }
            Self::BranchTable_R { index, len_targets } => {
                encoder.encode(crate::op::BranchTable_R { index, len_targets })
            }
            Self::BranchTable0_S { index, len_targets } => {
                encoder.encode(crate::op::BranchTable0_S { index, len_targets })
            }
            Self::BranchTable_S { index, len_targets } => {
                encoder.encode(crate::op::BranchTable_S { index, len_targets })
            }
            Self::I32EqBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32EqBranch_RS { lhs, rhs, offset })
            }
            Self::I32EqBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32EqBranch_RI { lhs, rhs, offset })
            }
            Self::I32EqBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32EqBranch_SS { lhs, rhs, offset })
            }
            Self::I32EqBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32EqBranch_SI { lhs, rhs, offset })
            }
            Self::I64EqBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64EqBranch_RS { lhs, rhs, offset })
            }
            Self::I64EqBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64EqBranch_RI { lhs, rhs, offset })
            }
            Self::I64EqBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64EqBranch_SS { lhs, rhs, offset })
            }
            Self::I64EqBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64EqBranch_SI { lhs, rhs, offset })
            }
            Self::F32EqBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32EqBranch_RS { lhs, rhs, offset })
            }
            Self::F32EqBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32EqBranch_RI { lhs, rhs, offset })
            }
            Self::F32EqBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32EqBranch_SS { lhs, rhs, offset })
            }
            Self::F32EqBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32EqBranch_SI { lhs, rhs, offset })
            }
            Self::F64EqBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64EqBranch_RS { lhs, rhs, offset })
            }
            Self::F64EqBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64EqBranch_RI { lhs, rhs, offset })
            }
            Self::F64EqBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64EqBranch_SS { lhs, rhs, offset })
            }
            Self::F64EqBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64EqBranch_SI { lhs, rhs, offset })
            }
            Self::I32NeBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32NeBranch_RS { lhs, rhs, offset })
            }
            Self::I32NeBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32NeBranch_RI { lhs, rhs, offset })
            }
            Self::I32NeBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32NeBranch_SS { lhs, rhs, offset })
            }
            Self::I32NeBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32NeBranch_SI { lhs, rhs, offset })
            }
            Self::I64NeBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64NeBranch_RS { lhs, rhs, offset })
            }
            Self::I64NeBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64NeBranch_RI { lhs, rhs, offset })
            }
            Self::I64NeBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64NeBranch_SS { lhs, rhs, offset })
            }
            Self::I64NeBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64NeBranch_SI { lhs, rhs, offset })
            }
            Self::F32NeBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32NeBranch_RS { lhs, rhs, offset })
            }
            Self::F32NeBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32NeBranch_RI { lhs, rhs, offset })
            }
            Self::F32NeBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32NeBranch_SS { lhs, rhs, offset })
            }
            Self::F32NeBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32NeBranch_SI { lhs, rhs, offset })
            }
            Self::F64NeBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64NeBranch_RS { lhs, rhs, offset })
            }
            Self::F64NeBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64NeBranch_RI { lhs, rhs, offset })
            }
            Self::F64NeBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64NeBranch_SS { lhs, rhs, offset })
            }
            Self::F64NeBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64NeBranch_SI { lhs, rhs, offset })
            }
            Self::I32LtSBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LtSBranch_RS { lhs, rhs, offset })
            }
            Self::I32LtSBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LtSBranch_RI { lhs, rhs, offset })
            }
            Self::I32LtSBranch_SR { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LtSBranch_SR { lhs, rhs, offset })
            }
            Self::I32LtSBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LtSBranch_SS { lhs, rhs, offset })
            }
            Self::I32LtSBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LtSBranch_SI { lhs, rhs, offset })
            }
            Self::I32LtSBranch_IR { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LtSBranch_IR { lhs, rhs, offset })
            }
            Self::I32LtSBranch_IS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LtSBranch_IS { lhs, rhs, offset })
            }
            Self::I64LtSBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LtSBranch_RS { lhs, rhs, offset })
            }
            Self::I64LtSBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LtSBranch_RI { lhs, rhs, offset })
            }
            Self::I64LtSBranch_SR { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LtSBranch_SR { lhs, rhs, offset })
            }
            Self::I64LtSBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LtSBranch_SS { lhs, rhs, offset })
            }
            Self::I64LtSBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LtSBranch_SI { lhs, rhs, offset })
            }
            Self::I64LtSBranch_IR { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LtSBranch_IR { lhs, rhs, offset })
            }
            Self::I64LtSBranch_IS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LtSBranch_IS { lhs, rhs, offset })
            }
            Self::I32LtUBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LtUBranch_RS { lhs, rhs, offset })
            }
            Self::I32LtUBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LtUBranch_RI { lhs, rhs, offset })
            }
            Self::I32LtUBranch_SR { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LtUBranch_SR { lhs, rhs, offset })
            }
            Self::I32LtUBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LtUBranch_SS { lhs, rhs, offset })
            }
            Self::I32LtUBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LtUBranch_SI { lhs, rhs, offset })
            }
            Self::I32LtUBranch_IR { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LtUBranch_IR { lhs, rhs, offset })
            }
            Self::I32LtUBranch_IS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LtUBranch_IS { lhs, rhs, offset })
            }
            Self::I64LtUBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LtUBranch_RS { lhs, rhs, offset })
            }
            Self::I64LtUBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LtUBranch_RI { lhs, rhs, offset })
            }
            Self::I64LtUBranch_SR { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LtUBranch_SR { lhs, rhs, offset })
            }
            Self::I64LtUBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LtUBranch_SS { lhs, rhs, offset })
            }
            Self::I64LtUBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LtUBranch_SI { lhs, rhs, offset })
            }
            Self::I64LtUBranch_IR { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LtUBranch_IR { lhs, rhs, offset })
            }
            Self::I64LtUBranch_IS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LtUBranch_IS { lhs, rhs, offset })
            }
            Self::I32LeSBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LeSBranch_RS { lhs, rhs, offset })
            }
            Self::I32LeSBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LeSBranch_RI { lhs, rhs, offset })
            }
            Self::I32LeSBranch_SR { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LeSBranch_SR { lhs, rhs, offset })
            }
            Self::I32LeSBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LeSBranch_SS { lhs, rhs, offset })
            }
            Self::I32LeSBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LeSBranch_SI { lhs, rhs, offset })
            }
            Self::I32LeSBranch_IR { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LeSBranch_IR { lhs, rhs, offset })
            }
            Self::I32LeSBranch_IS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LeSBranch_IS { lhs, rhs, offset })
            }
            Self::I64LeSBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LeSBranch_RS { lhs, rhs, offset })
            }
            Self::I64LeSBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LeSBranch_RI { lhs, rhs, offset })
            }
            Self::I64LeSBranch_SR { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LeSBranch_SR { lhs, rhs, offset })
            }
            Self::I64LeSBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LeSBranch_SS { lhs, rhs, offset })
            }
            Self::I64LeSBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LeSBranch_SI { lhs, rhs, offset })
            }
            Self::I64LeSBranch_IR { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LeSBranch_IR { lhs, rhs, offset })
            }
            Self::I64LeSBranch_IS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LeSBranch_IS { lhs, rhs, offset })
            }
            Self::I32LeUBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LeUBranch_RS { lhs, rhs, offset })
            }
            Self::I32LeUBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LeUBranch_RI { lhs, rhs, offset })
            }
            Self::I32LeUBranch_SR { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LeUBranch_SR { lhs, rhs, offset })
            }
            Self::I32LeUBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LeUBranch_SS { lhs, rhs, offset })
            }
            Self::I32LeUBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LeUBranch_SI { lhs, rhs, offset })
            }
            Self::I32LeUBranch_IR { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LeUBranch_IR { lhs, rhs, offset })
            }
            Self::I32LeUBranch_IS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LeUBranch_IS { lhs, rhs, offset })
            }
            Self::I64LeUBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LeUBranch_RS { lhs, rhs, offset })
            }
            Self::I64LeUBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LeUBranch_RI { lhs, rhs, offset })
            }
            Self::I64LeUBranch_SR { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LeUBranch_SR { lhs, rhs, offset })
            }
            Self::I64LeUBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LeUBranch_SS { lhs, rhs, offset })
            }
            Self::I64LeUBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LeUBranch_SI { lhs, rhs, offset })
            }
            Self::I64LeUBranch_IR { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LeUBranch_IR { lhs, rhs, offset })
            }
            Self::I64LeUBranch_IS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LeUBranch_IS { lhs, rhs, offset })
            }
            Self::F32LtBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32LtBranch_RS { lhs, rhs, offset })
            }
            Self::F32LtBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32LtBranch_RI { lhs, rhs, offset })
            }
            Self::F32LtBranch_SR { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32LtBranch_SR { lhs, rhs, offset })
            }
            Self::F32LtBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32LtBranch_SS { lhs, rhs, offset })
            }
            Self::F32LtBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32LtBranch_SI { lhs, rhs, offset })
            }
            Self::F32LtBranch_IR { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32LtBranch_IR { lhs, rhs, offset })
            }
            Self::F32LtBranch_IS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32LtBranch_IS { lhs, rhs, offset })
            }
            Self::F64LtBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64LtBranch_RS { lhs, rhs, offset })
            }
            Self::F64LtBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64LtBranch_RI { lhs, rhs, offset })
            }
            Self::F64LtBranch_SR { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64LtBranch_SR { lhs, rhs, offset })
            }
            Self::F64LtBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64LtBranch_SS { lhs, rhs, offset })
            }
            Self::F64LtBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64LtBranch_SI { lhs, rhs, offset })
            }
            Self::F64LtBranch_IR { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64LtBranch_IR { lhs, rhs, offset })
            }
            Self::F64LtBranch_IS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64LtBranch_IS { lhs, rhs, offset })
            }
            Self::F32LeBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32LeBranch_RS { lhs, rhs, offset })
            }
            Self::F32LeBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32LeBranch_RI { lhs, rhs, offset })
            }
            Self::F32LeBranch_SR { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32LeBranch_SR { lhs, rhs, offset })
            }
            Self::F32LeBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32LeBranch_SS { lhs, rhs, offset })
            }
            Self::F32LeBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32LeBranch_SI { lhs, rhs, offset })
            }
            Self::F32LeBranch_IR { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32LeBranch_IR { lhs, rhs, offset })
            }
            Self::F32LeBranch_IS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32LeBranch_IS { lhs, rhs, offset })
            }
            Self::F64LeBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64LeBranch_RS { lhs, rhs, offset })
            }
            Self::F64LeBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64LeBranch_RI { lhs, rhs, offset })
            }
            Self::F64LeBranch_SR { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64LeBranch_SR { lhs, rhs, offset })
            }
            Self::F64LeBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64LeBranch_SS { lhs, rhs, offset })
            }
            Self::F64LeBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64LeBranch_SI { lhs, rhs, offset })
            }
            Self::F64LeBranch_IR { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64LeBranch_IR { lhs, rhs, offset })
            }
            Self::F64LeBranch_IS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64LeBranch_IS { lhs, rhs, offset })
            }
            Self::I32Popcnt_RR { result, input } => {
                encoder.encode(crate::op::I32Popcnt_RR { result, input })
            }
            Self::I32Popcnt_RS { result, input } => {
                encoder.encode(crate::op::I32Popcnt_RS { result, input })
            }
            Self::I32Popcnt_SR { result, input } => {
                encoder.encode(crate::op::I32Popcnt_SR { result, input })
            }
            Self::I32Popcnt_SS { result, input } => {
                encoder.encode(crate::op::I32Popcnt_SS { result, input })
            }
            Self::I64Popcnt_RR { result, input } => {
                encoder.encode(crate::op::I64Popcnt_RR { result, input })
            }
            Self::I64Popcnt_RS { result, input } => {
                encoder.encode(crate::op::I64Popcnt_RS { result, input })
            }
            Self::I64Popcnt_SR { result, input } => {
                encoder.encode(crate::op::I64Popcnt_SR { result, input })
            }
            Self::I64Popcnt_SS { result, input } => {
                encoder.encode(crate::op::I64Popcnt_SS { result, input })
            }
            Self::I32Clz_RR { result, input } => {
                encoder.encode(crate::op::I32Clz_RR { result, input })
            }
            Self::I32Clz_RS { result, input } => {
                encoder.encode(crate::op::I32Clz_RS { result, input })
            }
            Self::I32Clz_SR { result, input } => {
                encoder.encode(crate::op::I32Clz_SR { result, input })
            }
            Self::I32Clz_SS { result, input } => {
                encoder.encode(crate::op::I32Clz_SS { result, input })
            }
            Self::I64Clz_RR { result, input } => {
                encoder.encode(crate::op::I64Clz_RR { result, input })
            }
            Self::I64Clz_RS { result, input } => {
                encoder.encode(crate::op::I64Clz_RS { result, input })
            }
            Self::I64Clz_SR { result, input } => {
                encoder.encode(crate::op::I64Clz_SR { result, input })
            }
            Self::I64Clz_SS { result, input } => {
                encoder.encode(crate::op::I64Clz_SS { result, input })
            }
            Self::I32Ctz_RR { result, input } => {
                encoder.encode(crate::op::I32Ctz_RR { result, input })
            }
            Self::I32Ctz_RS { result, input } => {
                encoder.encode(crate::op::I32Ctz_RS { result, input })
            }
            Self::I32Ctz_SR { result, input } => {
                encoder.encode(crate::op::I32Ctz_SR { result, input })
            }
            Self::I32Ctz_SS { result, input } => {
                encoder.encode(crate::op::I32Ctz_SS { result, input })
            }
            Self::I64Ctz_RR { result, input } => {
                encoder.encode(crate::op::I64Ctz_RR { result, input })
            }
            Self::I64Ctz_RS { result, input } => {
                encoder.encode(crate::op::I64Ctz_RS { result, input })
            }
            Self::I64Ctz_SR { result, input } => {
                encoder.encode(crate::op::I64Ctz_SR { result, input })
            }
            Self::I64Ctz_SS { result, input } => {
                encoder.encode(crate::op::I64Ctz_SS { result, input })
            }
            Self::F32Abs_RR { result, input } => {
                encoder.encode(crate::op::F32Abs_RR { result, input })
            }
            Self::F32Abs_RS { result, input } => {
                encoder.encode(crate::op::F32Abs_RS { result, input })
            }
            Self::F32Abs_SR { result, input } => {
                encoder.encode(crate::op::F32Abs_SR { result, input })
            }
            Self::F32Abs_SS { result, input } => {
                encoder.encode(crate::op::F32Abs_SS { result, input })
            }
            Self::F64Abs_RR { result, input } => {
                encoder.encode(crate::op::F64Abs_RR { result, input })
            }
            Self::F64Abs_RS { result, input } => {
                encoder.encode(crate::op::F64Abs_RS { result, input })
            }
            Self::F64Abs_SR { result, input } => {
                encoder.encode(crate::op::F64Abs_SR { result, input })
            }
            Self::F64Abs_SS { result, input } => {
                encoder.encode(crate::op::F64Abs_SS { result, input })
            }
            Self::F32Neg_RR { result, input } => {
                encoder.encode(crate::op::F32Neg_RR { result, input })
            }
            Self::F32Neg_RS { result, input } => {
                encoder.encode(crate::op::F32Neg_RS { result, input })
            }
            Self::F32Neg_SR { result, input } => {
                encoder.encode(crate::op::F32Neg_SR { result, input })
            }
            Self::F32Neg_SS { result, input } => {
                encoder.encode(crate::op::F32Neg_SS { result, input })
            }
            Self::F64Neg_RR { result, input } => {
                encoder.encode(crate::op::F64Neg_RR { result, input })
            }
            Self::F64Neg_RS { result, input } => {
                encoder.encode(crate::op::F64Neg_RS { result, input })
            }
            Self::F64Neg_SR { result, input } => {
                encoder.encode(crate::op::F64Neg_SR { result, input })
            }
            Self::F64Neg_SS { result, input } => {
                encoder.encode(crate::op::F64Neg_SS { result, input })
            }
            Self::F32Ceil_RR { result, input } => {
                encoder.encode(crate::op::F32Ceil_RR { result, input })
            }
            Self::F32Ceil_RS { result, input } => {
                encoder.encode(crate::op::F32Ceil_RS { result, input })
            }
            Self::F32Ceil_SR { result, input } => {
                encoder.encode(crate::op::F32Ceil_SR { result, input })
            }
            Self::F32Ceil_SS { result, input } => {
                encoder.encode(crate::op::F32Ceil_SS { result, input })
            }
            Self::F64Ceil_RR { result, input } => {
                encoder.encode(crate::op::F64Ceil_RR { result, input })
            }
            Self::F64Ceil_RS { result, input } => {
                encoder.encode(crate::op::F64Ceil_RS { result, input })
            }
            Self::F64Ceil_SR { result, input } => {
                encoder.encode(crate::op::F64Ceil_SR { result, input })
            }
            Self::F64Ceil_SS { result, input } => {
                encoder.encode(crate::op::F64Ceil_SS { result, input })
            }
            Self::F32Floor_RR { result, input } => {
                encoder.encode(crate::op::F32Floor_RR { result, input })
            }
            Self::F32Floor_RS { result, input } => {
                encoder.encode(crate::op::F32Floor_RS { result, input })
            }
            Self::F32Floor_SR { result, input } => {
                encoder.encode(crate::op::F32Floor_SR { result, input })
            }
            Self::F32Floor_SS { result, input } => {
                encoder.encode(crate::op::F32Floor_SS { result, input })
            }
            Self::F64Floor_RR { result, input } => {
                encoder.encode(crate::op::F64Floor_RR { result, input })
            }
            Self::F64Floor_RS { result, input } => {
                encoder.encode(crate::op::F64Floor_RS { result, input })
            }
            Self::F64Floor_SR { result, input } => {
                encoder.encode(crate::op::F64Floor_SR { result, input })
            }
            Self::F64Floor_SS { result, input } => {
                encoder.encode(crate::op::F64Floor_SS { result, input })
            }
            Self::F32Trunc_RR { result, input } => {
                encoder.encode(crate::op::F32Trunc_RR { result, input })
            }
            Self::F32Trunc_RS { result, input } => {
                encoder.encode(crate::op::F32Trunc_RS { result, input })
            }
            Self::F32Trunc_SR { result, input } => {
                encoder.encode(crate::op::F32Trunc_SR { result, input })
            }
            Self::F32Trunc_SS { result, input } => {
                encoder.encode(crate::op::F32Trunc_SS { result, input })
            }
            Self::F64Trunc_RR { result, input } => {
                encoder.encode(crate::op::F64Trunc_RR { result, input })
            }
            Self::F64Trunc_RS { result, input } => {
                encoder.encode(crate::op::F64Trunc_RS { result, input })
            }
            Self::F64Trunc_SR { result, input } => {
                encoder.encode(crate::op::F64Trunc_SR { result, input })
            }
            Self::F64Trunc_SS { result, input } => {
                encoder.encode(crate::op::F64Trunc_SS { result, input })
            }
            Self::F32Nearest_RR { result, input } => {
                encoder.encode(crate::op::F32Nearest_RR { result, input })
            }
            Self::F32Nearest_RS { result, input } => {
                encoder.encode(crate::op::F32Nearest_RS { result, input })
            }
            Self::F32Nearest_SR { result, input } => {
                encoder.encode(crate::op::F32Nearest_SR { result, input })
            }
            Self::F32Nearest_SS { result, input } => {
                encoder.encode(crate::op::F32Nearest_SS { result, input })
            }
            Self::F64Nearest_RR { result, input } => {
                encoder.encode(crate::op::F64Nearest_RR { result, input })
            }
            Self::F64Nearest_RS { result, input } => {
                encoder.encode(crate::op::F64Nearest_RS { result, input })
            }
            Self::F64Nearest_SR { result, input } => {
                encoder.encode(crate::op::F64Nearest_SR { result, input })
            }
            Self::F64Nearest_SS { result, input } => {
                encoder.encode(crate::op::F64Nearest_SS { result, input })
            }
            Self::F32Sqrt_RR { result, input } => {
                encoder.encode(crate::op::F32Sqrt_RR { result, input })
            }
            Self::F32Sqrt_RS { result, input } => {
                encoder.encode(crate::op::F32Sqrt_RS { result, input })
            }
            Self::F32Sqrt_SR { result, input } => {
                encoder.encode(crate::op::F32Sqrt_SR { result, input })
            }
            Self::F32Sqrt_SS { result, input } => {
                encoder.encode(crate::op::F32Sqrt_SS { result, input })
            }
            Self::F64Sqrt_RR { result, input } => {
                encoder.encode(crate::op::F64Sqrt_RR { result, input })
            }
            Self::F64Sqrt_RS { result, input } => {
                encoder.encode(crate::op::F64Sqrt_RS { result, input })
            }
            Self::F64Sqrt_SR { result, input } => {
                encoder.encode(crate::op::F64Sqrt_SR { result, input })
            }
            Self::F64Sqrt_SS { result, input } => {
                encoder.encode(crate::op::F64Sqrt_SS { result, input })
            }
            Self::F32Demote_RR { result, input } => {
                encoder.encode(crate::op::F32Demote_RR { result, input })
            }
            Self::F32Demote_RS { result, input } => {
                encoder.encode(crate::op::F32Demote_RS { result, input })
            }
            Self::F32Demote_SR { result, input } => {
                encoder.encode(crate::op::F32Demote_SR { result, input })
            }
            Self::F32Demote_SS { result, input } => {
                encoder.encode(crate::op::F32Demote_SS { result, input })
            }
            Self::F64Promote_RR { result, input } => {
                encoder.encode(crate::op::F64Promote_RR { result, input })
            }
            Self::F64Promote_RS { result, input } => {
                encoder.encode(crate::op::F64Promote_RS { result, input })
            }
            Self::F64Promote_SR { result, input } => {
                encoder.encode(crate::op::F64Promote_SR { result, input })
            }
            Self::F64Promote_SS { result, input } => {
                encoder.encode(crate::op::F64Promote_SS { result, input })
            }
            Self::F32ConvertI32S_RR { result, input } => {
                encoder.encode(crate::op::F32ConvertI32S_RR { result, input })
            }
            Self::F32ConvertI32S_RS { result, input } => {
                encoder.encode(crate::op::F32ConvertI32S_RS { result, input })
            }
            Self::F32ConvertI32S_SR { result, input } => {
                encoder.encode(crate::op::F32ConvertI32S_SR { result, input })
            }
            Self::F32ConvertI32S_SS { result, input } => {
                encoder.encode(crate::op::F32ConvertI32S_SS { result, input })
            }
            Self::F32ConvertI32U_RR { result, input } => {
                encoder.encode(crate::op::F32ConvertI32U_RR { result, input })
            }
            Self::F32ConvertI32U_RS { result, input } => {
                encoder.encode(crate::op::F32ConvertI32U_RS { result, input })
            }
            Self::F32ConvertI32U_SR { result, input } => {
                encoder.encode(crate::op::F32ConvertI32U_SR { result, input })
            }
            Self::F32ConvertI32U_SS { result, input } => {
                encoder.encode(crate::op::F32ConvertI32U_SS { result, input })
            }
            Self::F32ConvertI64S_RR { result, input } => {
                encoder.encode(crate::op::F32ConvertI64S_RR { result, input })
            }
            Self::F32ConvertI64S_RS { result, input } => {
                encoder.encode(crate::op::F32ConvertI64S_RS { result, input })
            }
            Self::F32ConvertI64S_SR { result, input } => {
                encoder.encode(crate::op::F32ConvertI64S_SR { result, input })
            }
            Self::F32ConvertI64S_SS { result, input } => {
                encoder.encode(crate::op::F32ConvertI64S_SS { result, input })
            }
            Self::F32ConvertI64U_RR { result, input } => {
                encoder.encode(crate::op::F32ConvertI64U_RR { result, input })
            }
            Self::F32ConvertI64U_RS { result, input } => {
                encoder.encode(crate::op::F32ConvertI64U_RS { result, input })
            }
            Self::F32ConvertI64U_SR { result, input } => {
                encoder.encode(crate::op::F32ConvertI64U_SR { result, input })
            }
            Self::F32ConvertI64U_SS { result, input } => {
                encoder.encode(crate::op::F32ConvertI64U_SS { result, input })
            }
            Self::F64ConvertI32S_RR { result, input } => {
                encoder.encode(crate::op::F64ConvertI32S_RR { result, input })
            }
            Self::F64ConvertI32S_RS { result, input } => {
                encoder.encode(crate::op::F64ConvertI32S_RS { result, input })
            }
            Self::F64ConvertI32S_SR { result, input } => {
                encoder.encode(crate::op::F64ConvertI32S_SR { result, input })
            }
            Self::F64ConvertI32S_SS { result, input } => {
                encoder.encode(crate::op::F64ConvertI32S_SS { result, input })
            }
            Self::F64ConvertI32U_RR { result, input } => {
                encoder.encode(crate::op::F64ConvertI32U_RR { result, input })
            }
            Self::F64ConvertI32U_RS { result, input } => {
                encoder.encode(crate::op::F64ConvertI32U_RS { result, input })
            }
            Self::F64ConvertI32U_SR { result, input } => {
                encoder.encode(crate::op::F64ConvertI32U_SR { result, input })
            }
            Self::F64ConvertI32U_SS { result, input } => {
                encoder.encode(crate::op::F64ConvertI32U_SS { result, input })
            }
            Self::F64ConvertI64S_RR { result, input } => {
                encoder.encode(crate::op::F64ConvertI64S_RR { result, input })
            }
            Self::F64ConvertI64S_RS { result, input } => {
                encoder.encode(crate::op::F64ConvertI64S_RS { result, input })
            }
            Self::F64ConvertI64S_SR { result, input } => {
                encoder.encode(crate::op::F64ConvertI64S_SR { result, input })
            }
            Self::F64ConvertI64S_SS { result, input } => {
                encoder.encode(crate::op::F64ConvertI64S_SS { result, input })
            }
            Self::F64ConvertI64U_RR { result, input } => {
                encoder.encode(crate::op::F64ConvertI64U_RR { result, input })
            }
            Self::F64ConvertI64U_RS { result, input } => {
                encoder.encode(crate::op::F64ConvertI64U_RS { result, input })
            }
            Self::F64ConvertI64U_SR { result, input } => {
                encoder.encode(crate::op::F64ConvertI64U_SR { result, input })
            }
            Self::F64ConvertI64U_SS { result, input } => {
                encoder.encode(crate::op::F64ConvertI64U_SS { result, input })
            }
            Self::I32TruncF32S_RR { result, input } => {
                encoder.encode(crate::op::I32TruncF32S_RR { result, input })
            }
            Self::I32TruncF32S_RS { result, input } => {
                encoder.encode(crate::op::I32TruncF32S_RS { result, input })
            }
            Self::I32TruncF32S_SR { result, input } => {
                encoder.encode(crate::op::I32TruncF32S_SR { result, input })
            }
            Self::I32TruncF32S_SS { result, input } => {
                encoder.encode(crate::op::I32TruncF32S_SS { result, input })
            }
            Self::I32TruncF32U_RR { result, input } => {
                encoder.encode(crate::op::I32TruncF32U_RR { result, input })
            }
            Self::I32TruncF32U_RS { result, input } => {
                encoder.encode(crate::op::I32TruncF32U_RS { result, input })
            }
            Self::I32TruncF32U_SR { result, input } => {
                encoder.encode(crate::op::I32TruncF32U_SR { result, input })
            }
            Self::I32TruncF32U_SS { result, input } => {
                encoder.encode(crate::op::I32TruncF32U_SS { result, input })
            }
            Self::I32TruncF64S_RR { result, input } => {
                encoder.encode(crate::op::I32TruncF64S_RR { result, input })
            }
            Self::I32TruncF64S_RS { result, input } => {
                encoder.encode(crate::op::I32TruncF64S_RS { result, input })
            }
            Self::I32TruncF64S_SR { result, input } => {
                encoder.encode(crate::op::I32TruncF64S_SR { result, input })
            }
            Self::I32TruncF64S_SS { result, input } => {
                encoder.encode(crate::op::I32TruncF64S_SS { result, input })
            }
            Self::I32TruncF64U_RR { result, input } => {
                encoder.encode(crate::op::I32TruncF64U_RR { result, input })
            }
            Self::I32TruncF64U_RS { result, input } => {
                encoder.encode(crate::op::I32TruncF64U_RS { result, input })
            }
            Self::I32TruncF64U_SR { result, input } => {
                encoder.encode(crate::op::I32TruncF64U_SR { result, input })
            }
            Self::I32TruncF64U_SS { result, input } => {
                encoder.encode(crate::op::I32TruncF64U_SS { result, input })
            }
            Self::I64TruncF32S_RR { result, input } => {
                encoder.encode(crate::op::I64TruncF32S_RR { result, input })
            }
            Self::I64TruncF32S_RS { result, input } => {
                encoder.encode(crate::op::I64TruncF32S_RS { result, input })
            }
            Self::I64TruncF32S_SR { result, input } => {
                encoder.encode(crate::op::I64TruncF32S_SR { result, input })
            }
            Self::I64TruncF32S_SS { result, input } => {
                encoder.encode(crate::op::I64TruncF32S_SS { result, input })
            }
            Self::I64TruncF32U_RR { result, input } => {
                encoder.encode(crate::op::I64TruncF32U_RR { result, input })
            }
            Self::I64TruncF32U_RS { result, input } => {
                encoder.encode(crate::op::I64TruncF32U_RS { result, input })
            }
            Self::I64TruncF32U_SR { result, input } => {
                encoder.encode(crate::op::I64TruncF32U_SR { result, input })
            }
            Self::I64TruncF32U_SS { result, input } => {
                encoder.encode(crate::op::I64TruncF32U_SS { result, input })
            }
            Self::I64TruncF64S_RR { result, input } => {
                encoder.encode(crate::op::I64TruncF64S_RR { result, input })
            }
            Self::I64TruncF64S_RS { result, input } => {
                encoder.encode(crate::op::I64TruncF64S_RS { result, input })
            }
            Self::I64TruncF64S_SR { result, input } => {
                encoder.encode(crate::op::I64TruncF64S_SR { result, input })
            }
            Self::I64TruncF64S_SS { result, input } => {
                encoder.encode(crate::op::I64TruncF64S_SS { result, input })
            }
            Self::I64TruncF64U_RR { result, input } => {
                encoder.encode(crate::op::I64TruncF64U_RR { result, input })
            }
            Self::I64TruncF64U_RS { result, input } => {
                encoder.encode(crate::op::I64TruncF64U_RS { result, input })
            }
            Self::I64TruncF64U_SR { result, input } => {
                encoder.encode(crate::op::I64TruncF64U_SR { result, input })
            }
            Self::I64TruncF64U_SS { result, input } => {
                encoder.encode(crate::op::I64TruncF64U_SS { result, input })
            }
            Self::I32TruncSatF32S_RR { result, input } => {
                encoder.encode(crate::op::I32TruncSatF32S_RR { result, input })
            }
            Self::I32TruncSatF32S_RS { result, input } => {
                encoder.encode(crate::op::I32TruncSatF32S_RS { result, input })
            }
            Self::I32TruncSatF32S_SR { result, input } => {
                encoder.encode(crate::op::I32TruncSatF32S_SR { result, input })
            }
            Self::I32TruncSatF32S_SS { result, input } => {
                encoder.encode(crate::op::I32TruncSatF32S_SS { result, input })
            }
            Self::I32TruncSatF32U_RR { result, input } => {
                encoder.encode(crate::op::I32TruncSatF32U_RR { result, input })
            }
            Self::I32TruncSatF32U_RS { result, input } => {
                encoder.encode(crate::op::I32TruncSatF32U_RS { result, input })
            }
            Self::I32TruncSatF32U_SR { result, input } => {
                encoder.encode(crate::op::I32TruncSatF32U_SR { result, input })
            }
            Self::I32TruncSatF32U_SS { result, input } => {
                encoder.encode(crate::op::I32TruncSatF32U_SS { result, input })
            }
            Self::I32TruncSatF64S_RR { result, input } => {
                encoder.encode(crate::op::I32TruncSatF64S_RR { result, input })
            }
            Self::I32TruncSatF64S_RS { result, input } => {
                encoder.encode(crate::op::I32TruncSatF64S_RS { result, input })
            }
            Self::I32TruncSatF64S_SR { result, input } => {
                encoder.encode(crate::op::I32TruncSatF64S_SR { result, input })
            }
            Self::I32TruncSatF64S_SS { result, input } => {
                encoder.encode(crate::op::I32TruncSatF64S_SS { result, input })
            }
            Self::I32TruncSatF64U_RR { result, input } => {
                encoder.encode(crate::op::I32TruncSatF64U_RR { result, input })
            }
            Self::I32TruncSatF64U_RS { result, input } => {
                encoder.encode(crate::op::I32TruncSatF64U_RS { result, input })
            }
            Self::I32TruncSatF64U_SR { result, input } => {
                encoder.encode(crate::op::I32TruncSatF64U_SR { result, input })
            }
            Self::I32TruncSatF64U_SS { result, input } => {
                encoder.encode(crate::op::I32TruncSatF64U_SS { result, input })
            }
            Self::I64TruncSatF32S_RR { result, input } => {
                encoder.encode(crate::op::I64TruncSatF32S_RR { result, input })
            }
            Self::I64TruncSatF32S_RS { result, input } => {
                encoder.encode(crate::op::I64TruncSatF32S_RS { result, input })
            }
            Self::I64TruncSatF32S_SR { result, input } => {
                encoder.encode(crate::op::I64TruncSatF32S_SR { result, input })
            }
            Self::I64TruncSatF32S_SS { result, input } => {
                encoder.encode(crate::op::I64TruncSatF32S_SS { result, input })
            }
            Self::I64TruncSatF32U_RR { result, input } => {
                encoder.encode(crate::op::I64TruncSatF32U_RR { result, input })
            }
            Self::I64TruncSatF32U_RS { result, input } => {
                encoder.encode(crate::op::I64TruncSatF32U_RS { result, input })
            }
            Self::I64TruncSatF32U_SR { result, input } => {
                encoder.encode(crate::op::I64TruncSatF32U_SR { result, input })
            }
            Self::I64TruncSatF32U_SS { result, input } => {
                encoder.encode(crate::op::I64TruncSatF32U_SS { result, input })
            }
            Self::I64TruncSatF64S_RR { result, input } => {
                encoder.encode(crate::op::I64TruncSatF64S_RR { result, input })
            }
            Self::I64TruncSatF64S_RS { result, input } => {
                encoder.encode(crate::op::I64TruncSatF64S_RS { result, input })
            }
            Self::I64TruncSatF64S_SR { result, input } => {
                encoder.encode(crate::op::I64TruncSatF64S_SR { result, input })
            }
            Self::I64TruncSatF64S_SS { result, input } => {
                encoder.encode(crate::op::I64TruncSatF64S_SS { result, input })
            }
            Self::I64TruncSatF64U_RR { result, input } => {
                encoder.encode(crate::op::I64TruncSatF64U_RR { result, input })
            }
            Self::I64TruncSatF64U_RS { result, input } => {
                encoder.encode(crate::op::I64TruncSatF64U_RS { result, input })
            }
            Self::I64TruncSatF64U_SR { result, input } => {
                encoder.encode(crate::op::I64TruncSatF64U_SR { result, input })
            }
            Self::I64TruncSatF64U_SS { result, input } => {
                encoder.encode(crate::op::I64TruncSatF64U_SS { result, input })
            }
            Self::I32Extend8S_RR { result, input } => {
                encoder.encode(crate::op::I32Extend8S_RR { result, input })
            }
            Self::I32Extend8S_RS { result, input } => {
                encoder.encode(crate::op::I32Extend8S_RS { result, input })
            }
            Self::I32Extend8S_SR { result, input } => {
                encoder.encode(crate::op::I32Extend8S_SR { result, input })
            }
            Self::I32Extend8S_SS { result, input } => {
                encoder.encode(crate::op::I32Extend8S_SS { result, input })
            }
            Self::I32Extend16S_RR { result, input } => {
                encoder.encode(crate::op::I32Extend16S_RR { result, input })
            }
            Self::I32Extend16S_RS { result, input } => {
                encoder.encode(crate::op::I32Extend16S_RS { result, input })
            }
            Self::I32Extend16S_SR { result, input } => {
                encoder.encode(crate::op::I32Extend16S_SR { result, input })
            }
            Self::I32Extend16S_SS { result, input } => {
                encoder.encode(crate::op::I32Extend16S_SS { result, input })
            }
            Self::I64Extend8S_RR { result, input } => {
                encoder.encode(crate::op::I64Extend8S_RR { result, input })
            }
            Self::I64Extend8S_RS { result, input } => {
                encoder.encode(crate::op::I64Extend8S_RS { result, input })
            }
            Self::I64Extend8S_SR { result, input } => {
                encoder.encode(crate::op::I64Extend8S_SR { result, input })
            }
            Self::I64Extend8S_SS { result, input } => {
                encoder.encode(crate::op::I64Extend8S_SS { result, input })
            }
            Self::I64Extend16S_RR { result, input } => {
                encoder.encode(crate::op::I64Extend16S_RR { result, input })
            }
            Self::I64Extend16S_RS { result, input } => {
                encoder.encode(crate::op::I64Extend16S_RS { result, input })
            }
            Self::I64Extend16S_SR { result, input } => {
                encoder.encode(crate::op::I64Extend16S_SR { result, input })
            }
            Self::I64Extend16S_SS { result, input } => {
                encoder.encode(crate::op::I64Extend16S_SS { result, input })
            }
            Self::I64Extend32S_RR { result, input } => {
                encoder.encode(crate::op::I64Extend32S_RR { result, input })
            }
            Self::I64Extend32S_RS { result, input } => {
                encoder.encode(crate::op::I64Extend32S_RS { result, input })
            }
            Self::I64Extend32S_SR { result, input } => {
                encoder.encode(crate::op::I64Extend32S_SR { result, input })
            }
            Self::I64Extend32S_SS { result, input } => {
                encoder.encode(crate::op::I64Extend32S_SS { result, input })
            }
            Self::I32WrapI64_RR { result, input } => {
                encoder.encode(crate::op::I32WrapI64_RR { result, input })
            }
            Self::I32WrapI64_RS { result, input } => {
                encoder.encode(crate::op::I32WrapI64_RS { result, input })
            }
            Self::I32WrapI64_SR { result, input } => {
                encoder.encode(crate::op::I32WrapI64_SR { result, input })
            }
            Self::I32WrapI64_SS { result, input } => {
                encoder.encode(crate::op::I32WrapI64_SS { result, input })
            }
            Self::I32Add_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Add_RRS { result, lhs, rhs })
            }
            Self::I32Add_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Add_RRI { result, lhs, rhs })
            }
            Self::I32Add_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Add_RSS { result, lhs, rhs })
            }
            Self::I32Add_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Add_RSI { result, lhs, rhs })
            }
            Self::I32Add_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Add_SRS { result, lhs, rhs })
            }
            Self::I32Add_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Add_SRI { result, lhs, rhs })
            }
            Self::I32Add_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Add_SSS { result, lhs, rhs })
            }
            Self::I32Add_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Add_SSI { result, lhs, rhs })
            }
            Self::I64Add_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Add_RRS { result, lhs, rhs })
            }
            Self::I64Add_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Add_RRI { result, lhs, rhs })
            }
            Self::I64Add_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Add_RSS { result, lhs, rhs })
            }
            Self::I64Add_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Add_RSI { result, lhs, rhs })
            }
            Self::I64Add_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Add_SRS { result, lhs, rhs })
            }
            Self::I64Add_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Add_SRI { result, lhs, rhs })
            }
            Self::I64Add_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Add_SSS { result, lhs, rhs })
            }
            Self::I64Add_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Add_SSI { result, lhs, rhs })
            }
            Self::I32Mul_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Mul_RRS { result, lhs, rhs })
            }
            Self::I32Mul_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Mul_RRI { result, lhs, rhs })
            }
            Self::I32Mul_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Mul_RSS { result, lhs, rhs })
            }
            Self::I32Mul_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Mul_RSI { result, lhs, rhs })
            }
            Self::I32Mul_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Mul_SRS { result, lhs, rhs })
            }
            Self::I32Mul_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Mul_SRI { result, lhs, rhs })
            }
            Self::I32Mul_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Mul_SSS { result, lhs, rhs })
            }
            Self::I32Mul_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Mul_SSI { result, lhs, rhs })
            }
            Self::I64Mul_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Mul_RRS { result, lhs, rhs })
            }
            Self::I64Mul_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Mul_RRI { result, lhs, rhs })
            }
            Self::I64Mul_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Mul_RSS { result, lhs, rhs })
            }
            Self::I64Mul_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Mul_RSI { result, lhs, rhs })
            }
            Self::I64Mul_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Mul_SRS { result, lhs, rhs })
            }
            Self::I64Mul_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Mul_SRI { result, lhs, rhs })
            }
            Self::I64Mul_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Mul_SSS { result, lhs, rhs })
            }
            Self::I64Mul_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Mul_SSI { result, lhs, rhs })
            }
            Self::I32And_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32And_RRS { result, lhs, rhs })
            }
            Self::I32And_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32And_RRI { result, lhs, rhs })
            }
            Self::I32And_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32And_RSS { result, lhs, rhs })
            }
            Self::I32And_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32And_RSI { result, lhs, rhs })
            }
            Self::I32And_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32And_SRS { result, lhs, rhs })
            }
            Self::I32And_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32And_SRI { result, lhs, rhs })
            }
            Self::I32And_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32And_SSS { result, lhs, rhs })
            }
            Self::I32And_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32And_SSI { result, lhs, rhs })
            }
            Self::I64And_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64And_RRS { result, lhs, rhs })
            }
            Self::I64And_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64And_RRI { result, lhs, rhs })
            }
            Self::I64And_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64And_RSS { result, lhs, rhs })
            }
            Self::I64And_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64And_RSI { result, lhs, rhs })
            }
            Self::I64And_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64And_SRS { result, lhs, rhs })
            }
            Self::I64And_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64And_SRI { result, lhs, rhs })
            }
            Self::I64And_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64And_SSS { result, lhs, rhs })
            }
            Self::I64And_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64And_SSI { result, lhs, rhs })
            }
            Self::I32Or_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Or_RRS { result, lhs, rhs })
            }
            Self::I32Or_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Or_RRI { result, lhs, rhs })
            }
            Self::I32Or_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Or_RSS { result, lhs, rhs })
            }
            Self::I32Or_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Or_RSI { result, lhs, rhs })
            }
            Self::I32Or_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Or_SRS { result, lhs, rhs })
            }
            Self::I32Or_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Or_SRI { result, lhs, rhs })
            }
            Self::I32Or_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Or_SSS { result, lhs, rhs })
            }
            Self::I32Or_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Or_SSI { result, lhs, rhs })
            }
            Self::I64Or_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Or_RRS { result, lhs, rhs })
            }
            Self::I64Or_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Or_RRI { result, lhs, rhs })
            }
            Self::I64Or_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Or_RSS { result, lhs, rhs })
            }
            Self::I64Or_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Or_RSI { result, lhs, rhs })
            }
            Self::I64Or_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Or_SRS { result, lhs, rhs })
            }
            Self::I64Or_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Or_SRI { result, lhs, rhs })
            }
            Self::I64Or_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Or_SSS { result, lhs, rhs })
            }
            Self::I64Or_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Or_SSI { result, lhs, rhs })
            }
            Self::I32Xor_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Xor_RRS { result, lhs, rhs })
            }
            Self::I32Xor_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Xor_RRI { result, lhs, rhs })
            }
            Self::I32Xor_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Xor_RSS { result, lhs, rhs })
            }
            Self::I32Xor_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Xor_RSI { result, lhs, rhs })
            }
            Self::I32Xor_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Xor_SRS { result, lhs, rhs })
            }
            Self::I32Xor_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Xor_SRI { result, lhs, rhs })
            }
            Self::I32Xor_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Xor_SSS { result, lhs, rhs })
            }
            Self::I32Xor_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Xor_SSI { result, lhs, rhs })
            }
            Self::I64Xor_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Xor_RRS { result, lhs, rhs })
            }
            Self::I64Xor_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Xor_RRI { result, lhs, rhs })
            }
            Self::I64Xor_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Xor_RSS { result, lhs, rhs })
            }
            Self::I64Xor_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Xor_RSI { result, lhs, rhs })
            }
            Self::I64Xor_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Xor_SRS { result, lhs, rhs })
            }
            Self::I64Xor_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Xor_SRI { result, lhs, rhs })
            }
            Self::I64Xor_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Xor_SSS { result, lhs, rhs })
            }
            Self::I64Xor_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Xor_SSI { result, lhs, rhs })
            }
            Self::I32Eq_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Eq_RRS { result, lhs, rhs })
            }
            Self::I32Eq_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Eq_RRI { result, lhs, rhs })
            }
            Self::I32Eq_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Eq_RSS { result, lhs, rhs })
            }
            Self::I32Eq_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Eq_RSI { result, lhs, rhs })
            }
            Self::I32Eq_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Eq_SRS { result, lhs, rhs })
            }
            Self::I32Eq_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Eq_SRI { result, lhs, rhs })
            }
            Self::I32Eq_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Eq_SSS { result, lhs, rhs })
            }
            Self::I32Eq_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Eq_SSI { result, lhs, rhs })
            }
            Self::I64Eq_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Eq_RRS { result, lhs, rhs })
            }
            Self::I64Eq_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Eq_RRI { result, lhs, rhs })
            }
            Self::I64Eq_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Eq_RSS { result, lhs, rhs })
            }
            Self::I64Eq_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Eq_RSI { result, lhs, rhs })
            }
            Self::I64Eq_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Eq_SRS { result, lhs, rhs })
            }
            Self::I64Eq_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Eq_SRI { result, lhs, rhs })
            }
            Self::I64Eq_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Eq_SSS { result, lhs, rhs })
            }
            Self::I64Eq_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Eq_SSI { result, lhs, rhs })
            }
            Self::I32Ne_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Ne_RRS { result, lhs, rhs })
            }
            Self::I32Ne_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Ne_RRI { result, lhs, rhs })
            }
            Self::I32Ne_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Ne_RSS { result, lhs, rhs })
            }
            Self::I32Ne_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Ne_RSI { result, lhs, rhs })
            }
            Self::I32Ne_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Ne_SRS { result, lhs, rhs })
            }
            Self::I32Ne_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Ne_SRI { result, lhs, rhs })
            }
            Self::I32Ne_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Ne_SSS { result, lhs, rhs })
            }
            Self::I32Ne_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Ne_SSI { result, lhs, rhs })
            }
            Self::I64Ne_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Ne_RRS { result, lhs, rhs })
            }
            Self::I64Ne_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Ne_RRI { result, lhs, rhs })
            }
            Self::I64Ne_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Ne_RSS { result, lhs, rhs })
            }
            Self::I64Ne_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Ne_RSI { result, lhs, rhs })
            }
            Self::I64Ne_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Ne_SRS { result, lhs, rhs })
            }
            Self::I64Ne_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Ne_SRI { result, lhs, rhs })
            }
            Self::I64Ne_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Ne_SSS { result, lhs, rhs })
            }
            Self::I64Ne_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Ne_SSI { result, lhs, rhs })
            }
            Self::F32Add_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Add_RRS { result, lhs, rhs })
            }
            Self::F32Add_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Add_RRI { result, lhs, rhs })
            }
            Self::F32Add_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Add_RSS { result, lhs, rhs })
            }
            Self::F32Add_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Add_RSI { result, lhs, rhs })
            }
            Self::F32Add_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Add_SRS { result, lhs, rhs })
            }
            Self::F32Add_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Add_SRI { result, lhs, rhs })
            }
            Self::F32Add_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Add_SSS { result, lhs, rhs })
            }
            Self::F32Add_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Add_SSI { result, lhs, rhs })
            }
            Self::F64Add_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Add_RRS { result, lhs, rhs })
            }
            Self::F64Add_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Add_RRI { result, lhs, rhs })
            }
            Self::F64Add_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Add_RSS { result, lhs, rhs })
            }
            Self::F64Add_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Add_RSI { result, lhs, rhs })
            }
            Self::F64Add_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Add_SRS { result, lhs, rhs })
            }
            Self::F64Add_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Add_SRI { result, lhs, rhs })
            }
            Self::F64Add_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Add_SSS { result, lhs, rhs })
            }
            Self::F64Add_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Add_SSI { result, lhs, rhs })
            }
            Self::F32Mul_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Mul_RRS { result, lhs, rhs })
            }
            Self::F32Mul_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Mul_RRI { result, lhs, rhs })
            }
            Self::F32Mul_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Mul_RSS { result, lhs, rhs })
            }
            Self::F32Mul_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Mul_RSI { result, lhs, rhs })
            }
            Self::F32Mul_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Mul_SRS { result, lhs, rhs })
            }
            Self::F32Mul_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Mul_SRI { result, lhs, rhs })
            }
            Self::F32Mul_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Mul_SSS { result, lhs, rhs })
            }
            Self::F32Mul_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Mul_SSI { result, lhs, rhs })
            }
            Self::F64Mul_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Mul_RRS { result, lhs, rhs })
            }
            Self::F64Mul_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Mul_RRI { result, lhs, rhs })
            }
            Self::F64Mul_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Mul_RSS { result, lhs, rhs })
            }
            Self::F64Mul_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Mul_RSI { result, lhs, rhs })
            }
            Self::F64Mul_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Mul_SRS { result, lhs, rhs })
            }
            Self::F64Mul_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Mul_SRI { result, lhs, rhs })
            }
            Self::F64Mul_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Mul_SSS { result, lhs, rhs })
            }
            Self::F64Mul_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Mul_SSI { result, lhs, rhs })
            }
            Self::F32Eq_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Eq_RRS { result, lhs, rhs })
            }
            Self::F32Eq_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Eq_RRI { result, lhs, rhs })
            }
            Self::F32Eq_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Eq_RSS { result, lhs, rhs })
            }
            Self::F32Eq_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Eq_RSI { result, lhs, rhs })
            }
            Self::F32Eq_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Eq_SRS { result, lhs, rhs })
            }
            Self::F32Eq_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Eq_SRI { result, lhs, rhs })
            }
            Self::F32Eq_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Eq_SSS { result, lhs, rhs })
            }
            Self::F32Eq_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Eq_SSI { result, lhs, rhs })
            }
            Self::F64Eq_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Eq_RRS { result, lhs, rhs })
            }
            Self::F64Eq_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Eq_RRI { result, lhs, rhs })
            }
            Self::F64Eq_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Eq_RSS { result, lhs, rhs })
            }
            Self::F64Eq_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Eq_RSI { result, lhs, rhs })
            }
            Self::F64Eq_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Eq_SRS { result, lhs, rhs })
            }
            Self::F64Eq_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Eq_SRI { result, lhs, rhs })
            }
            Self::F64Eq_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Eq_SSS { result, lhs, rhs })
            }
            Self::F64Eq_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Eq_SSI { result, lhs, rhs })
            }
            Self::F32Ne_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Ne_RRS { result, lhs, rhs })
            }
            Self::F32Ne_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Ne_RRI { result, lhs, rhs })
            }
            Self::F32Ne_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Ne_RSS { result, lhs, rhs })
            }
            Self::F32Ne_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Ne_RSI { result, lhs, rhs })
            }
            Self::F32Ne_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Ne_SRS { result, lhs, rhs })
            }
            Self::F32Ne_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Ne_SRI { result, lhs, rhs })
            }
            Self::F32Ne_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Ne_SSS { result, lhs, rhs })
            }
            Self::F32Ne_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Ne_SSI { result, lhs, rhs })
            }
            Self::F64Ne_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Ne_RRS { result, lhs, rhs })
            }
            Self::F64Ne_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Ne_RRI { result, lhs, rhs })
            }
            Self::F64Ne_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Ne_RSS { result, lhs, rhs })
            }
            Self::F64Ne_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Ne_RSI { result, lhs, rhs })
            }
            Self::F64Ne_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Ne_SRS { result, lhs, rhs })
            }
            Self::F64Ne_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Ne_SRI { result, lhs, rhs })
            }
            Self::F64Ne_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Ne_SSS { result, lhs, rhs })
            }
            Self::F64Ne_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Ne_SSI { result, lhs, rhs })
            }
            Self::F32Min_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Min_RRS { result, lhs, rhs })
            }
            Self::F32Min_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Min_RRI { result, lhs, rhs })
            }
            Self::F32Min_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Min_RSS { result, lhs, rhs })
            }
            Self::F32Min_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Min_RSI { result, lhs, rhs })
            }
            Self::F32Min_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Min_SRS { result, lhs, rhs })
            }
            Self::F32Min_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Min_SRI { result, lhs, rhs })
            }
            Self::F32Min_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Min_SSS { result, lhs, rhs })
            }
            Self::F32Min_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Min_SSI { result, lhs, rhs })
            }
            Self::F64Min_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Min_RRS { result, lhs, rhs })
            }
            Self::F64Min_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Min_RRI { result, lhs, rhs })
            }
            Self::F64Min_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Min_RSS { result, lhs, rhs })
            }
            Self::F64Min_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Min_RSI { result, lhs, rhs })
            }
            Self::F64Min_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Min_SRS { result, lhs, rhs })
            }
            Self::F64Min_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Min_SRI { result, lhs, rhs })
            }
            Self::F64Min_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Min_SSS { result, lhs, rhs })
            }
            Self::F64Min_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Min_SSI { result, lhs, rhs })
            }
            Self::F32Max_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Max_RRS { result, lhs, rhs })
            }
            Self::F32Max_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Max_RRI { result, lhs, rhs })
            }
            Self::F32Max_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Max_RSS { result, lhs, rhs })
            }
            Self::F32Max_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Max_RSI { result, lhs, rhs })
            }
            Self::F32Max_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Max_SRS { result, lhs, rhs })
            }
            Self::F32Max_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Max_SRI { result, lhs, rhs })
            }
            Self::F32Max_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Max_SSS { result, lhs, rhs })
            }
            Self::F32Max_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Max_SSI { result, lhs, rhs })
            }
            Self::F64Max_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Max_RRS { result, lhs, rhs })
            }
            Self::F64Max_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Max_RRI { result, lhs, rhs })
            }
            Self::F64Max_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Max_RSS { result, lhs, rhs })
            }
            Self::F64Max_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Max_RSI { result, lhs, rhs })
            }
            Self::F64Max_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Max_SRS { result, lhs, rhs })
            }
            Self::F64Max_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Max_SRI { result, lhs, rhs })
            }
            Self::F64Max_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Max_SSS { result, lhs, rhs })
            }
            Self::F64Max_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Max_SSI { result, lhs, rhs })
            }
            Self::I32Sub_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Sub_RRS { result, lhs, rhs })
            }
            Self::I32Sub_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Sub_RRI { result, lhs, rhs })
            }
            Self::I32Sub_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Sub_RSR { result, lhs, rhs })
            }
            Self::I32Sub_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Sub_RSS { result, lhs, rhs })
            }
            Self::I32Sub_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Sub_RSI { result, lhs, rhs })
            }
            Self::I32Sub_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Sub_RIR { result, lhs, rhs })
            }
            Self::I32Sub_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Sub_RIS { result, lhs, rhs })
            }
            Self::I64Sub_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Sub_RRS { result, lhs, rhs })
            }
            Self::I64Sub_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Sub_RRI { result, lhs, rhs })
            }
            Self::I64Sub_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Sub_RSR { result, lhs, rhs })
            }
            Self::I64Sub_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Sub_RSS { result, lhs, rhs })
            }
            Self::I64Sub_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Sub_RSI { result, lhs, rhs })
            }
            Self::I64Sub_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Sub_RIR { result, lhs, rhs })
            }
            Self::I64Sub_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Sub_RIS { result, lhs, rhs })
            }
            Self::I32LtS_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LtS_RRS { result, lhs, rhs })
            }
            Self::I32LtS_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LtS_RRI { result, lhs, rhs })
            }
            Self::I32LtS_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LtS_RSR { result, lhs, rhs })
            }
            Self::I32LtS_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LtS_RSS { result, lhs, rhs })
            }
            Self::I32LtS_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LtS_RSI { result, lhs, rhs })
            }
            Self::I32LtS_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LtS_RIR { result, lhs, rhs })
            }
            Self::I32LtS_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LtS_RIS { result, lhs, rhs })
            }
            Self::I64LtS_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LtS_RRS { result, lhs, rhs })
            }
            Self::I64LtS_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LtS_RRI { result, lhs, rhs })
            }
            Self::I64LtS_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LtS_RSR { result, lhs, rhs })
            }
            Self::I64LtS_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LtS_RSS { result, lhs, rhs })
            }
            Self::I64LtS_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LtS_RSI { result, lhs, rhs })
            }
            Self::I64LtS_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LtS_RIR { result, lhs, rhs })
            }
            Self::I64LtS_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LtS_RIS { result, lhs, rhs })
            }
            Self::I32LtU_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LtU_RRS { result, lhs, rhs })
            }
            Self::I32LtU_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LtU_RRI { result, lhs, rhs })
            }
            Self::I32LtU_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LtU_RSR { result, lhs, rhs })
            }
            Self::I32LtU_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LtU_RSS { result, lhs, rhs })
            }
            Self::I32LtU_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LtU_RSI { result, lhs, rhs })
            }
            Self::I32LtU_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LtU_RIR { result, lhs, rhs })
            }
            Self::I32LtU_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LtU_RIS { result, lhs, rhs })
            }
            Self::I64LtU_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LtU_RRS { result, lhs, rhs })
            }
            Self::I64LtU_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LtU_RRI { result, lhs, rhs })
            }
            Self::I64LtU_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LtU_RSR { result, lhs, rhs })
            }
            Self::I64LtU_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LtU_RSS { result, lhs, rhs })
            }
            Self::I64LtU_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LtU_RSI { result, lhs, rhs })
            }
            Self::I64LtU_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LtU_RIR { result, lhs, rhs })
            }
            Self::I64LtU_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LtU_RIS { result, lhs, rhs })
            }
            Self::I32LeS_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LeS_RRS { result, lhs, rhs })
            }
            Self::I32LeS_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LeS_RRI { result, lhs, rhs })
            }
            Self::I32LeS_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LeS_RSR { result, lhs, rhs })
            }
            Self::I32LeS_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LeS_RSS { result, lhs, rhs })
            }
            Self::I32LeS_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LeS_RSI { result, lhs, rhs })
            }
            Self::I32LeS_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LeS_RIR { result, lhs, rhs })
            }
            Self::I32LeS_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LeS_RIS { result, lhs, rhs })
            }
            Self::I64LeS_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LeS_RRS { result, lhs, rhs })
            }
            Self::I64LeS_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LeS_RRI { result, lhs, rhs })
            }
            Self::I64LeS_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LeS_RSR { result, lhs, rhs })
            }
            Self::I64LeS_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LeS_RSS { result, lhs, rhs })
            }
            Self::I64LeS_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LeS_RSI { result, lhs, rhs })
            }
            Self::I64LeS_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LeS_RIR { result, lhs, rhs })
            }
            Self::I64LeS_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LeS_RIS { result, lhs, rhs })
            }
            Self::I32LeU_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LeU_RRS { result, lhs, rhs })
            }
            Self::I32LeU_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LeU_RRI { result, lhs, rhs })
            }
            Self::I32LeU_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LeU_RSR { result, lhs, rhs })
            }
            Self::I32LeU_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LeU_RSS { result, lhs, rhs })
            }
            Self::I32LeU_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LeU_RSI { result, lhs, rhs })
            }
            Self::I32LeU_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LeU_RIR { result, lhs, rhs })
            }
            Self::I32LeU_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LeU_RIS { result, lhs, rhs })
            }
            Self::I64LeU_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LeU_RRS { result, lhs, rhs })
            }
            Self::I64LeU_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LeU_RRI { result, lhs, rhs })
            }
            Self::I64LeU_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LeU_RSR { result, lhs, rhs })
            }
            Self::I64LeU_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LeU_RSS { result, lhs, rhs })
            }
            Self::I64LeU_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LeU_RSI { result, lhs, rhs })
            }
            Self::I64LeU_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LeU_RIR { result, lhs, rhs })
            }
            Self::I64LeU_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LeU_RIS { result, lhs, rhs })
            }
            Self::I32DivS_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32DivS_RRS { result, lhs, rhs })
            }
            Self::I32DivS_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32DivS_RRI { result, lhs, rhs })
            }
            Self::I32DivS_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32DivS_RSR { result, lhs, rhs })
            }
            Self::I32DivS_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32DivS_RSS { result, lhs, rhs })
            }
            Self::I32DivS_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32DivS_RSI { result, lhs, rhs })
            }
            Self::I32DivS_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32DivS_RIR { result, lhs, rhs })
            }
            Self::I32DivS_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32DivS_RIS { result, lhs, rhs })
            }
            Self::I64DivS_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64DivS_RRS { result, lhs, rhs })
            }
            Self::I64DivS_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64DivS_RRI { result, lhs, rhs })
            }
            Self::I64DivS_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64DivS_RSR { result, lhs, rhs })
            }
            Self::I64DivS_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64DivS_RSS { result, lhs, rhs })
            }
            Self::I64DivS_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64DivS_RSI { result, lhs, rhs })
            }
            Self::I64DivS_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64DivS_RIR { result, lhs, rhs })
            }
            Self::I64DivS_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64DivS_RIS { result, lhs, rhs })
            }
            Self::I32DivU_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32DivU_RRS { result, lhs, rhs })
            }
            Self::I32DivU_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32DivU_RRI { result, lhs, rhs })
            }
            Self::I32DivU_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32DivU_RSR { result, lhs, rhs })
            }
            Self::I32DivU_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32DivU_RSS { result, lhs, rhs })
            }
            Self::I32DivU_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32DivU_RSI { result, lhs, rhs })
            }
            Self::I32DivU_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32DivU_RIR { result, lhs, rhs })
            }
            Self::I32DivU_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32DivU_RIS { result, lhs, rhs })
            }
            Self::I64DivU_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64DivU_RRS { result, lhs, rhs })
            }
            Self::I64DivU_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64DivU_RRI { result, lhs, rhs })
            }
            Self::I64DivU_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64DivU_RSR { result, lhs, rhs })
            }
            Self::I64DivU_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64DivU_RSS { result, lhs, rhs })
            }
            Self::I64DivU_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64DivU_RSI { result, lhs, rhs })
            }
            Self::I64DivU_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64DivU_RIR { result, lhs, rhs })
            }
            Self::I64DivU_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64DivU_RIS { result, lhs, rhs })
            }
            Self::I32RemS_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32RemS_RRS { result, lhs, rhs })
            }
            Self::I32RemS_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32RemS_RRI { result, lhs, rhs })
            }
            Self::I32RemS_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32RemS_RSR { result, lhs, rhs })
            }
            Self::I32RemS_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32RemS_RSS { result, lhs, rhs })
            }
            Self::I32RemS_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32RemS_RSI { result, lhs, rhs })
            }
            Self::I32RemS_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32RemS_RIR { result, lhs, rhs })
            }
            Self::I32RemS_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32RemS_RIS { result, lhs, rhs })
            }
            Self::I64RemS_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64RemS_RRS { result, lhs, rhs })
            }
            Self::I64RemS_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64RemS_RRI { result, lhs, rhs })
            }
            Self::I64RemS_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64RemS_RSR { result, lhs, rhs })
            }
            Self::I64RemS_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64RemS_RSS { result, lhs, rhs })
            }
            Self::I64RemS_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64RemS_RSI { result, lhs, rhs })
            }
            Self::I64RemS_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64RemS_RIR { result, lhs, rhs })
            }
            Self::I64RemS_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64RemS_RIS { result, lhs, rhs })
            }
            Self::I32RemU_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32RemU_RRS { result, lhs, rhs })
            }
            Self::I32RemU_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32RemU_RRI { result, lhs, rhs })
            }
            Self::I32RemU_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32RemU_RSR { result, lhs, rhs })
            }
            Self::I32RemU_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32RemU_RSS { result, lhs, rhs })
            }
            Self::I32RemU_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32RemU_RSI { result, lhs, rhs })
            }
            Self::I32RemU_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32RemU_RIR { result, lhs, rhs })
            }
            Self::I32RemU_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32RemU_RIS { result, lhs, rhs })
            }
            Self::I64RemU_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64RemU_RRS { result, lhs, rhs })
            }
            Self::I64RemU_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64RemU_RRI { result, lhs, rhs })
            }
            Self::I64RemU_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64RemU_RSR { result, lhs, rhs })
            }
            Self::I64RemU_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64RemU_RSS { result, lhs, rhs })
            }
            Self::I64RemU_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64RemU_RSI { result, lhs, rhs })
            }
            Self::I64RemU_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64RemU_RIR { result, lhs, rhs })
            }
            Self::I64RemU_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64RemU_RIS { result, lhs, rhs })
            }
            Self::I32Shl_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Shl_RRS { result, lhs, rhs })
            }
            Self::I32Shl_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Shl_RRI { result, lhs, rhs })
            }
            Self::I32Shl_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Shl_RSR { result, lhs, rhs })
            }
            Self::I32Shl_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Shl_RSS { result, lhs, rhs })
            }
            Self::I32Shl_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Shl_RSI { result, lhs, rhs })
            }
            Self::I32Shl_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Shl_RIR { result, lhs, rhs })
            }
            Self::I32Shl_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Shl_RIS { result, lhs, rhs })
            }
            Self::I64Shl_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Shl_RRS { result, lhs, rhs })
            }
            Self::I64Shl_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Shl_RRI { result, lhs, rhs })
            }
            Self::I64Shl_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Shl_RSR { result, lhs, rhs })
            }
            Self::I64Shl_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Shl_RSS { result, lhs, rhs })
            }
            Self::I64Shl_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Shl_RSI { result, lhs, rhs })
            }
            Self::I64Shl_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Shl_RIR { result, lhs, rhs })
            }
            Self::I64Shl_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Shl_RIS { result, lhs, rhs })
            }
            Self::I32ShrS_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32ShrS_RRS { result, lhs, rhs })
            }
            Self::I32ShrS_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32ShrS_RRI { result, lhs, rhs })
            }
            Self::I32ShrS_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32ShrS_RSR { result, lhs, rhs })
            }
            Self::I32ShrS_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32ShrS_RSS { result, lhs, rhs })
            }
            Self::I32ShrS_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32ShrS_RSI { result, lhs, rhs })
            }
            Self::I32ShrS_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32ShrS_RIR { result, lhs, rhs })
            }
            Self::I32ShrS_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32ShrS_RIS { result, lhs, rhs })
            }
            Self::I64ShrS_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64ShrS_RRS { result, lhs, rhs })
            }
            Self::I64ShrS_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64ShrS_RRI { result, lhs, rhs })
            }
            Self::I64ShrS_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64ShrS_RSR { result, lhs, rhs })
            }
            Self::I64ShrS_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64ShrS_RSS { result, lhs, rhs })
            }
            Self::I64ShrS_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64ShrS_RSI { result, lhs, rhs })
            }
            Self::I64ShrS_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64ShrS_RIR { result, lhs, rhs })
            }
            Self::I64ShrS_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64ShrS_RIS { result, lhs, rhs })
            }
            Self::I32ShrU_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32ShrU_RRS { result, lhs, rhs })
            }
            Self::I32ShrU_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32ShrU_RRI { result, lhs, rhs })
            }
            Self::I32ShrU_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32ShrU_RSR { result, lhs, rhs })
            }
            Self::I32ShrU_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32ShrU_RSS { result, lhs, rhs })
            }
            Self::I32ShrU_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32ShrU_RSI { result, lhs, rhs })
            }
            Self::I32ShrU_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32ShrU_RIR { result, lhs, rhs })
            }
            Self::I32ShrU_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32ShrU_RIS { result, lhs, rhs })
            }
            Self::I64ShrU_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64ShrU_RRS { result, lhs, rhs })
            }
            Self::I64ShrU_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64ShrU_RRI { result, lhs, rhs })
            }
            Self::I64ShrU_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64ShrU_RSR { result, lhs, rhs })
            }
            Self::I64ShrU_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64ShrU_RSS { result, lhs, rhs })
            }
            Self::I64ShrU_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64ShrU_RSI { result, lhs, rhs })
            }
            Self::I64ShrU_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64ShrU_RIR { result, lhs, rhs })
            }
            Self::I64ShrU_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64ShrU_RIS { result, lhs, rhs })
            }
            Self::I32Rotl_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Rotl_RRS { result, lhs, rhs })
            }
            Self::I32Rotl_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Rotl_RRI { result, lhs, rhs })
            }
            Self::I32Rotl_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Rotl_RSR { result, lhs, rhs })
            }
            Self::I32Rotl_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Rotl_RSS { result, lhs, rhs })
            }
            Self::I32Rotl_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Rotl_RSI { result, lhs, rhs })
            }
            Self::I32Rotl_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Rotl_RIR { result, lhs, rhs })
            }
            Self::I32Rotl_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Rotl_RIS { result, lhs, rhs })
            }
            Self::I64Rotl_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Rotl_RRS { result, lhs, rhs })
            }
            Self::I64Rotl_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Rotl_RRI { result, lhs, rhs })
            }
            Self::I64Rotl_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Rotl_RSR { result, lhs, rhs })
            }
            Self::I64Rotl_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Rotl_RSS { result, lhs, rhs })
            }
            Self::I64Rotl_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Rotl_RSI { result, lhs, rhs })
            }
            Self::I64Rotl_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Rotl_RIR { result, lhs, rhs })
            }
            Self::I64Rotl_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Rotl_RIS { result, lhs, rhs })
            }
            Self::I32Rotr_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Rotr_RRS { result, lhs, rhs })
            }
            Self::I32Rotr_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Rotr_RRI { result, lhs, rhs })
            }
            Self::I32Rotr_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Rotr_RSR { result, lhs, rhs })
            }
            Self::I32Rotr_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Rotr_RSS { result, lhs, rhs })
            }
            Self::I32Rotr_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Rotr_RSI { result, lhs, rhs })
            }
            Self::I32Rotr_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Rotr_RIR { result, lhs, rhs })
            }
            Self::I32Rotr_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Rotr_RIS { result, lhs, rhs })
            }
            Self::I64Rotr_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Rotr_RRS { result, lhs, rhs })
            }
            Self::I64Rotr_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Rotr_RRI { result, lhs, rhs })
            }
            Self::I64Rotr_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Rotr_RSR { result, lhs, rhs })
            }
            Self::I64Rotr_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Rotr_RSS { result, lhs, rhs })
            }
            Self::I64Rotr_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Rotr_RSI { result, lhs, rhs })
            }
            Self::I64Rotr_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Rotr_RIR { result, lhs, rhs })
            }
            Self::I64Rotr_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Rotr_RIS { result, lhs, rhs })
            }
            Self::F32Sub_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Sub_RRS { result, lhs, rhs })
            }
            Self::F32Sub_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Sub_RRI { result, lhs, rhs })
            }
            Self::F32Sub_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Sub_RSR { result, lhs, rhs })
            }
            Self::F32Sub_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Sub_RSS { result, lhs, rhs })
            }
            Self::F32Sub_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Sub_RSI { result, lhs, rhs })
            }
            Self::F32Sub_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Sub_RIR { result, lhs, rhs })
            }
            Self::F32Sub_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Sub_RIS { result, lhs, rhs })
            }
            Self::F64Sub_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Sub_RRS { result, lhs, rhs })
            }
            Self::F64Sub_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Sub_RRI { result, lhs, rhs })
            }
            Self::F64Sub_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Sub_RSR { result, lhs, rhs })
            }
            Self::F64Sub_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Sub_RSS { result, lhs, rhs })
            }
            Self::F64Sub_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Sub_RSI { result, lhs, rhs })
            }
            Self::F64Sub_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Sub_RIR { result, lhs, rhs })
            }
            Self::F64Sub_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Sub_RIS { result, lhs, rhs })
            }
            Self::F32Div_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Div_RRS { result, lhs, rhs })
            }
            Self::F32Div_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Div_RRI { result, lhs, rhs })
            }
            Self::F32Div_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Div_RSR { result, lhs, rhs })
            }
            Self::F32Div_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Div_RSS { result, lhs, rhs })
            }
            Self::F32Div_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Div_RSI { result, lhs, rhs })
            }
            Self::F32Div_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Div_RIR { result, lhs, rhs })
            }
            Self::F32Div_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Div_RIS { result, lhs, rhs })
            }
            Self::F64Div_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Div_RRS { result, lhs, rhs })
            }
            Self::F64Div_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Div_RRI { result, lhs, rhs })
            }
            Self::F64Div_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Div_RSR { result, lhs, rhs })
            }
            Self::F64Div_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Div_RSS { result, lhs, rhs })
            }
            Self::F64Div_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Div_RSI { result, lhs, rhs })
            }
            Self::F64Div_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Div_RIR { result, lhs, rhs })
            }
            Self::F64Div_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Div_RIS { result, lhs, rhs })
            }
            Self::F32Copysign_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Copysign_RRS { result, lhs, rhs })
            }
            Self::F32Copysign_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Copysign_RRI { result, lhs, rhs })
            }
            Self::F32Copysign_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Copysign_RSR { result, lhs, rhs })
            }
            Self::F32Copysign_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Copysign_RSS { result, lhs, rhs })
            }
            Self::F32Copysign_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Copysign_RSI { result, lhs, rhs })
            }
            Self::F32Copysign_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Copysign_RIR { result, lhs, rhs })
            }
            Self::F32Copysign_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Copysign_RIS { result, lhs, rhs })
            }
            Self::F64Copysign_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Copysign_RRS { result, lhs, rhs })
            }
            Self::F64Copysign_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Copysign_RRI { result, lhs, rhs })
            }
            Self::F64Copysign_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Copysign_RSR { result, lhs, rhs })
            }
            Self::F64Copysign_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Copysign_RSS { result, lhs, rhs })
            }
            Self::F64Copysign_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Copysign_RSI { result, lhs, rhs })
            }
            Self::F64Copysign_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Copysign_RIR { result, lhs, rhs })
            }
            Self::F64Copysign_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Copysign_RIS { result, lhs, rhs })
            }
            Self::I32Load_RR { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I32Load_RR { result, ptr, offset, memory })
            }
            Self::I32Load_RS { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I32Load_RS { result, ptr, offset, memory })
            }
            Self::I32Load_RI { result, address, memory } => {
                encoder.encode(crate::op::I32Load_RI { result, address, memory })
            }
            Self::I32LoadMem0_RR { result, ptr, offset } => {
                encoder.encode(crate::op::I32LoadMem0_RR { result, ptr, offset })
            }
            Self::I32LoadMem0_RS { result, ptr, offset } => {
                encoder.encode(crate::op::I32LoadMem0_RS { result, ptr, offset })
            }
            Self::I32LoadMem0_RI { result, address } => {
                encoder.encode(crate::op::I32LoadMem0_RI { result, address })
            }
            Self::I32LoadMem0_SR { result, ptr, offset } => {
                encoder.encode(crate::op::I32LoadMem0_SR { result, ptr, offset })
            }
            Self::I32LoadMem0_SS { result, ptr, offset } => {
                encoder.encode(crate::op::I32LoadMem0_SS { result, ptr, offset })
            }
            Self::I32LoadMem0_SI { result, address } => {
                encoder.encode(crate::op::I32LoadMem0_SI { result, address })
            }
            Self::I64Load_RR { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load_RR { result, ptr, offset, memory })
            }
            Self::I64Load_RS { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load_RS { result, ptr, offset, memory })
            }
            Self::I64Load_RI { result, address, memory } => {
                encoder.encode(crate::op::I64Load_RI { result, address, memory })
            }
            Self::I64LoadMem0_RR { result, ptr, offset } => {
                encoder.encode(crate::op::I64LoadMem0_RR { result, ptr, offset })
            }
            Self::I64LoadMem0_RS { result, ptr, offset } => {
                encoder.encode(crate::op::I64LoadMem0_RS { result, ptr, offset })
            }
            Self::I64LoadMem0_RI { result, address } => {
                encoder.encode(crate::op::I64LoadMem0_RI { result, address })
            }
            Self::I64LoadMem0_SR { result, ptr, offset } => {
                encoder.encode(crate::op::I64LoadMem0_SR { result, ptr, offset })
            }
            Self::I64LoadMem0_SS { result, ptr, offset } => {
                encoder.encode(crate::op::I64LoadMem0_SS { result, ptr, offset })
            }
            Self::I64LoadMem0_SI { result, address } => {
                encoder.encode(crate::op::I64LoadMem0_SI { result, address })
            }
            Self::F32Load_RR { result, ptr, offset, memory } => {
                encoder.encode(crate::op::F32Load_RR { result, ptr, offset, memory })
            }
            Self::F32Load_RS { result, ptr, offset, memory } => {
                encoder.encode(crate::op::F32Load_RS { result, ptr, offset, memory })
            }
            Self::F32Load_RI { result, address, memory } => {
                encoder.encode(crate::op::F32Load_RI { result, address, memory })
            }
            Self::F32LoadMem0_RR { result, ptr, offset } => {
                encoder.encode(crate::op::F32LoadMem0_RR { result, ptr, offset })
            }
            Self::F32LoadMem0_RS { result, ptr, offset } => {
                encoder.encode(crate::op::F32LoadMem0_RS { result, ptr, offset })
            }
            Self::F32LoadMem0_RI { result, address } => {
                encoder.encode(crate::op::F32LoadMem0_RI { result, address })
            }
            Self::F32LoadMem0_SR { result, ptr, offset } => {
                encoder.encode(crate::op::F32LoadMem0_SR { result, ptr, offset })
            }
            Self::F32LoadMem0_SS { result, ptr, offset } => {
                encoder.encode(crate::op::F32LoadMem0_SS { result, ptr, offset })
            }
            Self::F32LoadMem0_SI { result, address } => {
                encoder.encode(crate::op::F32LoadMem0_SI { result, address })
            }
            Self::F64Load_RR { result, ptr, offset, memory } => {
                encoder.encode(crate::op::F64Load_RR { result, ptr, offset, memory })
            }
            Self::F64Load_RS { result, ptr, offset, memory } => {
                encoder.encode(crate::op::F64Load_RS { result, ptr, offset, memory })
            }
            Self::F64Load_RI { result, address, memory } => {
                encoder.encode(crate::op::F64Load_RI { result, address, memory })
            }
            Self::F64LoadMem0_RR { result, ptr, offset } => {
                encoder.encode(crate::op::F64LoadMem0_RR { result, ptr, offset })
            }
            Self::F64LoadMem0_RS { result, ptr, offset } => {
                encoder.encode(crate::op::F64LoadMem0_RS { result, ptr, offset })
            }
            Self::F64LoadMem0_RI { result, address } => {
                encoder.encode(crate::op::F64LoadMem0_RI { result, address })
            }
            Self::F64LoadMem0_SR { result, ptr, offset } => {
                encoder.encode(crate::op::F64LoadMem0_SR { result, ptr, offset })
            }
            Self::F64LoadMem0_SS { result, ptr, offset } => {
                encoder.encode(crate::op::F64LoadMem0_SS { result, ptr, offset })
            }
            Self::F64LoadMem0_SI { result, address } => {
                encoder.encode(crate::op::F64LoadMem0_SI { result, address })
            }
            Self::I32Load8S_RR { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I32Load8S_RR { result, ptr, offset, memory })
            }
            Self::I32Load8S_RS { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I32Load8S_RS { result, ptr, offset, memory })
            }
            Self::I32Load8S_RI { result, address, memory } => {
                encoder.encode(crate::op::I32Load8S_RI { result, address, memory })
            }
            Self::I32Load8SMem0_RR { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load8SMem0_RR { result, ptr, offset })
            }
            Self::I32Load8SMem0_RS { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load8SMem0_RS { result, ptr, offset })
            }
            Self::I32Load8SMem0_RI { result, address } => {
                encoder.encode(crate::op::I32Load8SMem0_RI { result, address })
            }
            Self::I32Load8SMem0_SR { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load8SMem0_SR { result, ptr, offset })
            }
            Self::I32Load8SMem0_SS { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load8SMem0_SS { result, ptr, offset })
            }
            Self::I32Load8SMem0_SI { result, address } => {
                encoder.encode(crate::op::I32Load8SMem0_SI { result, address })
            }
            Self::I64Load8S_RR { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load8S_RR { result, ptr, offset, memory })
            }
            Self::I64Load8S_RS { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load8S_RS { result, ptr, offset, memory })
            }
            Self::I64Load8S_RI { result, address, memory } => {
                encoder.encode(crate::op::I64Load8S_RI { result, address, memory })
            }
            Self::I64Load8SMem0_RR { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load8SMem0_RR { result, ptr, offset })
            }
            Self::I64Load8SMem0_RS { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load8SMem0_RS { result, ptr, offset })
            }
            Self::I64Load8SMem0_RI { result, address } => {
                encoder.encode(crate::op::I64Load8SMem0_RI { result, address })
            }
            Self::I64Load8SMem0_SR { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load8SMem0_SR { result, ptr, offset })
            }
            Self::I64Load8SMem0_SS { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load8SMem0_SS { result, ptr, offset })
            }
            Self::I64Load8SMem0_SI { result, address } => {
                encoder.encode(crate::op::I64Load8SMem0_SI { result, address })
            }
            Self::I32Load8U_RR { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I32Load8U_RR { result, ptr, offset, memory })
            }
            Self::I32Load8U_RS { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I32Load8U_RS { result, ptr, offset, memory })
            }
            Self::I32Load8U_RI { result, address, memory } => {
                encoder.encode(crate::op::I32Load8U_RI { result, address, memory })
            }
            Self::I32Load8UMem0_RR { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load8UMem0_RR { result, ptr, offset })
            }
            Self::I32Load8UMem0_RS { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load8UMem0_RS { result, ptr, offset })
            }
            Self::I32Load8UMem0_RI { result, address } => {
                encoder.encode(crate::op::I32Load8UMem0_RI { result, address })
            }
            Self::I32Load8UMem0_SR { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load8UMem0_SR { result, ptr, offset })
            }
            Self::I32Load8UMem0_SS { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load8UMem0_SS { result, ptr, offset })
            }
            Self::I32Load8UMem0_SI { result, address } => {
                encoder.encode(crate::op::I32Load8UMem0_SI { result, address })
            }
            Self::I64Load8U_RR { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load8U_RR { result, ptr, offset, memory })
            }
            Self::I64Load8U_RS { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load8U_RS { result, ptr, offset, memory })
            }
            Self::I64Load8U_RI { result, address, memory } => {
                encoder.encode(crate::op::I64Load8U_RI { result, address, memory })
            }
            Self::I64Load8UMem0_RR { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load8UMem0_RR { result, ptr, offset })
            }
            Self::I64Load8UMem0_RS { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load8UMem0_RS { result, ptr, offset })
            }
            Self::I64Load8UMem0_RI { result, address } => {
                encoder.encode(crate::op::I64Load8UMem0_RI { result, address })
            }
            Self::I64Load8UMem0_SR { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load8UMem0_SR { result, ptr, offset })
            }
            Self::I64Load8UMem0_SS { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load8UMem0_SS { result, ptr, offset })
            }
            Self::I64Load8UMem0_SI { result, address } => {
                encoder.encode(crate::op::I64Load8UMem0_SI { result, address })
            }
            Self::I32Load16S_RR { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I32Load16S_RR { result, ptr, offset, memory })
            }
            Self::I32Load16S_RS { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I32Load16S_RS { result, ptr, offset, memory })
            }
            Self::I32Load16S_RI { result, address, memory } => {
                encoder.encode(crate::op::I32Load16S_RI { result, address, memory })
            }
            Self::I32Load16SMem0_RR { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load16SMem0_RR { result, ptr, offset })
            }
            Self::I32Load16SMem0_RS { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load16SMem0_RS { result, ptr, offset })
            }
            Self::I32Load16SMem0_RI { result, address } => {
                encoder.encode(crate::op::I32Load16SMem0_RI { result, address })
            }
            Self::I32Load16SMem0_SR { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load16SMem0_SR { result, ptr, offset })
            }
            Self::I32Load16SMem0_SS { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load16SMem0_SS { result, ptr, offset })
            }
            Self::I32Load16SMem0_SI { result, address } => {
                encoder.encode(crate::op::I32Load16SMem0_SI { result, address })
            }
            Self::I64Load16S_RR { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load16S_RR { result, ptr, offset, memory })
            }
            Self::I64Load16S_RS { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load16S_RS { result, ptr, offset, memory })
            }
            Self::I64Load16S_RI { result, address, memory } => {
                encoder.encode(crate::op::I64Load16S_RI { result, address, memory })
            }
            Self::I64Load16SMem0_RR { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load16SMem0_RR { result, ptr, offset })
            }
            Self::I64Load16SMem0_RS { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load16SMem0_RS { result, ptr, offset })
            }
            Self::I64Load16SMem0_RI { result, address } => {
                encoder.encode(crate::op::I64Load16SMem0_RI { result, address })
            }
            Self::I64Load16SMem0_SR { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load16SMem0_SR { result, ptr, offset })
            }
            Self::I64Load16SMem0_SS { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load16SMem0_SS { result, ptr, offset })
            }
            Self::I64Load16SMem0_SI { result, address } => {
                encoder.encode(crate::op::I64Load16SMem0_SI { result, address })
            }
            Self::I32Load16U_RR { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I32Load16U_RR { result, ptr, offset, memory })
            }
            Self::I32Load16U_RS { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I32Load16U_RS { result, ptr, offset, memory })
            }
            Self::I32Load16U_RI { result, address, memory } => {
                encoder.encode(crate::op::I32Load16U_RI { result, address, memory })
            }
            Self::I32Load16UMem0_RR { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load16UMem0_RR { result, ptr, offset })
            }
            Self::I32Load16UMem0_RS { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load16UMem0_RS { result, ptr, offset })
            }
            Self::I32Load16UMem0_RI { result, address } => {
                encoder.encode(crate::op::I32Load16UMem0_RI { result, address })
            }
            Self::I32Load16UMem0_SR { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load16UMem0_SR { result, ptr, offset })
            }
            Self::I32Load16UMem0_SS { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load16UMem0_SS { result, ptr, offset })
            }
            Self::I32Load16UMem0_SI { result, address } => {
                encoder.encode(crate::op::I32Load16UMem0_SI { result, address })
            }
            Self::I64Load16U_RR { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load16U_RR { result, ptr, offset, memory })
            }
            Self::I64Load16U_RS { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load16U_RS { result, ptr, offset, memory })
            }
            Self::I64Load16U_RI { result, address, memory } => {
                encoder.encode(crate::op::I64Load16U_RI { result, address, memory })
            }
            Self::I64Load16UMem0_RR { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load16UMem0_RR { result, ptr, offset })
            }
            Self::I64Load16UMem0_RS { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load16UMem0_RS { result, ptr, offset })
            }
            Self::I64Load16UMem0_RI { result, address } => {
                encoder.encode(crate::op::I64Load16UMem0_RI { result, address })
            }
            Self::I64Load16UMem0_SR { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load16UMem0_SR { result, ptr, offset })
            }
            Self::I64Load16UMem0_SS { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load16UMem0_SS { result, ptr, offset })
            }
            Self::I64Load16UMem0_SI { result, address } => {
                encoder.encode(crate::op::I64Load16UMem0_SI { result, address })
            }
            Self::I64Load32S_RR { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load32S_RR { result, ptr, offset, memory })
            }
            Self::I64Load32S_RS { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load32S_RS { result, ptr, offset, memory })
            }
            Self::I64Load32S_RI { result, address, memory } => {
                encoder.encode(crate::op::I64Load32S_RI { result, address, memory })
            }
            Self::I64Load32SMem0_RR { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load32SMem0_RR { result, ptr, offset })
            }
            Self::I64Load32SMem0_RS { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load32SMem0_RS { result, ptr, offset })
            }
            Self::I64Load32SMem0_RI { result, address } => {
                encoder.encode(crate::op::I64Load32SMem0_RI { result, address })
            }
            Self::I64Load32SMem0_SR { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load32SMem0_SR { result, ptr, offset })
            }
            Self::I64Load32SMem0_SS { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load32SMem0_SS { result, ptr, offset })
            }
            Self::I64Load32SMem0_SI { result, address } => {
                encoder.encode(crate::op::I64Load32SMem0_SI { result, address })
            }
            Self::I64Load32U_RR { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load32U_RR { result, ptr, offset, memory })
            }
            Self::I64Load32U_RS { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load32U_RS { result, ptr, offset, memory })
            }
            Self::I64Load32U_RI { result, address, memory } => {
                encoder.encode(crate::op::I64Load32U_RI { result, address, memory })
            }
            Self::I64Load32UMem0_RR { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load32UMem0_RR { result, ptr, offset })
            }
            Self::I64Load32UMem0_RS { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load32UMem0_RS { result, ptr, offset })
            }
            Self::I64Load32UMem0_RI { result, address } => {
                encoder.encode(crate::op::I64Load32UMem0_RI { result, address })
            }
            Self::I64Load32UMem0_SR { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load32UMem0_SR { result, ptr, offset })
            }
            Self::I64Load32UMem0_SS { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load32UMem0_SS { result, ptr, offset })
            }
            Self::I64Load32UMem0_SI { result, address } => {
                encoder.encode(crate::op::I64Load32UMem0_SI { result, address })
            }
            Self::I32Store_SS { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I32Store_SS { ptr, value, offset, memory })
            }
            Self::I32Store_SI { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I32Store_SI { ptr, value, offset, memory })
            }
            Self::I32Store_IS { address, value, memory } => {
                encoder.encode(crate::op::I32Store_IS { address, value, memory })
            }
            Self::I32Store_II { address, value, memory } => {
                encoder.encode(crate::op::I32Store_II { address, value, memory })
            }
            Self::I32StoreMem0_RS { ptr, value, offset } => {
                encoder.encode(crate::op::I32StoreMem0_RS { ptr, value, offset })
            }
            Self::I32StoreMem0_RI { ptr, value, offset } => {
                encoder.encode(crate::op::I32StoreMem0_RI { ptr, value, offset })
            }
            Self::I32StoreMem0_SR { ptr, value, offset } => {
                encoder.encode(crate::op::I32StoreMem0_SR { ptr, value, offset })
            }
            Self::I32StoreMem0_SS { ptr, value, offset } => {
                encoder.encode(crate::op::I32StoreMem0_SS { ptr, value, offset })
            }
            Self::I32StoreMem0_SI { ptr, value, offset } => {
                encoder.encode(crate::op::I32StoreMem0_SI { ptr, value, offset })
            }
            Self::I32StoreMem0_IR { address, value } => {
                encoder.encode(crate::op::I32StoreMem0_IR { address, value })
            }
            Self::I32StoreMem0_IS { address, value } => {
                encoder.encode(crate::op::I32StoreMem0_IS { address, value })
            }
            Self::I32StoreMem0_II { address, value } => {
                encoder.encode(crate::op::I32StoreMem0_II { address, value })
            }
            Self::I64Store_SS { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I64Store_SS { ptr, value, offset, memory })
            }
            Self::I64Store_SI { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I64Store_SI { ptr, value, offset, memory })
            }
            Self::I64Store_IS { address, value, memory } => {
                encoder.encode(crate::op::I64Store_IS { address, value, memory })
            }
            Self::I64Store_II { address, value, memory } => {
                encoder.encode(crate::op::I64Store_II { address, value, memory })
            }
            Self::I64StoreMem0_RS { ptr, value, offset } => {
                encoder.encode(crate::op::I64StoreMem0_RS { ptr, value, offset })
            }
            Self::I64StoreMem0_RI { ptr, value, offset } => {
                encoder.encode(crate::op::I64StoreMem0_RI { ptr, value, offset })
            }
            Self::I64StoreMem0_SR { ptr, value, offset } => {
                encoder.encode(crate::op::I64StoreMem0_SR { ptr, value, offset })
            }
            Self::I64StoreMem0_SS { ptr, value, offset } => {
                encoder.encode(crate::op::I64StoreMem0_SS { ptr, value, offset })
            }
            Self::I64StoreMem0_SI { ptr, value, offset } => {
                encoder.encode(crate::op::I64StoreMem0_SI { ptr, value, offset })
            }
            Self::I64StoreMem0_IR { address, value } => {
                encoder.encode(crate::op::I64StoreMem0_IR { address, value })
            }
            Self::I64StoreMem0_IS { address, value } => {
                encoder.encode(crate::op::I64StoreMem0_IS { address, value })
            }
            Self::I64StoreMem0_II { address, value } => {
                encoder.encode(crate::op::I64StoreMem0_II { address, value })
            }
            Self::F32Store_SS { ptr, value, offset, memory } => {
                encoder.encode(crate::op::F32Store_SS { ptr, value, offset, memory })
            }
            Self::F32Store_SI { ptr, value, offset, memory } => {
                encoder.encode(crate::op::F32Store_SI { ptr, value, offset, memory })
            }
            Self::F32Store_IS { address, value, memory } => {
                encoder.encode(crate::op::F32Store_IS { address, value, memory })
            }
            Self::F32Store_II { address, value, memory } => {
                encoder.encode(crate::op::F32Store_II { address, value, memory })
            }
            Self::F32StoreMem0_RR { ptr, value, offset } => {
                encoder.encode(crate::op::F32StoreMem0_RR { ptr, value, offset })
            }
            Self::F32StoreMem0_RS { ptr, value, offset } => {
                encoder.encode(crate::op::F32StoreMem0_RS { ptr, value, offset })
            }
            Self::F32StoreMem0_RI { ptr, value, offset } => {
                encoder.encode(crate::op::F32StoreMem0_RI { ptr, value, offset })
            }
            Self::F32StoreMem0_SR { ptr, value, offset } => {
                encoder.encode(crate::op::F32StoreMem0_SR { ptr, value, offset })
            }
            Self::F32StoreMem0_SS { ptr, value, offset } => {
                encoder.encode(crate::op::F32StoreMem0_SS { ptr, value, offset })
            }
            Self::F32StoreMem0_SI { ptr, value, offset } => {
                encoder.encode(crate::op::F32StoreMem0_SI { ptr, value, offset })
            }
            Self::F32StoreMem0_IR { address, value } => {
                encoder.encode(crate::op::F32StoreMem0_IR { address, value })
            }
            Self::F32StoreMem0_IS { address, value } => {
                encoder.encode(crate::op::F32StoreMem0_IS { address, value })
            }
            Self::F32StoreMem0_II { address, value } => {
                encoder.encode(crate::op::F32StoreMem0_II { address, value })
            }
            Self::F64Store_SS { ptr, value, offset, memory } => {
                encoder.encode(crate::op::F64Store_SS { ptr, value, offset, memory })
            }
            Self::F64Store_SI { ptr, value, offset, memory } => {
                encoder.encode(crate::op::F64Store_SI { ptr, value, offset, memory })
            }
            Self::F64Store_IS { address, value, memory } => {
                encoder.encode(crate::op::F64Store_IS { address, value, memory })
            }
            Self::F64Store_II { address, value, memory } => {
                encoder.encode(crate::op::F64Store_II { address, value, memory })
            }
            Self::F64StoreMem0_RR { ptr, value, offset } => {
                encoder.encode(crate::op::F64StoreMem0_RR { ptr, value, offset })
            }
            Self::F64StoreMem0_RS { ptr, value, offset } => {
                encoder.encode(crate::op::F64StoreMem0_RS { ptr, value, offset })
            }
            Self::F64StoreMem0_RI { ptr, value, offset } => {
                encoder.encode(crate::op::F64StoreMem0_RI { ptr, value, offset })
            }
            Self::F64StoreMem0_SR { ptr, value, offset } => {
                encoder.encode(crate::op::F64StoreMem0_SR { ptr, value, offset })
            }
            Self::F64StoreMem0_SS { ptr, value, offset } => {
                encoder.encode(crate::op::F64StoreMem0_SS { ptr, value, offset })
            }
            Self::F64StoreMem0_SI { ptr, value, offset } => {
                encoder.encode(crate::op::F64StoreMem0_SI { ptr, value, offset })
            }
            Self::F64StoreMem0_IR { address, value } => {
                encoder.encode(crate::op::F64StoreMem0_IR { address, value })
            }
            Self::F64StoreMem0_IS { address, value } => {
                encoder.encode(crate::op::F64StoreMem0_IS { address, value })
            }
            Self::F64StoreMem0_II { address, value } => {
                encoder.encode(crate::op::F64StoreMem0_II { address, value })
            }
            Self::I32Store8_SS { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I32Store8_SS { ptr, value, offset, memory })
            }
            Self::I32Store8_SI { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I32Store8_SI { ptr, value, offset, memory })
            }
            Self::I32Store8_IS { address, value, memory } => {
                encoder.encode(crate::op::I32Store8_IS { address, value, memory })
            }
            Self::I32Store8_II { address, value, memory } => {
                encoder.encode(crate::op::I32Store8_II { address, value, memory })
            }
            Self::I32Store8Mem0_RS { ptr, value, offset } => {
                encoder.encode(crate::op::I32Store8Mem0_RS { ptr, value, offset })
            }
            Self::I32Store8Mem0_RI { ptr, value, offset } => {
                encoder.encode(crate::op::I32Store8Mem0_RI { ptr, value, offset })
            }
            Self::I32Store8Mem0_SR { ptr, value, offset } => {
                encoder.encode(crate::op::I32Store8Mem0_SR { ptr, value, offset })
            }
            Self::I32Store8Mem0_SS { ptr, value, offset } => {
                encoder.encode(crate::op::I32Store8Mem0_SS { ptr, value, offset })
            }
            Self::I32Store8Mem0_SI { ptr, value, offset } => {
                encoder.encode(crate::op::I32Store8Mem0_SI { ptr, value, offset })
            }
            Self::I32Store8Mem0_IR { address, value } => {
                encoder.encode(crate::op::I32Store8Mem0_IR { address, value })
            }
            Self::I32Store8Mem0_IS { address, value } => {
                encoder.encode(crate::op::I32Store8Mem0_IS { address, value })
            }
            Self::I32Store8Mem0_II { address, value } => {
                encoder.encode(crate::op::I32Store8Mem0_II { address, value })
            }
            Self::I64Store8_SS { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I64Store8_SS { ptr, value, offset, memory })
            }
            Self::I64Store8_SI { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I64Store8_SI { ptr, value, offset, memory })
            }
            Self::I64Store8_IS { address, value, memory } => {
                encoder.encode(crate::op::I64Store8_IS { address, value, memory })
            }
            Self::I64Store8_II { address, value, memory } => {
                encoder.encode(crate::op::I64Store8_II { address, value, memory })
            }
            Self::I64Store8Mem0_RS { ptr, value, offset } => {
                encoder.encode(crate::op::I64Store8Mem0_RS { ptr, value, offset })
            }
            Self::I64Store8Mem0_RI { ptr, value, offset } => {
                encoder.encode(crate::op::I64Store8Mem0_RI { ptr, value, offset })
            }
            Self::I64Store8Mem0_SR { ptr, value, offset } => {
                encoder.encode(crate::op::I64Store8Mem0_SR { ptr, value, offset })
            }
            Self::I64Store8Mem0_SS { ptr, value, offset } => {
                encoder.encode(crate::op::I64Store8Mem0_SS { ptr, value, offset })
            }
            Self::I64Store8Mem0_SI { ptr, value, offset } => {
                encoder.encode(crate::op::I64Store8Mem0_SI { ptr, value, offset })
            }
            Self::I64Store8Mem0_IR { address, value } => {
                encoder.encode(crate::op::I64Store8Mem0_IR { address, value })
            }
            Self::I64Store8Mem0_IS { address, value } => {
                encoder.encode(crate::op::I64Store8Mem0_IS { address, value })
            }
            Self::I64Store8Mem0_II { address, value } => {
                encoder.encode(crate::op::I64Store8Mem0_II { address, value })
            }
            Self::I32Store16_SS { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I32Store16_SS { ptr, value, offset, memory })
            }
            Self::I32Store16_SI { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I32Store16_SI { ptr, value, offset, memory })
            }
            Self::I32Store16_IS { address, value, memory } => {
                encoder.encode(crate::op::I32Store16_IS { address, value, memory })
            }
            Self::I32Store16_II { address, value, memory } => {
                encoder.encode(crate::op::I32Store16_II { address, value, memory })
            }
            Self::I32Store16Mem0_RS { ptr, value, offset } => {
                encoder.encode(crate::op::I32Store16Mem0_RS { ptr, value, offset })
            }
            Self::I32Store16Mem0_RI { ptr, value, offset } => {
                encoder.encode(crate::op::I32Store16Mem0_RI { ptr, value, offset })
            }
            Self::I32Store16Mem0_SR { ptr, value, offset } => {
                encoder.encode(crate::op::I32Store16Mem0_SR { ptr, value, offset })
            }
            Self::I32Store16Mem0_SS { ptr, value, offset } => {
                encoder.encode(crate::op::I32Store16Mem0_SS { ptr, value, offset })
            }
            Self::I32Store16Mem0_SI { ptr, value, offset } => {
                encoder.encode(crate::op::I32Store16Mem0_SI { ptr, value, offset })
            }
            Self::I32Store16Mem0_IR { address, value } => {
                encoder.encode(crate::op::I32Store16Mem0_IR { address, value })
            }
            Self::I32Store16Mem0_IS { address, value } => {
                encoder.encode(crate::op::I32Store16Mem0_IS { address, value })
            }
            Self::I32Store16Mem0_II { address, value } => {
                encoder.encode(crate::op::I32Store16Mem0_II { address, value })
            }
            Self::I64Store16_SS { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I64Store16_SS { ptr, value, offset, memory })
            }
            Self::I64Store16_SI { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I64Store16_SI { ptr, value, offset, memory })
            }
            Self::I64Store16_IS { address, value, memory } => {
                encoder.encode(crate::op::I64Store16_IS { address, value, memory })
            }
            Self::I64Store16_II { address, value, memory } => {
                encoder.encode(crate::op::I64Store16_II { address, value, memory })
            }
            Self::I64Store16Mem0_RS { ptr, value, offset } => {
                encoder.encode(crate::op::I64Store16Mem0_RS { ptr, value, offset })
            }
            Self::I64Store16Mem0_RI { ptr, value, offset } => {
                encoder.encode(crate::op::I64Store16Mem0_RI { ptr, value, offset })
            }
            Self::I64Store16Mem0_SR { ptr, value, offset } => {
                encoder.encode(crate::op::I64Store16Mem0_SR { ptr, value, offset })
            }
            Self::I64Store16Mem0_SS { ptr, value, offset } => {
                encoder.encode(crate::op::I64Store16Mem0_SS { ptr, value, offset })
            }
            Self::I64Store16Mem0_SI { ptr, value, offset } => {
                encoder.encode(crate::op::I64Store16Mem0_SI { ptr, value, offset })
            }
            Self::I64Store16Mem0_IR { address, value } => {
                encoder.encode(crate::op::I64Store16Mem0_IR { address, value })
            }
            Self::I64Store16Mem0_IS { address, value } => {
                encoder.encode(crate::op::I64Store16Mem0_IS { address, value })
            }
            Self::I64Store16Mem0_II { address, value } => {
                encoder.encode(crate::op::I64Store16Mem0_II { address, value })
            }
            Self::I64Store32_SS { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I64Store32_SS { ptr, value, offset, memory })
            }
            Self::I64Store32_SI { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I64Store32_SI { ptr, value, offset, memory })
            }
            Self::I64Store32_IS { address, value, memory } => {
                encoder.encode(crate::op::I64Store32_IS { address, value, memory })
            }
            Self::I64Store32_II { address, value, memory } => {
                encoder.encode(crate::op::I64Store32_II { address, value, memory })
            }
            Self::I64Store32Mem0_RS { ptr, value, offset } => {
                encoder.encode(crate::op::I64Store32Mem0_RS { ptr, value, offset })
            }
            Self::I64Store32Mem0_RI { ptr, value, offset } => {
                encoder.encode(crate::op::I64Store32Mem0_RI { ptr, value, offset })
            }
            Self::I64Store32Mem0_SR { ptr, value, offset } => {
                encoder.encode(crate::op::I64Store32Mem0_SR { ptr, value, offset })
            }
            Self::I64Store32Mem0_SS { ptr, value, offset } => {
                encoder.encode(crate::op::I64Store32Mem0_SS { ptr, value, offset })
            }
            Self::I64Store32Mem0_SI { ptr, value, offset } => {
                encoder.encode(crate::op::I64Store32Mem0_SI { ptr, value, offset })
            }
            Self::I64Store32Mem0_IR { address, value } => {
                encoder.encode(crate::op::I64Store32Mem0_IR { address, value })
            }
            Self::I64Store32Mem0_IS { address, value } => {
                encoder.encode(crate::op::I64Store32Mem0_IS { address, value })
            }
            Self::I64Store32Mem0_II { address, value } => {
                encoder.encode(crate::op::I64Store32Mem0_II { address, value })
            }
            Self::Select { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::Select { result, condition, lhs, rhs })
            }
            Self::SelectI32_RSSS { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectI32_RSSS { result, condition, lhs, rhs })
            }
            Self::SelectI32_RSSI { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectI32_RSSI { result, condition, lhs, rhs })
            }
            Self::SelectI32_RSIS { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectI32_RSIS { result, condition, lhs, rhs })
            }
            Self::SelectI32_RSII { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectI32_RSII { result, condition, lhs, rhs })
            }
            Self::SelectI64_RRSS { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectI64_RRSS { result, condition, lhs, rhs })
            }
            Self::SelectI64_RRSI { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectI64_RRSI { result, condition, lhs, rhs })
            }
            Self::SelectI64_RRIS { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectI64_RRIS { result, condition, lhs, rhs })
            }
            Self::SelectI64_RRII { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectI64_RRII { result, condition, lhs, rhs })
            }
            Self::SelectI64_RSRS { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectI64_RSRS { result, condition, lhs, rhs })
            }
            Self::SelectI64_RSRI { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectI64_RSRI { result, condition, lhs, rhs })
            }
            Self::SelectI64_RSSR { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectI64_RSSR { result, condition, lhs, rhs })
            }
            Self::SelectI64_RSSS { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectI64_RSSS { result, condition, lhs, rhs })
            }
            Self::SelectI64_RSSI { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectI64_RSSI { result, condition, lhs, rhs })
            }
            Self::SelectI64_RSIR { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectI64_RSIR { result, condition, lhs, rhs })
            }
            Self::SelectI64_RSIS { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectI64_RSIS { result, condition, lhs, rhs })
            }
            Self::SelectI64_RSII { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectI64_RSII { result, condition, lhs, rhs })
            }
            Self::SelectF32_RRSS { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF32_RRSS { result, condition, lhs, rhs })
            }
            Self::SelectF32_RRSI { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF32_RRSI { result, condition, lhs, rhs })
            }
            Self::SelectF32_RRIS { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF32_RRIS { result, condition, lhs, rhs })
            }
            Self::SelectF32_RRII { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF32_RRII { result, condition, lhs, rhs })
            }
            Self::SelectF32_RSRS { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF32_RSRS { result, condition, lhs, rhs })
            }
            Self::SelectF32_RSRI { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF32_RSRI { result, condition, lhs, rhs })
            }
            Self::SelectF32_RSSR { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF32_RSSR { result, condition, lhs, rhs })
            }
            Self::SelectF32_RSSS { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF32_RSSS { result, condition, lhs, rhs })
            }
            Self::SelectF32_RSSI { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF32_RSSI { result, condition, lhs, rhs })
            }
            Self::SelectF32_RSIR { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF32_RSIR { result, condition, lhs, rhs })
            }
            Self::SelectF32_RSIS { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF32_RSIS { result, condition, lhs, rhs })
            }
            Self::SelectF32_RSII { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF32_RSII { result, condition, lhs, rhs })
            }
            Self::SelectF64_RRSS { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF64_RRSS { result, condition, lhs, rhs })
            }
            Self::SelectF64_RRSI { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF64_RRSI { result, condition, lhs, rhs })
            }
            Self::SelectF64_RRIS { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF64_RRIS { result, condition, lhs, rhs })
            }
            Self::SelectF64_RRII { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF64_RRII { result, condition, lhs, rhs })
            }
            Self::SelectF64_RSRS { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF64_RSRS { result, condition, lhs, rhs })
            }
            Self::SelectF64_RSRI { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF64_RSRI { result, condition, lhs, rhs })
            }
            Self::SelectF64_RSSR { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF64_RSSR { result, condition, lhs, rhs })
            }
            Self::SelectF64_RSSS { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF64_RSSS { result, condition, lhs, rhs })
            }
            Self::SelectF64_RSSI { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF64_RSSI { result, condition, lhs, rhs })
            }
            Self::SelectF64_RSIR { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF64_RSIR { result, condition, lhs, rhs })
            }
            Self::SelectF64_RSIS { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF64_RSIS { result, condition, lhs, rhs })
            }
            Self::SelectF64_RSII { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF64_RSII { result, condition, lhs, rhs })
            }
            Self::TableSize_R { result, table } => {
                encoder.encode(crate::op::TableSize_R { result, table })
            }
            Self::TableSize_S { result, table } => {
                encoder.encode(crate::op::TableSize_S { result, table })
            }
            Self::TableGet_RR { result, index, table } => {
                encoder.encode(crate::op::TableGet_RR { result, index, table })
            }
            Self::TableGet_RS { result, index, table } => {
                encoder.encode(crate::op::TableGet_RS { result, index, table })
            }
            Self::TableGet_RI { result, index, table } => {
                encoder.encode(crate::op::TableGet_RI { result, index, table })
            }
            Self::TableSet_RS { index, value, table } => {
                encoder.encode(crate::op::TableSet_RS { index, value, table })
            }
            Self::TableSet_RI { index, value, table } => {
                encoder.encode(crate::op::TableSet_RI { index, value, table })
            }
            Self::TableSet_SR { index, value, table } => {
                encoder.encode(crate::op::TableSet_SR { index, value, table })
            }
            Self::TableSet_SS { index, value, table } => {
                encoder.encode(crate::op::TableSet_SS { index, value, table })
            }
            Self::TableSet_SI { index, value, table } => {
                encoder.encode(crate::op::TableSet_SI { index, value, table })
            }
            Self::TableSet_IR { index, value, table } => {
                encoder.encode(crate::op::TableSet_IR { index, value, table })
            }
            Self::TableSet_IS { index, value, table } => {
                encoder.encode(crate::op::TableSet_IS { index, value, table })
            }
            Self::TableSet_II { index, value, table } => {
                encoder.encode(crate::op::TableSet_II { index, value, table })
            }
            Self::TableGrow { result, delta, table } => {
                encoder.encode(crate::op::TableGrow { result, delta, table })
            }
            Self::TableCopy { dst_index, src_index, len, dst_table, src_table } => {
                encoder.encode(crate::op::TableCopy { dst_index, src_index, len, dst_table, src_table })
            }
            Self::TableFill { dst_index, value, len, table } => {
                encoder.encode(crate::op::TableFill { dst_index, value, len, table })
            }
            Self::TableInit { dst_index, src_index, len, table, elem } => {
                encoder.encode(crate::op::TableInit { dst_index, src_index, len, table, elem })
            }
            Self::MemorySize_R { result, memory } => {
                encoder.encode(crate::op::MemorySize_R { result, memory })
            }
            Self::MemorySize_S { result, memory } => {
                encoder.encode(crate::op::MemorySize_S { result, memory })
            }
            Self::MemoryGrow { result, delta, memory } => {
                encoder.encode(crate::op::MemoryGrow { result, delta, memory })
            }
            Self::MemoryCopy { dst_index, src_index, len, dst_memory, src_memory } => {
                encoder.encode(crate::op::MemoryCopy { dst_index, src_index, len, dst_memory, src_memory })
            }
            Self::MemoryFill { dst_index, value, len, memory } => {
                encoder.encode(crate::op::MemoryFill { dst_index, value, len, memory })
            }
            Self::MemoryInit { dst_index, src_index, len, memory, data } => {
                encoder.encode(crate::op::MemoryInit { dst_index, src_index, len, memory, data })
            }
            Self::CallInternal { func, len_params, len_results } => {
                encoder.encode(crate::op::CallInternal { func, len_params, len_results })
            }
            Self::ReturnCallInternal { func, len_params, len_results } => {
                encoder.encode(crate::op::ReturnCallInternal { func, len_params, len_results })
            }
            Self::CallImported { func, len_params, len_results } => {
                encoder.encode(crate::op::CallImported { func, len_params, len_results })
            }
            Self::ReturnCallImported { func, len_params, len_results } => {
                encoder.encode(crate::op::ReturnCallImported { func, len_params, len_results })
            }
            Self::CallIndirect_R { table, index, len_params, len_results } => {
                encoder.encode(crate::op::CallIndirect_R { table, index, len_params, len_results })
            }
            Self::CallIndirect_S { table, index, len_params, len_results } => {
                encoder.encode(crate::op::CallIndirect_S { table, index, len_params, len_results })
            }
            Self::CallIndirect_I { table, index, len_params, len_results } => {
                encoder.encode(crate::op::CallIndirect_I { table, index, len_params, len_results })
            }
            Self::ReturnCallIndirect_R { table, index, len_params, len_results } => {
                encoder.encode(crate::op::ReturnCallIndirect_R { table, index, len_params, len_results })
            }
            Self::ReturnCallIndirect_S { table, index, len_params, len_results } => {
                encoder.encode(crate::op::ReturnCallIndirect_S { table, index, len_params, len_results })
            }
            Self::ReturnCallIndirect_I { table, index, len_params, len_results } => {
                encoder.encode(crate::op::ReturnCallIndirect_I { table, index, len_params, len_results })
            }
        }
    }
}
