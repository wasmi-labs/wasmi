// This file is automatically generated by the `build.rs` script.
//
// Do _not_ edit this file directly but change `build.rs` script logic instead.

#[repr(u16)]
pub enum Op {
    Copy1_S {
        result: crate::Stack,
        value: crate::Stack,
    } = 0,
    Copy {
        result: crate::Stack,
        len_values: ::core::primitive::usize,
    } = 1,
    Copy1I32_I {
        result: crate::Stack,
        value: ::core::primitive::i32,
    } = 2,
    Copy1I64_R {
        result: crate::Stack,
        value: crate::Reg,
    } = 3,
    Copy1I64_I {
        result: crate::Stack,
        value: ::core::primitive::i64,
    } = 4,
    Copy1F32_R {
        result: crate::Stack,
        value: crate::Reg,
    } = 5,
    Copy1F32_I {
        result: crate::Stack,
        value: ::core::primitive::f32,
    } = 6,
    Copy1F64_R {
        result: crate::Stack,
        value: crate::Reg,
    } = 7,
    Copy1F64_I {
        result: crate::Stack,
        value: ::core::primitive::f64,
    } = 8,
    Return0 = 9,
    Return1_S {
        value: crate::Stack,
    } = 10,
    Return {
        len_values: ::core::primitive::usize,
    } = 11,
    Return1I32_R {
        value: crate::Reg,
    } = 12,
    Return1I64_R {
        value: crate::Reg,
    } = 13,
    Return1F32_R {
        value: crate::Reg,
    } = 14,
    Return1F64_R {
        value: crate::Reg,
    } = 15,
    Return1I32_I {
        value: ::core::primitive::i32,
    } = 16,
    Return1I64_I {
        value: ::core::primitive::i64,
    } = 17,
    Return1F32_I {
        value: ::core::primitive::f32,
    } = 18,
    Return1F64_I {
        value: ::core::primitive::f64,
    } = 19,
    GlobalGet_S {
        result: crate::Stack,
        global: crate::Global,
    } = 20,
    GlobalGetI32_R {
        result: crate::Reg,
        global: crate::Global,
    } = 21,
    GlobalGetI64_R {
        result: crate::Reg,
        global: crate::Global,
    } = 22,
    GlobalGetF32_R {
        result: crate::Reg,
        global: crate::Global,
    } = 23,
    GlobalGetF64_R {
        result: crate::Reg,
        global: crate::Global,
    } = 24,
    GlobalSet_S {
        global: crate::Global,
        value: crate::Stack,
    } = 25,
    GlobalSetI32_R {
        global: crate::Global,
        value: crate::Reg,
    } = 26,
    GlobalSetI64_R {
        global: crate::Global,
        value: crate::Reg,
    } = 27,
    GlobalSetF32_R {
        global: crate::Global,
        value: crate::Reg,
    } = 28,
    GlobalSetF64_R {
        global: crate::Global,
        value: crate::Reg,
    } = 29,
    GlobalSetI32_I {
        global: crate::Global,
        value: ::core::primitive::i32,
    } = 30,
    GlobalSetI64_I {
        global: crate::Global,
        value: ::core::primitive::i64,
    } = 31,
    GlobalSetF32_I {
        global: crate::Global,
        value: ::core::primitive::f32,
    } = 32,
    GlobalSetF64_I {
        global: crate::Global,
        value: ::core::primitive::f64,
    } = 33,
    BranchTable0_R {
        index: crate::Reg,
        len_targets: ::core::primitive::u32,
    } = 34,
    BranchTable_R {
        index: crate::Reg,
        len_targets: ::core::primitive::u32,
    } = 35,
    BranchTable0_S {
        index: crate::Stack,
        len_targets: ::core::primitive::u32,
    } = 36,
    BranchTable_S {
        index: crate::Stack,
        len_targets: ::core::primitive::u32,
    } = 37,
    I32EqBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 38,
    I32EqBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
        offset: crate::BranchOffset,
    } = 39,
    I32EqBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 40,
    I32EqBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
        offset: crate::BranchOffset,
    } = 41,
    I64EqBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 42,
    I64EqBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
        offset: crate::BranchOffset,
    } = 43,
    I64EqBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 44,
    I64EqBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
        offset: crate::BranchOffset,
    } = 45,
    F32EqBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 46,
    F32EqBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
        offset: crate::BranchOffset,
    } = 47,
    F32EqBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 48,
    F32EqBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
        offset: crate::BranchOffset,
    } = 49,
    F64EqBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 50,
    F64EqBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
        offset: crate::BranchOffset,
    } = 51,
    F64EqBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 52,
    F64EqBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
        offset: crate::BranchOffset,
    } = 53,
    I32NeBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 54,
    I32NeBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
        offset: crate::BranchOffset,
    } = 55,
    I32NeBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 56,
    I32NeBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
        offset: crate::BranchOffset,
    } = 57,
    I64NeBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 58,
    I64NeBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
        offset: crate::BranchOffset,
    } = 59,
    I64NeBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 60,
    I64NeBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
        offset: crate::BranchOffset,
    } = 61,
    F32NeBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 62,
    F32NeBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
        offset: crate::BranchOffset,
    } = 63,
    F32NeBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 64,
    F32NeBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
        offset: crate::BranchOffset,
    } = 65,
    F64NeBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 66,
    F64NeBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
        offset: crate::BranchOffset,
    } = 67,
    F64NeBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 68,
    F64NeBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
        offset: crate::BranchOffset,
    } = 69,
    I32LtSBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 70,
    I32LtSBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
        offset: crate::BranchOffset,
    } = 71,
    I32LtSBranch_SR {
        lhs: crate::Stack,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 72,
    I32LtSBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 73,
    I32LtSBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
        offset: crate::BranchOffset,
    } = 74,
    I32LtSBranch_IR {
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 75,
    I32LtSBranch_IS {
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 76,
    I64LtSBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 77,
    I64LtSBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
        offset: crate::BranchOffset,
    } = 78,
    I64LtSBranch_SR {
        lhs: crate::Stack,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 79,
    I64LtSBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 80,
    I64LtSBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
        offset: crate::BranchOffset,
    } = 81,
    I64LtSBranch_IR {
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 82,
    I64LtSBranch_IS {
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 83,
    I32LtUBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 84,
    I32LtUBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
        offset: crate::BranchOffset,
    } = 85,
    I32LtUBranch_SR {
        lhs: crate::Stack,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 86,
    I32LtUBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 87,
    I32LtUBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
        offset: crate::BranchOffset,
    } = 88,
    I32LtUBranch_IR {
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 89,
    I32LtUBranch_IS {
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 90,
    I64LtUBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 91,
    I64LtUBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
        offset: crate::BranchOffset,
    } = 92,
    I64LtUBranch_SR {
        lhs: crate::Stack,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 93,
    I64LtUBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 94,
    I64LtUBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
        offset: crate::BranchOffset,
    } = 95,
    I64LtUBranch_IR {
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 96,
    I64LtUBranch_IS {
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 97,
    I32LeSBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 98,
    I32LeSBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
        offset: crate::BranchOffset,
    } = 99,
    I32LeSBranch_SR {
        lhs: crate::Stack,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 100,
    I32LeSBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 101,
    I32LeSBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
        offset: crate::BranchOffset,
    } = 102,
    I32LeSBranch_IR {
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 103,
    I32LeSBranch_IS {
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 104,
    I64LeSBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 105,
    I64LeSBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
        offset: crate::BranchOffset,
    } = 106,
    I64LeSBranch_SR {
        lhs: crate::Stack,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 107,
    I64LeSBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 108,
    I64LeSBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
        offset: crate::BranchOffset,
    } = 109,
    I64LeSBranch_IR {
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 110,
    I64LeSBranch_IS {
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 111,
    I32LeUBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 112,
    I32LeUBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
        offset: crate::BranchOffset,
    } = 113,
    I32LeUBranch_SR {
        lhs: crate::Stack,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 114,
    I32LeUBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 115,
    I32LeUBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
        offset: crate::BranchOffset,
    } = 116,
    I32LeUBranch_IR {
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 117,
    I32LeUBranch_IS {
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 118,
    I64LeUBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 119,
    I64LeUBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
        offset: crate::BranchOffset,
    } = 120,
    I64LeUBranch_SR {
        lhs: crate::Stack,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 121,
    I64LeUBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 122,
    I64LeUBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
        offset: crate::BranchOffset,
    } = 123,
    I64LeUBranch_IR {
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 124,
    I64LeUBranch_IS {
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 125,
    F32LtBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 126,
    F32LtBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
        offset: crate::BranchOffset,
    } = 127,
    F32LtBranch_SR {
        lhs: crate::Stack,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 128,
    F32LtBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 129,
    F32LtBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
        offset: crate::BranchOffset,
    } = 130,
    F32LtBranch_IR {
        lhs: ::core::primitive::f32,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 131,
    F32LtBranch_IS {
        lhs: ::core::primitive::f32,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 132,
    F64LtBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 133,
    F64LtBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
        offset: crate::BranchOffset,
    } = 134,
    F64LtBranch_SR {
        lhs: crate::Stack,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 135,
    F64LtBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 136,
    F64LtBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
        offset: crate::BranchOffset,
    } = 137,
    F64LtBranch_IR {
        lhs: ::core::primitive::f64,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 138,
    F64LtBranch_IS {
        lhs: ::core::primitive::f64,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 139,
    F32LeBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 140,
    F32LeBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
        offset: crate::BranchOffset,
    } = 141,
    F32LeBranch_SR {
        lhs: crate::Stack,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 142,
    F32LeBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 143,
    F32LeBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
        offset: crate::BranchOffset,
    } = 144,
    F32LeBranch_IR {
        lhs: ::core::primitive::f32,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 145,
    F32LeBranch_IS {
        lhs: ::core::primitive::f32,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 146,
    F64LeBranch_RS {
        lhs: crate::Reg,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 147,
    F64LeBranch_RI {
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
        offset: crate::BranchOffset,
    } = 148,
    F64LeBranch_SR {
        lhs: crate::Stack,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 149,
    F64LeBranch_SS {
        lhs: crate::Stack,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 150,
    F64LeBranch_SI {
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
        offset: crate::BranchOffset,
    } = 151,
    F64LeBranch_IR {
        lhs: ::core::primitive::f64,
        rhs: crate::Reg,
        offset: crate::BranchOffset,
    } = 152,
    F64LeBranch_IS {
        lhs: ::core::primitive::f64,
        rhs: crate::Stack,
        offset: crate::BranchOffset,
    } = 153,
    I32Popcnt_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 154,
    I32Popcnt_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 155,
    I32Popcnt_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 156,
    I32Popcnt_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 157,
    I64Popcnt_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 158,
    I64Popcnt_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 159,
    I64Popcnt_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 160,
    I64Popcnt_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 161,
    I32Clz_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 162,
    I32Clz_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 163,
    I32Clz_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 164,
    I32Clz_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 165,
    I64Clz_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 166,
    I64Clz_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 167,
    I64Clz_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 168,
    I64Clz_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 169,
    I32Ctz_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 170,
    I32Ctz_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 171,
    I32Ctz_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 172,
    I32Ctz_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 173,
    I64Ctz_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 174,
    I64Ctz_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 175,
    I64Ctz_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 176,
    I64Ctz_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 177,
    F32Abs_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 178,
    F32Abs_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 179,
    F32Abs_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 180,
    F32Abs_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 181,
    F64Abs_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 182,
    F64Abs_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 183,
    F64Abs_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 184,
    F64Abs_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 185,
    F32Neg_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 186,
    F32Neg_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 187,
    F32Neg_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 188,
    F32Neg_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 189,
    F64Neg_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 190,
    F64Neg_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 191,
    F64Neg_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 192,
    F64Neg_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 193,
    F32Ceil_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 194,
    F32Ceil_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 195,
    F32Ceil_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 196,
    F32Ceil_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 197,
    F64Ceil_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 198,
    F64Ceil_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 199,
    F64Ceil_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 200,
    F64Ceil_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 201,
    F32Floor_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 202,
    F32Floor_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 203,
    F32Floor_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 204,
    F32Floor_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 205,
    F64Floor_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 206,
    F64Floor_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 207,
    F64Floor_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 208,
    F64Floor_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 209,
    F32Trunc_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 210,
    F32Trunc_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 211,
    F32Trunc_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 212,
    F32Trunc_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 213,
    F64Trunc_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 214,
    F64Trunc_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 215,
    F64Trunc_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 216,
    F64Trunc_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 217,
    F32Nearest_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 218,
    F32Nearest_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 219,
    F32Nearest_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 220,
    F32Nearest_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 221,
    F64Nearest_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 222,
    F64Nearest_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 223,
    F64Nearest_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 224,
    F64Nearest_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 225,
    F32Sqrt_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 226,
    F32Sqrt_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 227,
    F32Sqrt_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 228,
    F32Sqrt_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 229,
    F64Sqrt_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 230,
    F64Sqrt_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 231,
    F64Sqrt_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 232,
    F64Sqrt_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 233,
    F32Demote_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 234,
    F32Demote_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 235,
    F32Demote_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 236,
    F32Demote_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 237,
    F64Promote_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 238,
    F64Promote_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 239,
    F64Promote_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 240,
    F64Promote_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 241,
    F32ConvertI32S_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 242,
    F32ConvertI32S_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 243,
    F32ConvertI32S_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 244,
    F32ConvertI32S_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 245,
    F32ConvertI32U_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 246,
    F32ConvertI32U_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 247,
    F32ConvertI32U_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 248,
    F32ConvertI32U_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 249,
    F32ConvertI64S_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 250,
    F32ConvertI64S_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 251,
    F32ConvertI64S_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 252,
    F32ConvertI64S_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 253,
    F32ConvertI64U_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 254,
    F32ConvertI64U_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 255,
    F32ConvertI64U_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 256,
    F32ConvertI64U_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 257,
    F64ConvertI32S_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 258,
    F64ConvertI32S_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 259,
    F64ConvertI32S_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 260,
    F64ConvertI32S_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 261,
    F64ConvertI32U_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 262,
    F64ConvertI32U_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 263,
    F64ConvertI32U_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 264,
    F64ConvertI32U_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 265,
    F64ConvertI64S_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 266,
    F64ConvertI64S_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 267,
    F64ConvertI64S_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 268,
    F64ConvertI64S_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 269,
    F64ConvertI64U_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 270,
    F64ConvertI64U_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 271,
    F64ConvertI64U_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 272,
    F64ConvertI64U_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 273,
    I32TruncF32S_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 274,
    I32TruncF32S_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 275,
    I32TruncF32S_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 276,
    I32TruncF32S_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 277,
    I32TruncF32U_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 278,
    I32TruncF32U_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 279,
    I32TruncF32U_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 280,
    I32TruncF32U_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 281,
    I32TruncF64S_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 282,
    I32TruncF64S_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 283,
    I32TruncF64S_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 284,
    I32TruncF64S_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 285,
    I32TruncF64U_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 286,
    I32TruncF64U_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 287,
    I32TruncF64U_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 288,
    I32TruncF64U_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 289,
    I64TruncF32S_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 290,
    I64TruncF32S_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 291,
    I64TruncF32S_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 292,
    I64TruncF32S_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 293,
    I64TruncF32U_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 294,
    I64TruncF32U_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 295,
    I64TruncF32U_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 296,
    I64TruncF32U_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 297,
    I64TruncF64S_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 298,
    I64TruncF64S_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 299,
    I64TruncF64S_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 300,
    I64TruncF64S_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 301,
    I64TruncF64U_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 302,
    I64TruncF64U_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 303,
    I64TruncF64U_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 304,
    I64TruncF64U_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 305,
    I32TruncSatF32S_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 306,
    I32TruncSatF32S_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 307,
    I32TruncSatF32S_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 308,
    I32TruncSatF32S_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 309,
    I32TruncSatF32U_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 310,
    I32TruncSatF32U_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 311,
    I32TruncSatF32U_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 312,
    I32TruncSatF32U_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 313,
    I32TruncSatF64S_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 314,
    I32TruncSatF64S_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 315,
    I32TruncSatF64S_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 316,
    I32TruncSatF64S_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 317,
    I32TruncSatF64U_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 318,
    I32TruncSatF64U_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 319,
    I32TruncSatF64U_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 320,
    I32TruncSatF64U_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 321,
    I64TruncSatF32S_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 322,
    I64TruncSatF32S_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 323,
    I64TruncSatF32S_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 324,
    I64TruncSatF32S_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 325,
    I64TruncSatF32U_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 326,
    I64TruncSatF32U_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 327,
    I64TruncSatF32U_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 328,
    I64TruncSatF32U_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 329,
    I64TruncSatF64S_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 330,
    I64TruncSatF64S_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 331,
    I64TruncSatF64S_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 332,
    I64TruncSatF64S_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 333,
    I64TruncSatF64U_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 334,
    I64TruncSatF64U_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 335,
    I64TruncSatF64U_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 336,
    I64TruncSatF64U_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 337,
    I32Extend8S_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 338,
    I32Extend8S_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 339,
    I32Extend8S_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 340,
    I32Extend8S_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 341,
    I32Extend16S_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 342,
    I32Extend16S_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 343,
    I32Extend16S_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 344,
    I32Extend16S_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 345,
    I64Extend8S_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 346,
    I64Extend8S_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 347,
    I64Extend8S_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 348,
    I64Extend8S_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 349,
    I64Extend16S_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 350,
    I64Extend16S_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 351,
    I64Extend16S_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 352,
    I64Extend16S_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 353,
    I64Extend32S_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 354,
    I64Extend32S_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 355,
    I64Extend32S_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 356,
    I64Extend32S_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 357,
    I32WrapI64_RR {
        result: crate::Reg,
        input: crate::Reg,
    } = 358,
    I32WrapI64_RS {
        result: crate::Reg,
        input: crate::Stack,
    } = 359,
    I32WrapI64_SR {
        result: crate::Stack,
        input: crate::Reg,
    } = 360,
    I32WrapI64_SS {
        result: crate::Stack,
        input: crate::Stack,
    } = 361,
    I32Add_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 362,
    I32Add_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 363,
    I32Add_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 364,
    I32Add_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 365,
    I32Add_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 366,
    I32Add_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 367,
    I32Add_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 368,
    I32Add_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 369,
    I64Add_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 370,
    I64Add_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 371,
    I64Add_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 372,
    I64Add_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 373,
    I64Add_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 374,
    I64Add_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 375,
    I64Add_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 376,
    I64Add_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 377,
    I32Mul_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 378,
    I32Mul_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 379,
    I32Mul_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 380,
    I32Mul_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 381,
    I32Mul_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 382,
    I32Mul_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 383,
    I32Mul_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 384,
    I32Mul_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 385,
    I64Mul_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 386,
    I64Mul_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 387,
    I64Mul_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 388,
    I64Mul_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 389,
    I64Mul_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 390,
    I64Mul_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 391,
    I64Mul_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 392,
    I64Mul_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 393,
    I32And_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 394,
    I32And_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 395,
    I32And_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 396,
    I32And_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 397,
    I32And_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 398,
    I32And_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 399,
    I32And_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 400,
    I32And_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 401,
    I64And_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 402,
    I64And_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 403,
    I64And_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 404,
    I64And_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 405,
    I64And_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 406,
    I64And_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 407,
    I64And_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 408,
    I64And_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 409,
    I32Or_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 410,
    I32Or_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 411,
    I32Or_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 412,
    I32Or_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 413,
    I32Or_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 414,
    I32Or_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 415,
    I32Or_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 416,
    I32Or_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 417,
    I64Or_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 418,
    I64Or_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 419,
    I64Or_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 420,
    I64Or_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 421,
    I64Or_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 422,
    I64Or_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 423,
    I64Or_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 424,
    I64Or_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 425,
    I32Xor_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 426,
    I32Xor_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 427,
    I32Xor_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 428,
    I32Xor_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 429,
    I32Xor_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 430,
    I32Xor_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 431,
    I32Xor_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 432,
    I32Xor_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 433,
    I64Xor_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 434,
    I64Xor_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 435,
    I64Xor_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 436,
    I64Xor_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 437,
    I64Xor_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 438,
    I64Xor_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 439,
    I64Xor_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 440,
    I64Xor_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 441,
    I32Eq_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 442,
    I32Eq_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 443,
    I32Eq_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 444,
    I32Eq_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 445,
    I32Eq_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 446,
    I32Eq_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 447,
    I32Eq_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 448,
    I32Eq_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 449,
    I64Eq_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 450,
    I64Eq_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 451,
    I64Eq_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 452,
    I64Eq_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 453,
    I64Eq_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 454,
    I64Eq_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 455,
    I64Eq_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 456,
    I64Eq_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 457,
    I32Ne_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 458,
    I32Ne_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 459,
    I32Ne_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 460,
    I32Ne_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 461,
    I32Ne_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 462,
    I32Ne_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 463,
    I32Ne_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 464,
    I32Ne_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 465,
    I64Ne_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 466,
    I64Ne_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 467,
    I64Ne_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 468,
    I64Ne_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 469,
    I64Ne_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 470,
    I64Ne_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 471,
    I64Ne_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 472,
    I64Ne_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 473,
    F32Add_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 474,
    F32Add_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
    } = 475,
    F32Add_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 476,
    F32Add_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
    } = 477,
    F32Add_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 478,
    F32Add_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
    } = 479,
    F32Add_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 480,
    F32Add_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
    } = 481,
    F64Add_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 482,
    F64Add_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
    } = 483,
    F64Add_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 484,
    F64Add_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
    } = 485,
    F64Add_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 486,
    F64Add_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
    } = 487,
    F64Add_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 488,
    F64Add_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
    } = 489,
    F32Mul_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 490,
    F32Mul_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
    } = 491,
    F32Mul_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 492,
    F32Mul_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
    } = 493,
    F32Mul_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 494,
    F32Mul_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
    } = 495,
    F32Mul_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 496,
    F32Mul_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
    } = 497,
    F64Mul_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 498,
    F64Mul_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
    } = 499,
    F64Mul_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 500,
    F64Mul_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
    } = 501,
    F64Mul_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 502,
    F64Mul_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
    } = 503,
    F64Mul_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 504,
    F64Mul_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
    } = 505,
    F32Eq_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 506,
    F32Eq_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
    } = 507,
    F32Eq_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 508,
    F32Eq_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
    } = 509,
    F32Eq_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 510,
    F32Eq_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
    } = 511,
    F32Eq_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 512,
    F32Eq_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
    } = 513,
    F64Eq_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 514,
    F64Eq_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
    } = 515,
    F64Eq_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 516,
    F64Eq_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
    } = 517,
    F64Eq_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 518,
    F64Eq_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
    } = 519,
    F64Eq_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 520,
    F64Eq_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
    } = 521,
    F32Ne_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 522,
    F32Ne_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
    } = 523,
    F32Ne_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 524,
    F32Ne_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
    } = 525,
    F32Ne_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 526,
    F32Ne_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
    } = 527,
    F32Ne_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 528,
    F32Ne_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
    } = 529,
    F64Ne_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 530,
    F64Ne_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
    } = 531,
    F64Ne_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 532,
    F64Ne_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
    } = 533,
    F64Ne_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 534,
    F64Ne_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
    } = 535,
    F64Ne_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 536,
    F64Ne_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
    } = 537,
    F32Min_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 538,
    F32Min_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
    } = 539,
    F32Min_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 540,
    F32Min_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
    } = 541,
    F32Min_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 542,
    F32Min_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
    } = 543,
    F32Min_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 544,
    F32Min_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
    } = 545,
    F64Min_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 546,
    F64Min_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
    } = 547,
    F64Min_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 548,
    F64Min_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
    } = 549,
    F64Min_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 550,
    F64Min_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
    } = 551,
    F64Min_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 552,
    F64Min_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
    } = 553,
    F32Max_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 554,
    F32Max_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
    } = 555,
    F32Max_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 556,
    F32Max_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
    } = 557,
    F32Max_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 558,
    F32Max_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
    } = 559,
    F32Max_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 560,
    F32Max_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
    } = 561,
    F64Max_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 562,
    F64Max_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
    } = 563,
    F64Max_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 564,
    F64Max_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
    } = 565,
    F64Max_SRS {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 566,
    F64Max_SRI {
        result: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
    } = 567,
    F64Max_SSS {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 568,
    F64Max_SSI {
        result: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
    } = 569,
    I32Sub_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 570,
    I32Sub_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 571,
    I32Sub_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 572,
    I32Sub_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 573,
    I32Sub_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 574,
    I32Sub_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
    } = 575,
    I32Sub_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
    } = 576,
    I64Sub_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 577,
    I64Sub_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 578,
    I64Sub_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 579,
    I64Sub_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 580,
    I64Sub_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 581,
    I64Sub_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
    } = 582,
    I64Sub_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
    } = 583,
    I32LtS_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 584,
    I32LtS_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 585,
    I32LtS_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 586,
    I32LtS_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 587,
    I32LtS_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 588,
    I32LtS_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
    } = 589,
    I32LtS_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
    } = 590,
    I64LtS_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 591,
    I64LtS_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 592,
    I64LtS_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 593,
    I64LtS_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 594,
    I64LtS_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 595,
    I64LtS_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
    } = 596,
    I64LtS_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
    } = 597,
    I32LtU_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 598,
    I32LtU_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 599,
    I32LtU_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 600,
    I32LtU_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 601,
    I32LtU_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 602,
    I32LtU_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
    } = 603,
    I32LtU_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
    } = 604,
    I64LtU_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 605,
    I64LtU_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 606,
    I64LtU_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 607,
    I64LtU_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 608,
    I64LtU_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 609,
    I64LtU_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
    } = 610,
    I64LtU_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
    } = 611,
    I32LeS_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 612,
    I32LeS_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 613,
    I32LeS_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 614,
    I32LeS_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 615,
    I32LeS_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 616,
    I32LeS_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
    } = 617,
    I32LeS_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
    } = 618,
    I64LeS_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 619,
    I64LeS_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 620,
    I64LeS_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 621,
    I64LeS_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 622,
    I64LeS_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 623,
    I64LeS_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
    } = 624,
    I64LeS_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
    } = 625,
    I32LeU_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 626,
    I32LeU_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 627,
    I32LeU_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 628,
    I32LeU_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 629,
    I32LeU_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 630,
    I32LeU_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
    } = 631,
    I32LeU_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
    } = 632,
    I64LeU_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 633,
    I64LeU_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 634,
    I64LeU_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 635,
    I64LeU_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 636,
    I64LeU_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 637,
    I64LeU_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
    } = 638,
    I64LeU_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
    } = 639,
    I32DivS_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 640,
    I32DivS_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 641,
    I32DivS_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 642,
    I32DivS_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 643,
    I32DivS_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 644,
    I32DivS_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
    } = 645,
    I32DivS_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
    } = 646,
    I64DivS_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 647,
    I64DivS_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 648,
    I64DivS_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 649,
    I64DivS_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 650,
    I64DivS_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 651,
    I64DivS_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
    } = 652,
    I64DivS_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
    } = 653,
    I32DivU_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 654,
    I32DivU_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 655,
    I32DivU_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 656,
    I32DivU_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 657,
    I32DivU_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 658,
    I32DivU_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
    } = 659,
    I32DivU_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
    } = 660,
    I64DivU_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 661,
    I64DivU_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 662,
    I64DivU_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 663,
    I64DivU_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 664,
    I64DivU_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 665,
    I64DivU_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
    } = 666,
    I64DivU_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
    } = 667,
    I32RemS_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 668,
    I32RemS_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 669,
    I32RemS_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 670,
    I32RemS_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 671,
    I32RemS_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 672,
    I32RemS_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
    } = 673,
    I32RemS_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
    } = 674,
    I64RemS_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 675,
    I64RemS_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 676,
    I64RemS_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 677,
    I64RemS_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 678,
    I64RemS_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 679,
    I64RemS_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
    } = 680,
    I64RemS_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
    } = 681,
    I32RemU_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 682,
    I32RemU_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 683,
    I32RemU_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 684,
    I32RemU_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 685,
    I32RemU_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 686,
    I32RemU_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
    } = 687,
    I32RemU_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
    } = 688,
    I64RemU_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 689,
    I64RemU_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 690,
    I64RemU_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 691,
    I64RemU_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 692,
    I64RemU_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 693,
    I64RemU_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
    } = 694,
    I64RemU_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
    } = 695,
    I32Shl_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 696,
    I32Shl_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 697,
    I32Shl_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 698,
    I32Shl_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 699,
    I32Shl_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 700,
    I32Shl_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
    } = 701,
    I32Shl_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
    } = 702,
    I64Shl_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 703,
    I64Shl_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 704,
    I64Shl_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 705,
    I64Shl_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 706,
    I64Shl_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 707,
    I64Shl_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
    } = 708,
    I64Shl_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
    } = 709,
    I32ShrS_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 710,
    I32ShrS_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 711,
    I32ShrS_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 712,
    I32ShrS_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 713,
    I32ShrS_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 714,
    I32ShrS_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
    } = 715,
    I32ShrS_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
    } = 716,
    I64ShrS_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 717,
    I64ShrS_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 718,
    I64ShrS_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 719,
    I64ShrS_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 720,
    I64ShrS_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 721,
    I64ShrS_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
    } = 722,
    I64ShrS_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
    } = 723,
    I32ShrU_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 724,
    I32ShrU_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 725,
    I32ShrU_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 726,
    I32ShrU_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 727,
    I32ShrU_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 728,
    I32ShrU_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
    } = 729,
    I32ShrU_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
    } = 730,
    I64ShrU_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 731,
    I64ShrU_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 732,
    I64ShrU_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 733,
    I64ShrU_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 734,
    I64ShrU_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 735,
    I64ShrU_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
    } = 736,
    I64ShrU_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
    } = 737,
    I32Rotl_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 738,
    I32Rotl_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 739,
    I32Rotl_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 740,
    I32Rotl_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 741,
    I32Rotl_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 742,
    I32Rotl_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
    } = 743,
    I32Rotl_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
    } = 744,
    I64Rotl_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 745,
    I64Rotl_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 746,
    I64Rotl_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 747,
    I64Rotl_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 748,
    I64Rotl_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 749,
    I64Rotl_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
    } = 750,
    I64Rotl_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
    } = 751,
    I32Rotr_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 752,
    I32Rotr_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i32,
    } = 753,
    I32Rotr_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 754,
    I32Rotr_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 755,
    I32Rotr_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 756,
    I32Rotr_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Reg,
    } = 757,
    I32Rotr_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
    } = 758,
    I64Rotr_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 759,
    I64Rotr_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 760,
    I64Rotr_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 761,
    I64Rotr_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 762,
    I64Rotr_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 763,
    I64Rotr_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
    } = 764,
    I64Rotr_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
    } = 765,
    F32Sub_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 766,
    F32Sub_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
    } = 767,
    F32Sub_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 768,
    F32Sub_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 769,
    F32Sub_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
    } = 770,
    F32Sub_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::f32,
        rhs: crate::Reg,
    } = 771,
    F32Sub_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::f32,
        rhs: crate::Stack,
    } = 772,
    F64Sub_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 773,
    F64Sub_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
    } = 774,
    F64Sub_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 775,
    F64Sub_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 776,
    F64Sub_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
    } = 777,
    F64Sub_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::f64,
        rhs: crate::Reg,
    } = 778,
    F64Sub_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::f64,
        rhs: crate::Stack,
    } = 779,
    F32Div_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 780,
    F32Div_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
    } = 781,
    F32Div_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 782,
    F32Div_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 783,
    F32Div_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
    } = 784,
    F32Div_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::f32,
        rhs: crate::Reg,
    } = 785,
    F32Div_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::f32,
        rhs: crate::Stack,
    } = 786,
    F64Div_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 787,
    F64Div_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
    } = 788,
    F64Div_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 789,
    F64Div_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 790,
    F64Div_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
    } = 791,
    F64Div_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::f64,
        rhs: crate::Reg,
    } = 792,
    F64Div_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::f64,
        rhs: crate::Stack,
    } = 793,
    F32Copysign_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 794,
    F32Copysign_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
    } = 795,
    F32Copysign_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 796,
    F32Copysign_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 797,
    F32Copysign_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
    } = 798,
    F32Copysign_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::f32,
        rhs: crate::Reg,
    } = 799,
    F32Copysign_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::f32,
        rhs: crate::Stack,
    } = 800,
    F64Copysign_RRS {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 801,
    F64Copysign_RRI {
        result: crate::Reg,
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
    } = 802,
    F64Copysign_RSR {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 803,
    F64Copysign_RSS {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 804,
    F64Copysign_RSI {
        result: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
    } = 805,
    F64Copysign_RIR {
        result: crate::Reg,
        lhs: ::core::primitive::f64,
        rhs: crate::Reg,
    } = 806,
    F64Copysign_RIS {
        result: crate::Reg,
        lhs: ::core::primitive::f64,
        rhs: crate::Stack,
    } = 807,
    I32Load_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 808,
    I32Load_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 809,
    I32Load_RI {
        result: crate::Reg,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 810,
    I32LoadMem0_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 811,
    I32LoadMem0_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 812,
    I32LoadMem0_RI {
        result: crate::Reg,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
    } = 813,
    I32LoadMem0_SR {
        result: crate::Stack,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 814,
    I32LoadMem0_SS {
        result: crate::Stack,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 815,
    I32LoadMem0_SI {
        result: crate::Stack,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
    } = 816,
    I64Load_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 817,
    I64Load_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 818,
    I64Load_RI {
        result: crate::Reg,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 819,
    I64LoadMem0_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 820,
    I64LoadMem0_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 821,
    I64LoadMem0_RI {
        result: crate::Reg,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
    } = 822,
    I64LoadMem0_SR {
        result: crate::Stack,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 823,
    I64LoadMem0_SS {
        result: crate::Stack,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 824,
    I64LoadMem0_SI {
        result: crate::Stack,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
    } = 825,
    F32Load_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 826,
    F32Load_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 827,
    F32Load_RI {
        result: crate::Reg,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 828,
    F32LoadMem0_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 829,
    F32LoadMem0_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 830,
    F32LoadMem0_RI {
        result: crate::Reg,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
    } = 831,
    F32LoadMem0_SR {
        result: crate::Stack,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 832,
    F32LoadMem0_SS {
        result: crate::Stack,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 833,
    F32LoadMem0_SI {
        result: crate::Stack,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
    } = 834,
    F64Load_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 835,
    F64Load_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 836,
    F64Load_RI {
        result: crate::Reg,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 837,
    F64LoadMem0_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 838,
    F64LoadMem0_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 839,
    F64LoadMem0_RI {
        result: crate::Reg,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
    } = 840,
    F64LoadMem0_SR {
        result: crate::Stack,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 841,
    F64LoadMem0_SS {
        result: crate::Stack,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 842,
    F64LoadMem0_SI {
        result: crate::Stack,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
    } = 843,
    I32Load8S_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 844,
    I32Load8S_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 845,
    I32Load8S_RI {
        result: crate::Reg,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 846,
    I32Load8SMem0_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 847,
    I32Load8SMem0_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 848,
    I32Load8SMem0_RI {
        result: crate::Reg,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
    } = 849,
    I32Load8SMem0_SR {
        result: crate::Stack,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 850,
    I32Load8SMem0_SS {
        result: crate::Stack,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 851,
    I32Load8SMem0_SI {
        result: crate::Stack,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
    } = 852,
    I64Load8S_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 853,
    I64Load8S_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 854,
    I64Load8S_RI {
        result: crate::Reg,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 855,
    I64Load8SMem0_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 856,
    I64Load8SMem0_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 857,
    I64Load8SMem0_RI {
        result: crate::Reg,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
    } = 858,
    I64Load8SMem0_SR {
        result: crate::Stack,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 859,
    I64Load8SMem0_SS {
        result: crate::Stack,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 860,
    I64Load8SMem0_SI {
        result: crate::Stack,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
    } = 861,
    I32Load8U_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 862,
    I32Load8U_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 863,
    I32Load8U_RI {
        result: crate::Reg,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 864,
    I32Load8UMem0_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 865,
    I32Load8UMem0_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 866,
    I32Load8UMem0_RI {
        result: crate::Reg,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
    } = 867,
    I32Load8UMem0_SR {
        result: crate::Stack,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 868,
    I32Load8UMem0_SS {
        result: crate::Stack,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 869,
    I32Load8UMem0_SI {
        result: crate::Stack,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
    } = 870,
    I64Load8U_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 871,
    I64Load8U_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 872,
    I64Load8U_RI {
        result: crate::Reg,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 873,
    I64Load8UMem0_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 874,
    I64Load8UMem0_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 875,
    I64Load8UMem0_RI {
        result: crate::Reg,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
    } = 876,
    I64Load8UMem0_SR {
        result: crate::Stack,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 877,
    I64Load8UMem0_SS {
        result: crate::Stack,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 878,
    I64Load8UMem0_SI {
        result: crate::Stack,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
    } = 879,
    I32Load16S_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 880,
    I32Load16S_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 881,
    I32Load16S_RI {
        result: crate::Reg,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 882,
    I32Load16SMem0_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 883,
    I32Load16SMem0_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 884,
    I32Load16SMem0_RI {
        result: crate::Reg,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
    } = 885,
    I32Load16SMem0_SR {
        result: crate::Stack,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 886,
    I32Load16SMem0_SS {
        result: crate::Stack,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 887,
    I32Load16SMem0_SI {
        result: crate::Stack,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
    } = 888,
    I64Load16S_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 889,
    I64Load16S_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 890,
    I64Load16S_RI {
        result: crate::Reg,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 891,
    I64Load16SMem0_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 892,
    I64Load16SMem0_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 893,
    I64Load16SMem0_RI {
        result: crate::Reg,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
    } = 894,
    I64Load16SMem0_SR {
        result: crate::Stack,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 895,
    I64Load16SMem0_SS {
        result: crate::Stack,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 896,
    I64Load16SMem0_SI {
        result: crate::Stack,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
    } = 897,
    I32Load16U_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 898,
    I32Load16U_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 899,
    I32Load16U_RI {
        result: crate::Reg,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 900,
    I32Load16UMem0_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 901,
    I32Load16UMem0_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 902,
    I32Load16UMem0_RI {
        result: crate::Reg,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
    } = 903,
    I32Load16UMem0_SR {
        result: crate::Stack,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 904,
    I32Load16UMem0_SS {
        result: crate::Stack,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 905,
    I32Load16UMem0_SI {
        result: crate::Stack,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
    } = 906,
    I64Load16U_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 907,
    I64Load16U_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 908,
    I64Load16U_RI {
        result: crate::Reg,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 909,
    I64Load16UMem0_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 910,
    I64Load16UMem0_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 911,
    I64Load16UMem0_RI {
        result: crate::Reg,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
    } = 912,
    I64Load16UMem0_SR {
        result: crate::Stack,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 913,
    I64Load16UMem0_SS {
        result: crate::Stack,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 914,
    I64Load16UMem0_SI {
        result: crate::Stack,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
    } = 915,
    I64Load32S_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 916,
    I64Load32S_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 917,
    I64Load32S_RI {
        result: crate::Reg,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 918,
    I64Load32SMem0_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 919,
    I64Load32SMem0_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 920,
    I64Load32SMem0_RI {
        result: crate::Reg,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
    } = 921,
    I64Load32SMem0_SR {
        result: crate::Stack,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 922,
    I64Load32SMem0_SS {
        result: crate::Stack,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 923,
    I64Load32SMem0_SI {
        result: crate::Stack,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
    } = 924,
    I64Load32U_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 925,
    I64Load32U_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 926,
    I64Load32U_RI {
        result: crate::Reg,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 927,
    I64Load32UMem0_RR {
        result: crate::Reg,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 928,
    I64Load32UMem0_RS {
        result: crate::Reg,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 929,
    I64Load32UMem0_RI {
        result: crate::Reg,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
    } = 930,
    I64Load32UMem0_SR {
        result: crate::Stack,
        ptr: crate::Reg,
        offset: crate::Offset,
    } = 931,
    I64Load32UMem0_SS {
        result: crate::Stack,
        ptr: crate::Stack,
        offset: crate::Offset,
    } = 932,
    I64Load32UMem0_SI {
        result: crate::Stack,
        ptr: ::core::primitive::i64,
        offset: crate::Offset,
    } = 933,
    I32Store_RS {
        ptr: crate::Reg,
        value: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 934,
    I32Store_RI {
        ptr: crate::Reg,
        value: ::core::primitive::i32,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 935,
    I32Store_SR {
        ptr: crate::Stack,
        value: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 936,
    I32Store_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 937,
    I32Store_SI {
        ptr: crate::Stack,
        value: ::core::primitive::i32,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 938,
    I32Store_IR {
        address: crate::Address,
        value: crate::Reg,
        memory: crate::Memory,
    } = 939,
    I32Store_IS {
        address: crate::Address,
        value: crate::Stack,
        memory: crate::Memory,
    } = 940,
    I32Store_II {
        address: crate::Address,
        value: ::core::primitive::i32,
        memory: crate::Memory,
    } = 941,
    I32StoreMem0_RS {
        ptr: crate::Reg,
        value: crate::Stack,
        offset: crate::Offset,
    } = 942,
    I32StoreMem0_RI {
        ptr: crate::Reg,
        value: ::core::primitive::i32,
        offset: crate::Offset,
    } = 943,
    I32StoreMem0_SR {
        ptr: crate::Stack,
        value: crate::Reg,
        offset: crate::Offset,
    } = 944,
    I32StoreMem0_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
    } = 945,
    I32StoreMem0_SI {
        ptr: crate::Stack,
        value: ::core::primitive::i32,
        offset: crate::Offset,
    } = 946,
    I32StoreMem0_IR {
        address: crate::Address,
        value: crate::Reg,
    } = 947,
    I32StoreMem0_IS {
        address: crate::Address,
        value: crate::Stack,
    } = 948,
    I32StoreMem0_II {
        address: crate::Address,
        value: ::core::primitive::i32,
    } = 949,
    I64Store_RS {
        ptr: crate::Reg,
        value: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 950,
    I64Store_RI {
        ptr: crate::Reg,
        value: ::core::primitive::i64,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 951,
    I64Store_SR {
        ptr: crate::Stack,
        value: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 952,
    I64Store_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 953,
    I64Store_SI {
        ptr: crate::Stack,
        value: ::core::primitive::i64,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 954,
    I64Store_IR {
        address: crate::Address,
        value: crate::Reg,
        memory: crate::Memory,
    } = 955,
    I64Store_IS {
        address: crate::Address,
        value: crate::Stack,
        memory: crate::Memory,
    } = 956,
    I64Store_II {
        address: crate::Address,
        value: ::core::primitive::i64,
        memory: crate::Memory,
    } = 957,
    I64StoreMem0_RS {
        ptr: crate::Reg,
        value: crate::Stack,
        offset: crate::Offset,
    } = 958,
    I64StoreMem0_RI {
        ptr: crate::Reg,
        value: ::core::primitive::i64,
        offset: crate::Offset,
    } = 959,
    I64StoreMem0_SR {
        ptr: crate::Stack,
        value: crate::Reg,
        offset: crate::Offset,
    } = 960,
    I64StoreMem0_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
    } = 961,
    I64StoreMem0_SI {
        ptr: crate::Stack,
        value: ::core::primitive::i64,
        offset: crate::Offset,
    } = 962,
    I64StoreMem0_IR {
        address: crate::Address,
        value: crate::Reg,
    } = 963,
    I64StoreMem0_IS {
        address: crate::Address,
        value: crate::Stack,
    } = 964,
    I64StoreMem0_II {
        address: crate::Address,
        value: ::core::primitive::i64,
    } = 965,
    F32Store_RR {
        ptr: crate::Reg,
        value: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 966,
    F32Store_RS {
        ptr: crate::Reg,
        value: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 967,
    F32Store_RI {
        ptr: crate::Reg,
        value: ::core::primitive::f32,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 968,
    F32Store_SR {
        ptr: crate::Stack,
        value: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 969,
    F32Store_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 970,
    F32Store_SI {
        ptr: crate::Stack,
        value: ::core::primitive::f32,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 971,
    F32Store_IR {
        address: crate::Address,
        value: crate::Reg,
        memory: crate::Memory,
    } = 972,
    F32Store_IS {
        address: crate::Address,
        value: crate::Stack,
        memory: crate::Memory,
    } = 973,
    F32Store_II {
        address: crate::Address,
        value: ::core::primitive::f32,
        memory: crate::Memory,
    } = 974,
    F32StoreMem0_RR {
        ptr: crate::Reg,
        value: crate::Reg,
        offset: crate::Offset,
    } = 975,
    F32StoreMem0_RS {
        ptr: crate::Reg,
        value: crate::Stack,
        offset: crate::Offset,
    } = 976,
    F32StoreMem0_RI {
        ptr: crate::Reg,
        value: ::core::primitive::f32,
        offset: crate::Offset,
    } = 977,
    F32StoreMem0_SR {
        ptr: crate::Stack,
        value: crate::Reg,
        offset: crate::Offset,
    } = 978,
    F32StoreMem0_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
    } = 979,
    F32StoreMem0_SI {
        ptr: crate::Stack,
        value: ::core::primitive::f32,
        offset: crate::Offset,
    } = 980,
    F32StoreMem0_IR {
        address: crate::Address,
        value: crate::Reg,
    } = 981,
    F32StoreMem0_IS {
        address: crate::Address,
        value: crate::Stack,
    } = 982,
    F32StoreMem0_II {
        address: crate::Address,
        value: ::core::primitive::f32,
    } = 983,
    F64Store_RR {
        ptr: crate::Reg,
        value: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 984,
    F64Store_RS {
        ptr: crate::Reg,
        value: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 985,
    F64Store_RI {
        ptr: crate::Reg,
        value: ::core::primitive::f64,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 986,
    F64Store_SR {
        ptr: crate::Stack,
        value: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 987,
    F64Store_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 988,
    F64Store_SI {
        ptr: crate::Stack,
        value: ::core::primitive::f64,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 989,
    F64Store_IR {
        address: crate::Address,
        value: crate::Reg,
        memory: crate::Memory,
    } = 990,
    F64Store_IS {
        address: crate::Address,
        value: crate::Stack,
        memory: crate::Memory,
    } = 991,
    F64Store_II {
        address: crate::Address,
        value: ::core::primitive::f64,
        memory: crate::Memory,
    } = 992,
    F64StoreMem0_RR {
        ptr: crate::Reg,
        value: crate::Reg,
        offset: crate::Offset,
    } = 993,
    F64StoreMem0_RS {
        ptr: crate::Reg,
        value: crate::Stack,
        offset: crate::Offset,
    } = 994,
    F64StoreMem0_RI {
        ptr: crate::Reg,
        value: ::core::primitive::f64,
        offset: crate::Offset,
    } = 995,
    F64StoreMem0_SR {
        ptr: crate::Stack,
        value: crate::Reg,
        offset: crate::Offset,
    } = 996,
    F64StoreMem0_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
    } = 997,
    F64StoreMem0_SI {
        ptr: crate::Stack,
        value: ::core::primitive::f64,
        offset: crate::Offset,
    } = 998,
    F64StoreMem0_IR {
        address: crate::Address,
        value: crate::Reg,
    } = 999,
    F64StoreMem0_IS {
        address: crate::Address,
        value: crate::Stack,
    } = 1000,
    F64StoreMem0_II {
        address: crate::Address,
        value: ::core::primitive::f64,
    } = 1001,
    I32Store8_RS {
        ptr: crate::Reg,
        value: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 1002,
    I32Store8_RI {
        ptr: crate::Reg,
        value: ::core::primitive::i32,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 1003,
    I32Store8_SR {
        ptr: crate::Stack,
        value: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 1004,
    I32Store8_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 1005,
    I32Store8_SI {
        ptr: crate::Stack,
        value: ::core::primitive::i32,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 1006,
    I32Store8_IR {
        address: crate::Address,
        value: crate::Reg,
        memory: crate::Memory,
    } = 1007,
    I32Store8_IS {
        address: crate::Address,
        value: crate::Stack,
        memory: crate::Memory,
    } = 1008,
    I32Store8_II {
        address: crate::Address,
        value: ::core::primitive::i32,
        memory: crate::Memory,
    } = 1009,
    I32Store8Mem0_RS {
        ptr: crate::Reg,
        value: crate::Stack,
        offset: crate::Offset,
    } = 1010,
    I32Store8Mem0_RI {
        ptr: crate::Reg,
        value: ::core::primitive::i32,
        offset: crate::Offset,
    } = 1011,
    I32Store8Mem0_SR {
        ptr: crate::Stack,
        value: crate::Reg,
        offset: crate::Offset,
    } = 1012,
    I32Store8Mem0_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
    } = 1013,
    I32Store8Mem0_SI {
        ptr: crate::Stack,
        value: ::core::primitive::i32,
        offset: crate::Offset,
    } = 1014,
    I32Store8Mem0_IR {
        address: crate::Address,
        value: crate::Reg,
    } = 1015,
    I32Store8Mem0_IS {
        address: crate::Address,
        value: crate::Stack,
    } = 1016,
    I32Store8Mem0_II {
        address: crate::Address,
        value: ::core::primitive::i32,
    } = 1017,
    I64Store8_RS {
        ptr: crate::Reg,
        value: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 1018,
    I64Store8_RI {
        ptr: crate::Reg,
        value: ::core::primitive::i64,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 1019,
    I64Store8_SR {
        ptr: crate::Stack,
        value: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 1020,
    I64Store8_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 1021,
    I64Store8_SI {
        ptr: crate::Stack,
        value: ::core::primitive::i64,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 1022,
    I64Store8_IR {
        address: crate::Address,
        value: crate::Reg,
        memory: crate::Memory,
    } = 1023,
    I64Store8_IS {
        address: crate::Address,
        value: crate::Stack,
        memory: crate::Memory,
    } = 1024,
    I64Store8_II {
        address: crate::Address,
        value: ::core::primitive::i64,
        memory: crate::Memory,
    } = 1025,
    I64Store8Mem0_RS {
        ptr: crate::Reg,
        value: crate::Stack,
        offset: crate::Offset,
    } = 1026,
    I64Store8Mem0_RI {
        ptr: crate::Reg,
        value: ::core::primitive::i64,
        offset: crate::Offset,
    } = 1027,
    I64Store8Mem0_SR {
        ptr: crate::Stack,
        value: crate::Reg,
        offset: crate::Offset,
    } = 1028,
    I64Store8Mem0_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
    } = 1029,
    I64Store8Mem0_SI {
        ptr: crate::Stack,
        value: ::core::primitive::i64,
        offset: crate::Offset,
    } = 1030,
    I64Store8Mem0_IR {
        address: crate::Address,
        value: crate::Reg,
    } = 1031,
    I64Store8Mem0_IS {
        address: crate::Address,
        value: crate::Stack,
    } = 1032,
    I64Store8Mem0_II {
        address: crate::Address,
        value: ::core::primitive::i64,
    } = 1033,
    I32Store16_RS {
        ptr: crate::Reg,
        value: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 1034,
    I32Store16_RI {
        ptr: crate::Reg,
        value: ::core::primitive::i32,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 1035,
    I32Store16_SR {
        ptr: crate::Stack,
        value: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 1036,
    I32Store16_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 1037,
    I32Store16_SI {
        ptr: crate::Stack,
        value: ::core::primitive::i32,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 1038,
    I32Store16_IR {
        address: crate::Address,
        value: crate::Reg,
        memory: crate::Memory,
    } = 1039,
    I32Store16_IS {
        address: crate::Address,
        value: crate::Stack,
        memory: crate::Memory,
    } = 1040,
    I32Store16_II {
        address: crate::Address,
        value: ::core::primitive::i32,
        memory: crate::Memory,
    } = 1041,
    I32Store16Mem0_RS {
        ptr: crate::Reg,
        value: crate::Stack,
        offset: crate::Offset,
    } = 1042,
    I32Store16Mem0_RI {
        ptr: crate::Reg,
        value: ::core::primitive::i32,
        offset: crate::Offset,
    } = 1043,
    I32Store16Mem0_SR {
        ptr: crate::Stack,
        value: crate::Reg,
        offset: crate::Offset,
    } = 1044,
    I32Store16Mem0_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
    } = 1045,
    I32Store16Mem0_SI {
        ptr: crate::Stack,
        value: ::core::primitive::i32,
        offset: crate::Offset,
    } = 1046,
    I32Store16Mem0_IR {
        address: crate::Address,
        value: crate::Reg,
    } = 1047,
    I32Store16Mem0_IS {
        address: crate::Address,
        value: crate::Stack,
    } = 1048,
    I32Store16Mem0_II {
        address: crate::Address,
        value: ::core::primitive::i32,
    } = 1049,
    I64Store16_RS {
        ptr: crate::Reg,
        value: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 1050,
    I64Store16_RI {
        ptr: crate::Reg,
        value: ::core::primitive::i64,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 1051,
    I64Store16_SR {
        ptr: crate::Stack,
        value: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 1052,
    I64Store16_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 1053,
    I64Store16_SI {
        ptr: crate::Stack,
        value: ::core::primitive::i64,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 1054,
    I64Store16_IR {
        address: crate::Address,
        value: crate::Reg,
        memory: crate::Memory,
    } = 1055,
    I64Store16_IS {
        address: crate::Address,
        value: crate::Stack,
        memory: crate::Memory,
    } = 1056,
    I64Store16_II {
        address: crate::Address,
        value: ::core::primitive::i64,
        memory: crate::Memory,
    } = 1057,
    I64Store16Mem0_RS {
        ptr: crate::Reg,
        value: crate::Stack,
        offset: crate::Offset,
    } = 1058,
    I64Store16Mem0_RI {
        ptr: crate::Reg,
        value: ::core::primitive::i64,
        offset: crate::Offset,
    } = 1059,
    I64Store16Mem0_SR {
        ptr: crate::Stack,
        value: crate::Reg,
        offset: crate::Offset,
    } = 1060,
    I64Store16Mem0_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
    } = 1061,
    I64Store16Mem0_SI {
        ptr: crate::Stack,
        value: ::core::primitive::i64,
        offset: crate::Offset,
    } = 1062,
    I64Store16Mem0_IR {
        address: crate::Address,
        value: crate::Reg,
    } = 1063,
    I64Store16Mem0_IS {
        address: crate::Address,
        value: crate::Stack,
    } = 1064,
    I64Store16Mem0_II {
        address: crate::Address,
        value: ::core::primitive::i64,
    } = 1065,
    I64Store32_RS {
        ptr: crate::Reg,
        value: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 1066,
    I64Store32_RI {
        ptr: crate::Reg,
        value: ::core::primitive::i64,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 1067,
    I64Store32_SR {
        ptr: crate::Stack,
        value: crate::Reg,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 1068,
    I64Store32_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 1069,
    I64Store32_SI {
        ptr: crate::Stack,
        value: ::core::primitive::i64,
        offset: crate::Offset,
        memory: crate::Memory,
    } = 1070,
    I64Store32_IR {
        address: crate::Address,
        value: crate::Reg,
        memory: crate::Memory,
    } = 1071,
    I64Store32_IS {
        address: crate::Address,
        value: crate::Stack,
        memory: crate::Memory,
    } = 1072,
    I64Store32_II {
        address: crate::Address,
        value: ::core::primitive::i64,
        memory: crate::Memory,
    } = 1073,
    I64Store32Mem0_RS {
        ptr: crate::Reg,
        value: crate::Stack,
        offset: crate::Offset,
    } = 1074,
    I64Store32Mem0_RI {
        ptr: crate::Reg,
        value: ::core::primitive::i64,
        offset: crate::Offset,
    } = 1075,
    I64Store32Mem0_SR {
        ptr: crate::Stack,
        value: crate::Reg,
        offset: crate::Offset,
    } = 1076,
    I64Store32Mem0_SS {
        ptr: crate::Stack,
        value: crate::Stack,
        offset: crate::Offset,
    } = 1077,
    I64Store32Mem0_SI {
        ptr: crate::Stack,
        value: ::core::primitive::i64,
        offset: crate::Offset,
    } = 1078,
    I64Store32Mem0_IR {
        address: crate::Address,
        value: crate::Reg,
    } = 1079,
    I64Store32Mem0_IS {
        address: crate::Address,
        value: crate::Stack,
    } = 1080,
    I64Store32Mem0_II {
        address: crate::Address,
        value: ::core::primitive::i64,
    } = 1081,
    Select {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 1082,
    SelectI32_RSSS {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 1083,
    SelectI32_RSSI {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::i32,
    } = 1084,
    SelectI32_RSIS {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: ::core::primitive::i32,
        rhs: crate::Stack,
    } = 1085,
    SelectI32_RSII {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: ::core::primitive::i32,
        rhs: ::core::primitive::i32,
    } = 1086,
    SelectI64_RRSS {
        result: crate::Reg,
        condition: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 1087,
    SelectI64_RRSI {
        result: crate::Reg,
        condition: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 1088,
    SelectI64_RRIS {
        result: crate::Reg,
        condition: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
    } = 1089,
    SelectI64_RRII {
        result: crate::Reg,
        condition: crate::Reg,
        lhs: ::core::primitive::i64,
        rhs: ::core::primitive::i64,
    } = 1090,
    SelectI64_RSRS {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 1091,
    SelectI64_RSRI {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::i64,
    } = 1092,
    SelectI64_RSSR {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 1093,
    SelectI64_RSSS {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 1094,
    SelectI64_RSSI {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::i64,
    } = 1095,
    SelectI64_RSIR {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: ::core::primitive::i64,
        rhs: crate::Reg,
    } = 1096,
    SelectI64_RSIS {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: ::core::primitive::i64,
        rhs: crate::Stack,
    } = 1097,
    SelectI64_RSII {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: ::core::primitive::i64,
        rhs: ::core::primitive::i64,
    } = 1098,
    SelectF32_RRSS {
        result: crate::Reg,
        condition: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 1099,
    SelectF32_RRSI {
        result: crate::Reg,
        condition: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
    } = 1100,
    SelectF32_RRIS {
        result: crate::Reg,
        condition: crate::Reg,
        lhs: ::core::primitive::f32,
        rhs: crate::Stack,
    } = 1101,
    SelectF32_RRII {
        result: crate::Reg,
        condition: crate::Reg,
        lhs: ::core::primitive::f32,
        rhs: ::core::primitive::f32,
    } = 1102,
    SelectF32_RSRS {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 1103,
    SelectF32_RSRI {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::f32,
    } = 1104,
    SelectF32_RSSR {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 1105,
    SelectF32_RSSS {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 1106,
    SelectF32_RSSI {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::f32,
    } = 1107,
    SelectF32_RSIR {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: ::core::primitive::f32,
        rhs: crate::Reg,
    } = 1108,
    SelectF32_RSIS {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: ::core::primitive::f32,
        rhs: crate::Stack,
    } = 1109,
    SelectF32_RSII {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: ::core::primitive::f32,
        rhs: ::core::primitive::f32,
    } = 1110,
    SelectF64_RRSS {
        result: crate::Reg,
        condition: crate::Reg,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 1111,
    SelectF64_RRSI {
        result: crate::Reg,
        condition: crate::Reg,
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
    } = 1112,
    SelectF64_RRIS {
        result: crate::Reg,
        condition: crate::Reg,
        lhs: ::core::primitive::f64,
        rhs: crate::Stack,
    } = 1113,
    SelectF64_RRII {
        result: crate::Reg,
        condition: crate::Reg,
        lhs: ::core::primitive::f64,
        rhs: ::core::primitive::f64,
    } = 1114,
    SelectF64_RSRS {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Reg,
        rhs: crate::Stack,
    } = 1115,
    SelectF64_RSRI {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Reg,
        rhs: ::core::primitive::f64,
    } = 1116,
    SelectF64_RSSR {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Reg,
    } = 1117,
    SelectF64_RSSS {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Stack,
        rhs: crate::Stack,
    } = 1118,
    SelectF64_RSSI {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: crate::Stack,
        rhs: ::core::primitive::f64,
    } = 1119,
    SelectF64_RSIR {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: ::core::primitive::f64,
        rhs: crate::Reg,
    } = 1120,
    SelectF64_RSIS {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: ::core::primitive::f64,
        rhs: crate::Stack,
    } = 1121,
    SelectF64_RSII {
        result: crate::Reg,
        condition: crate::Stack,
        lhs: ::core::primitive::f64,
        rhs: ::core::primitive::f64,
    } = 1122,
    TableSize_R {
        result: crate::Reg,
        table: crate::Table,
    } = 1123,
    TableSize_S {
        result: crate::Stack,
        table: crate::Table,
    } = 1124,
    TableGet_RR {
        result: crate::Reg,
        index: crate::Reg,
        table: crate::Table,
    } = 1125,
    TableGet_RS {
        result: crate::Reg,
        index: crate::Stack,
        table: crate::Table,
    } = 1126,
    TableGet_RI {
        result: crate::Reg,
        index: ::core::primitive::i64,
        table: crate::Table,
    } = 1127,
    TableSet_RS {
        index: crate::Reg,
        value: crate::Stack,
        table: crate::Table,
    } = 1128,
    TableSet_RI {
        index: crate::Reg,
        value: ::core::primitive::i32,
        table: crate::Table,
    } = 1129,
    TableSet_SR {
        index: crate::Stack,
        value: crate::Reg,
        table: crate::Table,
    } = 1130,
    TableSet_SS {
        index: crate::Stack,
        value: crate::Stack,
        table: crate::Table,
    } = 1131,
    TableSet_SI {
        index: crate::Stack,
        value: ::core::primitive::i32,
        table: crate::Table,
    } = 1132,
    TableSet_IR {
        index: ::core::primitive::i64,
        value: crate::Reg,
        table: crate::Table,
    } = 1133,
    TableSet_IS {
        index: ::core::primitive::i64,
        value: crate::Stack,
        table: crate::Table,
    } = 1134,
    TableSet_II {
        index: ::core::primitive::i64,
        value: ::core::primitive::i32,
        table: crate::Table,
    } = 1135,
    TableGrow {
        result: crate::Stack,
        delta: crate::Stack,
        table: crate::Table,
    } = 1136,
    TableCopy {
        dst_index: crate::Stack,
        src_index: crate::Stack,
        len: crate::Stack,
        dst_table: crate::Table,
        src_table: crate::Table,
    } = 1137,
    TableFill {
        dst_index: crate::Stack,
        value: crate::Stack,
        len: crate::Stack,
        table: crate::Table,
    } = 1138,
    TableInit {
        dst_index: crate::Stack,
        src_index: crate::Stack,
        len: crate::Stack,
        table: crate::Table,
        elem: crate::Elem,
    } = 1139,
    MemorySize_R {
        result: crate::Reg,
        memory: crate::Memory,
    } = 1140,
    MemorySize_S {
        result: crate::Stack,
        memory: crate::Memory,
    } = 1141,
    MemoryGrow {
        result: crate::Reg,
        delta: crate::Stack,
        memory: crate::Memory,
    } = 1142,
    MemoryCopy {
        dst_index: crate::Stack,
        src_index: crate::Stack,
        len: crate::Stack,
        dst_memory: crate::Memory,
        src_memory: crate::Memory,
    } = 1143,
    MemoryFill {
        dst_index: crate::Stack,
        value: crate::Stack,
        len: crate::Stack,
        memory: crate::Memory,
    } = 1144,
    MemoryInit {
        dst_index: crate::Stack,
        src_index: crate::Stack,
        len: crate::Stack,
        memory: crate::Memory,
        data: crate::Data,
    } = 1145,
    CallInternal {
        func: crate::WasmFunc,
        len_params: ::core::primitive::usize,
        len_results: ::core::primitive::usize,
    } = 1146,
    ReturnCallInternal {
        func: crate::WasmFunc,
        len_params: ::core::primitive::usize,
        len_results: ::core::primitive::usize,
    } = 1147,
    CallImported {
        func: crate::Func,
        len_params: ::core::primitive::usize,
        len_results: ::core::primitive::usize,
    } = 1148,
    ReturnCallImported {
        func: crate::Func,
        len_params: ::core::primitive::usize,
        len_results: ::core::primitive::usize,
    } = 1149,
    CallIndirect_R {
        table: crate::Table,
        index: crate::Reg,
        len_params: ::core::primitive::usize,
        len_results: ::core::primitive::usize,
    } = 1150,
    CallIndirect_S {
        table: crate::Table,
        index: crate::Stack,
        len_params: ::core::primitive::usize,
        len_results: ::core::primitive::usize,
    } = 1151,
    CallIndirect_I {
        table: crate::Table,
        index: ::core::primitive::i64,
        len_params: ::core::primitive::usize,
        len_results: ::core::primitive::usize,
    } = 1152,
    ReturnCallIndirect_R {
        table: crate::Table,
        index: crate::Reg,
        len_params: ::core::primitive::usize,
        len_results: ::core::primitive::usize,
    } = 1153,
    ReturnCallIndirect_S {
        table: crate::Table,
        index: crate::Stack,
        len_params: ::core::primitive::usize,
        len_results: ::core::primitive::usize,
    } = 1154,
    ReturnCallIndirect_I {
        table: crate::Table,
        index: ::core::primitive::i64,
        len_params: ::core::primitive::usize,
        len_results: ::core::primitive::usize,
    } = 1155,
}
impl ::core::marker::Copy for Op {}
impl ::core::clone::Clone for Op {
    fn clone(&self) -> Self {
        *self
    }
}
impl Op {
    /// Encodes `self` without its [`OpCode`][crate::OpCode].
    pub fn encode_params(
        &self,
        encoder: &mut crate::CopyEncoder,
    ) -> ::core::result::Result<(), crate::EncoderError> {
        match *self {
            Self::Copy1_S { result, value } => {
                encoder.encode(crate::op::Copy1_S { result, value })
            }
            Self::Copy { result, len_values } => {
                encoder.encode(crate::op::Copy { result, len_values })
            }
            Self::Copy1I32_I { result, value } => {
                encoder.encode(crate::op::Copy1I32_I { result, value })
            }
            Self::Copy1I64_R { result, value } => {
                encoder.encode(crate::op::Copy1I64_R { result, value })
            }
            Self::Copy1I64_I { result, value } => {
                encoder.encode(crate::op::Copy1I64_I { result, value })
            }
            Self::Copy1F32_R { result, value } => {
                encoder.encode(crate::op::Copy1F32_R { result, value })
            }
            Self::Copy1F32_I { result, value } => {
                encoder.encode(crate::op::Copy1F32_I { result, value })
            }
            Self::Copy1F64_R { result, value } => {
                encoder.encode(crate::op::Copy1F64_R { result, value })
            }
            Self::Copy1F64_I { result, value } => {
                encoder.encode(crate::op::Copy1F64_I { result, value })
            }
            Self::Return0 {  } => {
                encoder.encode(crate::op::Return0 {  })
            }
            Self::Return1_S { value } => {
                encoder.encode(crate::op::Return1_S { value })
            }
            Self::Return { len_values } => {
                encoder.encode(crate::op::Return { len_values })
            }
            Self::Return1I32_R { value } => {
                encoder.encode(crate::op::Return1I32_R { value })
            }
            Self::Return1I64_R { value } => {
                encoder.encode(crate::op::Return1I64_R { value })
            }
            Self::Return1F32_R { value } => {
                encoder.encode(crate::op::Return1F32_R { value })
            }
            Self::Return1F64_R { value } => {
                encoder.encode(crate::op::Return1F64_R { value })
            }
            Self::Return1I32_I { value } => {
                encoder.encode(crate::op::Return1I32_I { value })
            }
            Self::Return1I64_I { value } => {
                encoder.encode(crate::op::Return1I64_I { value })
            }
            Self::Return1F32_I { value } => {
                encoder.encode(crate::op::Return1F32_I { value })
            }
            Self::Return1F64_I { value } => {
                encoder.encode(crate::op::Return1F64_I { value })
            }
            Self::GlobalGet_S { result, global } => {
                encoder.encode(crate::op::GlobalGet_S { result, global })
            }
            Self::GlobalGetI32_R { result, global } => {
                encoder.encode(crate::op::GlobalGetI32_R { result, global })
            }
            Self::GlobalGetI64_R { result, global } => {
                encoder.encode(crate::op::GlobalGetI64_R { result, global })
            }
            Self::GlobalGetF32_R { result, global } => {
                encoder.encode(crate::op::GlobalGetF32_R { result, global })
            }
            Self::GlobalGetF64_R { result, global } => {
                encoder.encode(crate::op::GlobalGetF64_R { result, global })
            }
            Self::GlobalSet_S { global, value } => {
                encoder.encode(crate::op::GlobalSet_S { global, value })
            }
            Self::GlobalSetI32_R { global, value } => {
                encoder.encode(crate::op::GlobalSetI32_R { global, value })
            }
            Self::GlobalSetI64_R { global, value } => {
                encoder.encode(crate::op::GlobalSetI64_R { global, value })
            }
            Self::GlobalSetF32_R { global, value } => {
                encoder.encode(crate::op::GlobalSetF32_R { global, value })
            }
            Self::GlobalSetF64_R { global, value } => {
                encoder.encode(crate::op::GlobalSetF64_R { global, value })
            }
            Self::GlobalSetI32_I { global, value } => {
                encoder.encode(crate::op::GlobalSetI32_I { global, value })
            }
            Self::GlobalSetI64_I { global, value } => {
                encoder.encode(crate::op::GlobalSetI64_I { global, value })
            }
            Self::GlobalSetF32_I { global, value } => {
                encoder.encode(crate::op::GlobalSetF32_I { global, value })
            }
            Self::GlobalSetF64_I { global, value } => {
                encoder.encode(crate::op::GlobalSetF64_I { global, value })
            }
            Self::BranchTable0_R { index, len_targets } => {
                encoder.encode(crate::op::BranchTable0_R { index, len_targets })
            }
            Self::BranchTable_R { index, len_targets } => {
                encoder.encode(crate::op::BranchTable_R { index, len_targets })
            }
            Self::BranchTable0_S { index, len_targets } => {
                encoder.encode(crate::op::BranchTable0_S { index, len_targets })
            }
            Self::BranchTable_S { index, len_targets } => {
                encoder.encode(crate::op::BranchTable_S { index, len_targets })
            }
            Self::I32EqBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32EqBranch_RS { lhs, rhs, offset })
            }
            Self::I32EqBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32EqBranch_RI { lhs, rhs, offset })
            }
            Self::I32EqBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32EqBranch_SS { lhs, rhs, offset })
            }
            Self::I32EqBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32EqBranch_SI { lhs, rhs, offset })
            }
            Self::I64EqBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64EqBranch_RS { lhs, rhs, offset })
            }
            Self::I64EqBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64EqBranch_RI { lhs, rhs, offset })
            }
            Self::I64EqBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64EqBranch_SS { lhs, rhs, offset })
            }
            Self::I64EqBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64EqBranch_SI { lhs, rhs, offset })
            }
            Self::F32EqBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32EqBranch_RS { lhs, rhs, offset })
            }
            Self::F32EqBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32EqBranch_RI { lhs, rhs, offset })
            }
            Self::F32EqBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32EqBranch_SS { lhs, rhs, offset })
            }
            Self::F32EqBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32EqBranch_SI { lhs, rhs, offset })
            }
            Self::F64EqBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64EqBranch_RS { lhs, rhs, offset })
            }
            Self::F64EqBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64EqBranch_RI { lhs, rhs, offset })
            }
            Self::F64EqBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64EqBranch_SS { lhs, rhs, offset })
            }
            Self::F64EqBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64EqBranch_SI { lhs, rhs, offset })
            }
            Self::I32NeBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32NeBranch_RS { lhs, rhs, offset })
            }
            Self::I32NeBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32NeBranch_RI { lhs, rhs, offset })
            }
            Self::I32NeBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32NeBranch_SS { lhs, rhs, offset })
            }
            Self::I32NeBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32NeBranch_SI { lhs, rhs, offset })
            }
            Self::I64NeBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64NeBranch_RS { lhs, rhs, offset })
            }
            Self::I64NeBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64NeBranch_RI { lhs, rhs, offset })
            }
            Self::I64NeBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64NeBranch_SS { lhs, rhs, offset })
            }
            Self::I64NeBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64NeBranch_SI { lhs, rhs, offset })
            }
            Self::F32NeBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32NeBranch_RS { lhs, rhs, offset })
            }
            Self::F32NeBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32NeBranch_RI { lhs, rhs, offset })
            }
            Self::F32NeBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32NeBranch_SS { lhs, rhs, offset })
            }
            Self::F32NeBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32NeBranch_SI { lhs, rhs, offset })
            }
            Self::F64NeBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64NeBranch_RS { lhs, rhs, offset })
            }
            Self::F64NeBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64NeBranch_RI { lhs, rhs, offset })
            }
            Self::F64NeBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64NeBranch_SS { lhs, rhs, offset })
            }
            Self::F64NeBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64NeBranch_SI { lhs, rhs, offset })
            }
            Self::I32LtSBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LtSBranch_RS { lhs, rhs, offset })
            }
            Self::I32LtSBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LtSBranch_RI { lhs, rhs, offset })
            }
            Self::I32LtSBranch_SR { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LtSBranch_SR { lhs, rhs, offset })
            }
            Self::I32LtSBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LtSBranch_SS { lhs, rhs, offset })
            }
            Self::I32LtSBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LtSBranch_SI { lhs, rhs, offset })
            }
            Self::I32LtSBranch_IR { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LtSBranch_IR { lhs, rhs, offset })
            }
            Self::I32LtSBranch_IS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LtSBranch_IS { lhs, rhs, offset })
            }
            Self::I64LtSBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LtSBranch_RS { lhs, rhs, offset })
            }
            Self::I64LtSBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LtSBranch_RI { lhs, rhs, offset })
            }
            Self::I64LtSBranch_SR { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LtSBranch_SR { lhs, rhs, offset })
            }
            Self::I64LtSBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LtSBranch_SS { lhs, rhs, offset })
            }
            Self::I64LtSBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LtSBranch_SI { lhs, rhs, offset })
            }
            Self::I64LtSBranch_IR { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LtSBranch_IR { lhs, rhs, offset })
            }
            Self::I64LtSBranch_IS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LtSBranch_IS { lhs, rhs, offset })
            }
            Self::I32LtUBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LtUBranch_RS { lhs, rhs, offset })
            }
            Self::I32LtUBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LtUBranch_RI { lhs, rhs, offset })
            }
            Self::I32LtUBranch_SR { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LtUBranch_SR { lhs, rhs, offset })
            }
            Self::I32LtUBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LtUBranch_SS { lhs, rhs, offset })
            }
            Self::I32LtUBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LtUBranch_SI { lhs, rhs, offset })
            }
            Self::I32LtUBranch_IR { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LtUBranch_IR { lhs, rhs, offset })
            }
            Self::I32LtUBranch_IS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LtUBranch_IS { lhs, rhs, offset })
            }
            Self::I64LtUBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LtUBranch_RS { lhs, rhs, offset })
            }
            Self::I64LtUBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LtUBranch_RI { lhs, rhs, offset })
            }
            Self::I64LtUBranch_SR { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LtUBranch_SR { lhs, rhs, offset })
            }
            Self::I64LtUBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LtUBranch_SS { lhs, rhs, offset })
            }
            Self::I64LtUBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LtUBranch_SI { lhs, rhs, offset })
            }
            Self::I64LtUBranch_IR { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LtUBranch_IR { lhs, rhs, offset })
            }
            Self::I64LtUBranch_IS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LtUBranch_IS { lhs, rhs, offset })
            }
            Self::I32LeSBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LeSBranch_RS { lhs, rhs, offset })
            }
            Self::I32LeSBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LeSBranch_RI { lhs, rhs, offset })
            }
            Self::I32LeSBranch_SR { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LeSBranch_SR { lhs, rhs, offset })
            }
            Self::I32LeSBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LeSBranch_SS { lhs, rhs, offset })
            }
            Self::I32LeSBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LeSBranch_SI { lhs, rhs, offset })
            }
            Self::I32LeSBranch_IR { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LeSBranch_IR { lhs, rhs, offset })
            }
            Self::I32LeSBranch_IS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LeSBranch_IS { lhs, rhs, offset })
            }
            Self::I64LeSBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LeSBranch_RS { lhs, rhs, offset })
            }
            Self::I64LeSBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LeSBranch_RI { lhs, rhs, offset })
            }
            Self::I64LeSBranch_SR { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LeSBranch_SR { lhs, rhs, offset })
            }
            Self::I64LeSBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LeSBranch_SS { lhs, rhs, offset })
            }
            Self::I64LeSBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LeSBranch_SI { lhs, rhs, offset })
            }
            Self::I64LeSBranch_IR { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LeSBranch_IR { lhs, rhs, offset })
            }
            Self::I64LeSBranch_IS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LeSBranch_IS { lhs, rhs, offset })
            }
            Self::I32LeUBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LeUBranch_RS { lhs, rhs, offset })
            }
            Self::I32LeUBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LeUBranch_RI { lhs, rhs, offset })
            }
            Self::I32LeUBranch_SR { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LeUBranch_SR { lhs, rhs, offset })
            }
            Self::I32LeUBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LeUBranch_SS { lhs, rhs, offset })
            }
            Self::I32LeUBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LeUBranch_SI { lhs, rhs, offset })
            }
            Self::I32LeUBranch_IR { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LeUBranch_IR { lhs, rhs, offset })
            }
            Self::I32LeUBranch_IS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I32LeUBranch_IS { lhs, rhs, offset })
            }
            Self::I64LeUBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LeUBranch_RS { lhs, rhs, offset })
            }
            Self::I64LeUBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LeUBranch_RI { lhs, rhs, offset })
            }
            Self::I64LeUBranch_SR { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LeUBranch_SR { lhs, rhs, offset })
            }
            Self::I64LeUBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LeUBranch_SS { lhs, rhs, offset })
            }
            Self::I64LeUBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LeUBranch_SI { lhs, rhs, offset })
            }
            Self::I64LeUBranch_IR { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LeUBranch_IR { lhs, rhs, offset })
            }
            Self::I64LeUBranch_IS { lhs, rhs, offset } => {
                encoder.encode(crate::op::I64LeUBranch_IS { lhs, rhs, offset })
            }
            Self::F32LtBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32LtBranch_RS { lhs, rhs, offset })
            }
            Self::F32LtBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32LtBranch_RI { lhs, rhs, offset })
            }
            Self::F32LtBranch_SR { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32LtBranch_SR { lhs, rhs, offset })
            }
            Self::F32LtBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32LtBranch_SS { lhs, rhs, offset })
            }
            Self::F32LtBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32LtBranch_SI { lhs, rhs, offset })
            }
            Self::F32LtBranch_IR { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32LtBranch_IR { lhs, rhs, offset })
            }
            Self::F32LtBranch_IS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32LtBranch_IS { lhs, rhs, offset })
            }
            Self::F64LtBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64LtBranch_RS { lhs, rhs, offset })
            }
            Self::F64LtBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64LtBranch_RI { lhs, rhs, offset })
            }
            Self::F64LtBranch_SR { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64LtBranch_SR { lhs, rhs, offset })
            }
            Self::F64LtBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64LtBranch_SS { lhs, rhs, offset })
            }
            Self::F64LtBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64LtBranch_SI { lhs, rhs, offset })
            }
            Self::F64LtBranch_IR { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64LtBranch_IR { lhs, rhs, offset })
            }
            Self::F64LtBranch_IS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64LtBranch_IS { lhs, rhs, offset })
            }
            Self::F32LeBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32LeBranch_RS { lhs, rhs, offset })
            }
            Self::F32LeBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32LeBranch_RI { lhs, rhs, offset })
            }
            Self::F32LeBranch_SR { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32LeBranch_SR { lhs, rhs, offset })
            }
            Self::F32LeBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32LeBranch_SS { lhs, rhs, offset })
            }
            Self::F32LeBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32LeBranch_SI { lhs, rhs, offset })
            }
            Self::F32LeBranch_IR { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32LeBranch_IR { lhs, rhs, offset })
            }
            Self::F32LeBranch_IS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F32LeBranch_IS { lhs, rhs, offset })
            }
            Self::F64LeBranch_RS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64LeBranch_RS { lhs, rhs, offset })
            }
            Self::F64LeBranch_RI { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64LeBranch_RI { lhs, rhs, offset })
            }
            Self::F64LeBranch_SR { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64LeBranch_SR { lhs, rhs, offset })
            }
            Self::F64LeBranch_SS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64LeBranch_SS { lhs, rhs, offset })
            }
            Self::F64LeBranch_SI { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64LeBranch_SI { lhs, rhs, offset })
            }
            Self::F64LeBranch_IR { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64LeBranch_IR { lhs, rhs, offset })
            }
            Self::F64LeBranch_IS { lhs, rhs, offset } => {
                encoder.encode(crate::op::F64LeBranch_IS { lhs, rhs, offset })
            }
            Self::I32Popcnt_RR { result, input } => {
                encoder.encode(crate::op::I32Popcnt_RR { result, input })
            }
            Self::I32Popcnt_RS { result, input } => {
                encoder.encode(crate::op::I32Popcnt_RS { result, input })
            }
            Self::I32Popcnt_SR { result, input } => {
                encoder.encode(crate::op::I32Popcnt_SR { result, input })
            }
            Self::I32Popcnt_SS { result, input } => {
                encoder.encode(crate::op::I32Popcnt_SS { result, input })
            }
            Self::I64Popcnt_RR { result, input } => {
                encoder.encode(crate::op::I64Popcnt_RR { result, input })
            }
            Self::I64Popcnt_RS { result, input } => {
                encoder.encode(crate::op::I64Popcnt_RS { result, input })
            }
            Self::I64Popcnt_SR { result, input } => {
                encoder.encode(crate::op::I64Popcnt_SR { result, input })
            }
            Self::I64Popcnt_SS { result, input } => {
                encoder.encode(crate::op::I64Popcnt_SS { result, input })
            }
            Self::I32Clz_RR { result, input } => {
                encoder.encode(crate::op::I32Clz_RR { result, input })
            }
            Self::I32Clz_RS { result, input } => {
                encoder.encode(crate::op::I32Clz_RS { result, input })
            }
            Self::I32Clz_SR { result, input } => {
                encoder.encode(crate::op::I32Clz_SR { result, input })
            }
            Self::I32Clz_SS { result, input } => {
                encoder.encode(crate::op::I32Clz_SS { result, input })
            }
            Self::I64Clz_RR { result, input } => {
                encoder.encode(crate::op::I64Clz_RR { result, input })
            }
            Self::I64Clz_RS { result, input } => {
                encoder.encode(crate::op::I64Clz_RS { result, input })
            }
            Self::I64Clz_SR { result, input } => {
                encoder.encode(crate::op::I64Clz_SR { result, input })
            }
            Self::I64Clz_SS { result, input } => {
                encoder.encode(crate::op::I64Clz_SS { result, input })
            }
            Self::I32Ctz_RR { result, input } => {
                encoder.encode(crate::op::I32Ctz_RR { result, input })
            }
            Self::I32Ctz_RS { result, input } => {
                encoder.encode(crate::op::I32Ctz_RS { result, input })
            }
            Self::I32Ctz_SR { result, input } => {
                encoder.encode(crate::op::I32Ctz_SR { result, input })
            }
            Self::I32Ctz_SS { result, input } => {
                encoder.encode(crate::op::I32Ctz_SS { result, input })
            }
            Self::I64Ctz_RR { result, input } => {
                encoder.encode(crate::op::I64Ctz_RR { result, input })
            }
            Self::I64Ctz_RS { result, input } => {
                encoder.encode(crate::op::I64Ctz_RS { result, input })
            }
            Self::I64Ctz_SR { result, input } => {
                encoder.encode(crate::op::I64Ctz_SR { result, input })
            }
            Self::I64Ctz_SS { result, input } => {
                encoder.encode(crate::op::I64Ctz_SS { result, input })
            }
            Self::F32Abs_RR { result, input } => {
                encoder.encode(crate::op::F32Abs_RR { result, input })
            }
            Self::F32Abs_RS { result, input } => {
                encoder.encode(crate::op::F32Abs_RS { result, input })
            }
            Self::F32Abs_SR { result, input } => {
                encoder.encode(crate::op::F32Abs_SR { result, input })
            }
            Self::F32Abs_SS { result, input } => {
                encoder.encode(crate::op::F32Abs_SS { result, input })
            }
            Self::F64Abs_RR { result, input } => {
                encoder.encode(crate::op::F64Abs_RR { result, input })
            }
            Self::F64Abs_RS { result, input } => {
                encoder.encode(crate::op::F64Abs_RS { result, input })
            }
            Self::F64Abs_SR { result, input } => {
                encoder.encode(crate::op::F64Abs_SR { result, input })
            }
            Self::F64Abs_SS { result, input } => {
                encoder.encode(crate::op::F64Abs_SS { result, input })
            }
            Self::F32Neg_RR { result, input } => {
                encoder.encode(crate::op::F32Neg_RR { result, input })
            }
            Self::F32Neg_RS { result, input } => {
                encoder.encode(crate::op::F32Neg_RS { result, input })
            }
            Self::F32Neg_SR { result, input } => {
                encoder.encode(crate::op::F32Neg_SR { result, input })
            }
            Self::F32Neg_SS { result, input } => {
                encoder.encode(crate::op::F32Neg_SS { result, input })
            }
            Self::F64Neg_RR { result, input } => {
                encoder.encode(crate::op::F64Neg_RR { result, input })
            }
            Self::F64Neg_RS { result, input } => {
                encoder.encode(crate::op::F64Neg_RS { result, input })
            }
            Self::F64Neg_SR { result, input } => {
                encoder.encode(crate::op::F64Neg_SR { result, input })
            }
            Self::F64Neg_SS { result, input } => {
                encoder.encode(crate::op::F64Neg_SS { result, input })
            }
            Self::F32Ceil_RR { result, input } => {
                encoder.encode(crate::op::F32Ceil_RR { result, input })
            }
            Self::F32Ceil_RS { result, input } => {
                encoder.encode(crate::op::F32Ceil_RS { result, input })
            }
            Self::F32Ceil_SR { result, input } => {
                encoder.encode(crate::op::F32Ceil_SR { result, input })
            }
            Self::F32Ceil_SS { result, input } => {
                encoder.encode(crate::op::F32Ceil_SS { result, input })
            }
            Self::F64Ceil_RR { result, input } => {
                encoder.encode(crate::op::F64Ceil_RR { result, input })
            }
            Self::F64Ceil_RS { result, input } => {
                encoder.encode(crate::op::F64Ceil_RS { result, input })
            }
            Self::F64Ceil_SR { result, input } => {
                encoder.encode(crate::op::F64Ceil_SR { result, input })
            }
            Self::F64Ceil_SS { result, input } => {
                encoder.encode(crate::op::F64Ceil_SS { result, input })
            }
            Self::F32Floor_RR { result, input } => {
                encoder.encode(crate::op::F32Floor_RR { result, input })
            }
            Self::F32Floor_RS { result, input } => {
                encoder.encode(crate::op::F32Floor_RS { result, input })
            }
            Self::F32Floor_SR { result, input } => {
                encoder.encode(crate::op::F32Floor_SR { result, input })
            }
            Self::F32Floor_SS { result, input } => {
                encoder.encode(crate::op::F32Floor_SS { result, input })
            }
            Self::F64Floor_RR { result, input } => {
                encoder.encode(crate::op::F64Floor_RR { result, input })
            }
            Self::F64Floor_RS { result, input } => {
                encoder.encode(crate::op::F64Floor_RS { result, input })
            }
            Self::F64Floor_SR { result, input } => {
                encoder.encode(crate::op::F64Floor_SR { result, input })
            }
            Self::F64Floor_SS { result, input } => {
                encoder.encode(crate::op::F64Floor_SS { result, input })
            }
            Self::F32Trunc_RR { result, input } => {
                encoder.encode(crate::op::F32Trunc_RR { result, input })
            }
            Self::F32Trunc_RS { result, input } => {
                encoder.encode(crate::op::F32Trunc_RS { result, input })
            }
            Self::F32Trunc_SR { result, input } => {
                encoder.encode(crate::op::F32Trunc_SR { result, input })
            }
            Self::F32Trunc_SS { result, input } => {
                encoder.encode(crate::op::F32Trunc_SS { result, input })
            }
            Self::F64Trunc_RR { result, input } => {
                encoder.encode(crate::op::F64Trunc_RR { result, input })
            }
            Self::F64Trunc_RS { result, input } => {
                encoder.encode(crate::op::F64Trunc_RS { result, input })
            }
            Self::F64Trunc_SR { result, input } => {
                encoder.encode(crate::op::F64Trunc_SR { result, input })
            }
            Self::F64Trunc_SS { result, input } => {
                encoder.encode(crate::op::F64Trunc_SS { result, input })
            }
            Self::F32Nearest_RR { result, input } => {
                encoder.encode(crate::op::F32Nearest_RR { result, input })
            }
            Self::F32Nearest_RS { result, input } => {
                encoder.encode(crate::op::F32Nearest_RS { result, input })
            }
            Self::F32Nearest_SR { result, input } => {
                encoder.encode(crate::op::F32Nearest_SR { result, input })
            }
            Self::F32Nearest_SS { result, input } => {
                encoder.encode(crate::op::F32Nearest_SS { result, input })
            }
            Self::F64Nearest_RR { result, input } => {
                encoder.encode(crate::op::F64Nearest_RR { result, input })
            }
            Self::F64Nearest_RS { result, input } => {
                encoder.encode(crate::op::F64Nearest_RS { result, input })
            }
            Self::F64Nearest_SR { result, input } => {
                encoder.encode(crate::op::F64Nearest_SR { result, input })
            }
            Self::F64Nearest_SS { result, input } => {
                encoder.encode(crate::op::F64Nearest_SS { result, input })
            }
            Self::F32Sqrt_RR { result, input } => {
                encoder.encode(crate::op::F32Sqrt_RR { result, input })
            }
            Self::F32Sqrt_RS { result, input } => {
                encoder.encode(crate::op::F32Sqrt_RS { result, input })
            }
            Self::F32Sqrt_SR { result, input } => {
                encoder.encode(crate::op::F32Sqrt_SR { result, input })
            }
            Self::F32Sqrt_SS { result, input } => {
                encoder.encode(crate::op::F32Sqrt_SS { result, input })
            }
            Self::F64Sqrt_RR { result, input } => {
                encoder.encode(crate::op::F64Sqrt_RR { result, input })
            }
            Self::F64Sqrt_RS { result, input } => {
                encoder.encode(crate::op::F64Sqrt_RS { result, input })
            }
            Self::F64Sqrt_SR { result, input } => {
                encoder.encode(crate::op::F64Sqrt_SR { result, input })
            }
            Self::F64Sqrt_SS { result, input } => {
                encoder.encode(crate::op::F64Sqrt_SS { result, input })
            }
            Self::F32Demote_RR { result, input } => {
                encoder.encode(crate::op::F32Demote_RR { result, input })
            }
            Self::F32Demote_RS { result, input } => {
                encoder.encode(crate::op::F32Demote_RS { result, input })
            }
            Self::F32Demote_SR { result, input } => {
                encoder.encode(crate::op::F32Demote_SR { result, input })
            }
            Self::F32Demote_SS { result, input } => {
                encoder.encode(crate::op::F32Demote_SS { result, input })
            }
            Self::F64Promote_RR { result, input } => {
                encoder.encode(crate::op::F64Promote_RR { result, input })
            }
            Self::F64Promote_RS { result, input } => {
                encoder.encode(crate::op::F64Promote_RS { result, input })
            }
            Self::F64Promote_SR { result, input } => {
                encoder.encode(crate::op::F64Promote_SR { result, input })
            }
            Self::F64Promote_SS { result, input } => {
                encoder.encode(crate::op::F64Promote_SS { result, input })
            }
            Self::F32ConvertI32S_RR { result, input } => {
                encoder.encode(crate::op::F32ConvertI32S_RR { result, input })
            }
            Self::F32ConvertI32S_RS { result, input } => {
                encoder.encode(crate::op::F32ConvertI32S_RS { result, input })
            }
            Self::F32ConvertI32S_SR { result, input } => {
                encoder.encode(crate::op::F32ConvertI32S_SR { result, input })
            }
            Self::F32ConvertI32S_SS { result, input } => {
                encoder.encode(crate::op::F32ConvertI32S_SS { result, input })
            }
            Self::F32ConvertI32U_RR { result, input } => {
                encoder.encode(crate::op::F32ConvertI32U_RR { result, input })
            }
            Self::F32ConvertI32U_RS { result, input } => {
                encoder.encode(crate::op::F32ConvertI32U_RS { result, input })
            }
            Self::F32ConvertI32U_SR { result, input } => {
                encoder.encode(crate::op::F32ConvertI32U_SR { result, input })
            }
            Self::F32ConvertI32U_SS { result, input } => {
                encoder.encode(crate::op::F32ConvertI32U_SS { result, input })
            }
            Self::F32ConvertI64S_RR { result, input } => {
                encoder.encode(crate::op::F32ConvertI64S_RR { result, input })
            }
            Self::F32ConvertI64S_RS { result, input } => {
                encoder.encode(crate::op::F32ConvertI64S_RS { result, input })
            }
            Self::F32ConvertI64S_SR { result, input } => {
                encoder.encode(crate::op::F32ConvertI64S_SR { result, input })
            }
            Self::F32ConvertI64S_SS { result, input } => {
                encoder.encode(crate::op::F32ConvertI64S_SS { result, input })
            }
            Self::F32ConvertI64U_RR { result, input } => {
                encoder.encode(crate::op::F32ConvertI64U_RR { result, input })
            }
            Self::F32ConvertI64U_RS { result, input } => {
                encoder.encode(crate::op::F32ConvertI64U_RS { result, input })
            }
            Self::F32ConvertI64U_SR { result, input } => {
                encoder.encode(crate::op::F32ConvertI64U_SR { result, input })
            }
            Self::F32ConvertI64U_SS { result, input } => {
                encoder.encode(crate::op::F32ConvertI64U_SS { result, input })
            }
            Self::F64ConvertI32S_RR { result, input } => {
                encoder.encode(crate::op::F64ConvertI32S_RR { result, input })
            }
            Self::F64ConvertI32S_RS { result, input } => {
                encoder.encode(crate::op::F64ConvertI32S_RS { result, input })
            }
            Self::F64ConvertI32S_SR { result, input } => {
                encoder.encode(crate::op::F64ConvertI32S_SR { result, input })
            }
            Self::F64ConvertI32S_SS { result, input } => {
                encoder.encode(crate::op::F64ConvertI32S_SS { result, input })
            }
            Self::F64ConvertI32U_RR { result, input } => {
                encoder.encode(crate::op::F64ConvertI32U_RR { result, input })
            }
            Self::F64ConvertI32U_RS { result, input } => {
                encoder.encode(crate::op::F64ConvertI32U_RS { result, input })
            }
            Self::F64ConvertI32U_SR { result, input } => {
                encoder.encode(crate::op::F64ConvertI32U_SR { result, input })
            }
            Self::F64ConvertI32U_SS { result, input } => {
                encoder.encode(crate::op::F64ConvertI32U_SS { result, input })
            }
            Self::F64ConvertI64S_RR { result, input } => {
                encoder.encode(crate::op::F64ConvertI64S_RR { result, input })
            }
            Self::F64ConvertI64S_RS { result, input } => {
                encoder.encode(crate::op::F64ConvertI64S_RS { result, input })
            }
            Self::F64ConvertI64S_SR { result, input } => {
                encoder.encode(crate::op::F64ConvertI64S_SR { result, input })
            }
            Self::F64ConvertI64S_SS { result, input } => {
                encoder.encode(crate::op::F64ConvertI64S_SS { result, input })
            }
            Self::F64ConvertI64U_RR { result, input } => {
                encoder.encode(crate::op::F64ConvertI64U_RR { result, input })
            }
            Self::F64ConvertI64U_RS { result, input } => {
                encoder.encode(crate::op::F64ConvertI64U_RS { result, input })
            }
            Self::F64ConvertI64U_SR { result, input } => {
                encoder.encode(crate::op::F64ConvertI64U_SR { result, input })
            }
            Self::F64ConvertI64U_SS { result, input } => {
                encoder.encode(crate::op::F64ConvertI64U_SS { result, input })
            }
            Self::I32TruncF32S_RR { result, input } => {
                encoder.encode(crate::op::I32TruncF32S_RR { result, input })
            }
            Self::I32TruncF32S_RS { result, input } => {
                encoder.encode(crate::op::I32TruncF32S_RS { result, input })
            }
            Self::I32TruncF32S_SR { result, input } => {
                encoder.encode(crate::op::I32TruncF32S_SR { result, input })
            }
            Self::I32TruncF32S_SS { result, input } => {
                encoder.encode(crate::op::I32TruncF32S_SS { result, input })
            }
            Self::I32TruncF32U_RR { result, input } => {
                encoder.encode(crate::op::I32TruncF32U_RR { result, input })
            }
            Self::I32TruncF32U_RS { result, input } => {
                encoder.encode(crate::op::I32TruncF32U_RS { result, input })
            }
            Self::I32TruncF32U_SR { result, input } => {
                encoder.encode(crate::op::I32TruncF32U_SR { result, input })
            }
            Self::I32TruncF32U_SS { result, input } => {
                encoder.encode(crate::op::I32TruncF32U_SS { result, input })
            }
            Self::I32TruncF64S_RR { result, input } => {
                encoder.encode(crate::op::I32TruncF64S_RR { result, input })
            }
            Self::I32TruncF64S_RS { result, input } => {
                encoder.encode(crate::op::I32TruncF64S_RS { result, input })
            }
            Self::I32TruncF64S_SR { result, input } => {
                encoder.encode(crate::op::I32TruncF64S_SR { result, input })
            }
            Self::I32TruncF64S_SS { result, input } => {
                encoder.encode(crate::op::I32TruncF64S_SS { result, input })
            }
            Self::I32TruncF64U_RR { result, input } => {
                encoder.encode(crate::op::I32TruncF64U_RR { result, input })
            }
            Self::I32TruncF64U_RS { result, input } => {
                encoder.encode(crate::op::I32TruncF64U_RS { result, input })
            }
            Self::I32TruncF64U_SR { result, input } => {
                encoder.encode(crate::op::I32TruncF64U_SR { result, input })
            }
            Self::I32TruncF64U_SS { result, input } => {
                encoder.encode(crate::op::I32TruncF64U_SS { result, input })
            }
            Self::I64TruncF32S_RR { result, input } => {
                encoder.encode(crate::op::I64TruncF32S_RR { result, input })
            }
            Self::I64TruncF32S_RS { result, input } => {
                encoder.encode(crate::op::I64TruncF32S_RS { result, input })
            }
            Self::I64TruncF32S_SR { result, input } => {
                encoder.encode(crate::op::I64TruncF32S_SR { result, input })
            }
            Self::I64TruncF32S_SS { result, input } => {
                encoder.encode(crate::op::I64TruncF32S_SS { result, input })
            }
            Self::I64TruncF32U_RR { result, input } => {
                encoder.encode(crate::op::I64TruncF32U_RR { result, input })
            }
            Self::I64TruncF32U_RS { result, input } => {
                encoder.encode(crate::op::I64TruncF32U_RS { result, input })
            }
            Self::I64TruncF32U_SR { result, input } => {
                encoder.encode(crate::op::I64TruncF32U_SR { result, input })
            }
            Self::I64TruncF32U_SS { result, input } => {
                encoder.encode(crate::op::I64TruncF32U_SS { result, input })
            }
            Self::I64TruncF64S_RR { result, input } => {
                encoder.encode(crate::op::I64TruncF64S_RR { result, input })
            }
            Self::I64TruncF64S_RS { result, input } => {
                encoder.encode(crate::op::I64TruncF64S_RS { result, input })
            }
            Self::I64TruncF64S_SR { result, input } => {
                encoder.encode(crate::op::I64TruncF64S_SR { result, input })
            }
            Self::I64TruncF64S_SS { result, input } => {
                encoder.encode(crate::op::I64TruncF64S_SS { result, input })
            }
            Self::I64TruncF64U_RR { result, input } => {
                encoder.encode(crate::op::I64TruncF64U_RR { result, input })
            }
            Self::I64TruncF64U_RS { result, input } => {
                encoder.encode(crate::op::I64TruncF64U_RS { result, input })
            }
            Self::I64TruncF64U_SR { result, input } => {
                encoder.encode(crate::op::I64TruncF64U_SR { result, input })
            }
            Self::I64TruncF64U_SS { result, input } => {
                encoder.encode(crate::op::I64TruncF64U_SS { result, input })
            }
            Self::I32TruncSatF32S_RR { result, input } => {
                encoder.encode(crate::op::I32TruncSatF32S_RR { result, input })
            }
            Self::I32TruncSatF32S_RS { result, input } => {
                encoder.encode(crate::op::I32TruncSatF32S_RS { result, input })
            }
            Self::I32TruncSatF32S_SR { result, input } => {
                encoder.encode(crate::op::I32TruncSatF32S_SR { result, input })
            }
            Self::I32TruncSatF32S_SS { result, input } => {
                encoder.encode(crate::op::I32TruncSatF32S_SS { result, input })
            }
            Self::I32TruncSatF32U_RR { result, input } => {
                encoder.encode(crate::op::I32TruncSatF32U_RR { result, input })
            }
            Self::I32TruncSatF32U_RS { result, input } => {
                encoder.encode(crate::op::I32TruncSatF32U_RS { result, input })
            }
            Self::I32TruncSatF32U_SR { result, input } => {
                encoder.encode(crate::op::I32TruncSatF32U_SR { result, input })
            }
            Self::I32TruncSatF32U_SS { result, input } => {
                encoder.encode(crate::op::I32TruncSatF32U_SS { result, input })
            }
            Self::I32TruncSatF64S_RR { result, input } => {
                encoder.encode(crate::op::I32TruncSatF64S_RR { result, input })
            }
            Self::I32TruncSatF64S_RS { result, input } => {
                encoder.encode(crate::op::I32TruncSatF64S_RS { result, input })
            }
            Self::I32TruncSatF64S_SR { result, input } => {
                encoder.encode(crate::op::I32TruncSatF64S_SR { result, input })
            }
            Self::I32TruncSatF64S_SS { result, input } => {
                encoder.encode(crate::op::I32TruncSatF64S_SS { result, input })
            }
            Self::I32TruncSatF64U_RR { result, input } => {
                encoder.encode(crate::op::I32TruncSatF64U_RR { result, input })
            }
            Self::I32TruncSatF64U_RS { result, input } => {
                encoder.encode(crate::op::I32TruncSatF64U_RS { result, input })
            }
            Self::I32TruncSatF64U_SR { result, input } => {
                encoder.encode(crate::op::I32TruncSatF64U_SR { result, input })
            }
            Self::I32TruncSatF64U_SS { result, input } => {
                encoder.encode(crate::op::I32TruncSatF64U_SS { result, input })
            }
            Self::I64TruncSatF32S_RR { result, input } => {
                encoder.encode(crate::op::I64TruncSatF32S_RR { result, input })
            }
            Self::I64TruncSatF32S_RS { result, input } => {
                encoder.encode(crate::op::I64TruncSatF32S_RS { result, input })
            }
            Self::I64TruncSatF32S_SR { result, input } => {
                encoder.encode(crate::op::I64TruncSatF32S_SR { result, input })
            }
            Self::I64TruncSatF32S_SS { result, input } => {
                encoder.encode(crate::op::I64TruncSatF32S_SS { result, input })
            }
            Self::I64TruncSatF32U_RR { result, input } => {
                encoder.encode(crate::op::I64TruncSatF32U_RR { result, input })
            }
            Self::I64TruncSatF32U_RS { result, input } => {
                encoder.encode(crate::op::I64TruncSatF32U_RS { result, input })
            }
            Self::I64TruncSatF32U_SR { result, input } => {
                encoder.encode(crate::op::I64TruncSatF32U_SR { result, input })
            }
            Self::I64TruncSatF32U_SS { result, input } => {
                encoder.encode(crate::op::I64TruncSatF32U_SS { result, input })
            }
            Self::I64TruncSatF64S_RR { result, input } => {
                encoder.encode(crate::op::I64TruncSatF64S_RR { result, input })
            }
            Self::I64TruncSatF64S_RS { result, input } => {
                encoder.encode(crate::op::I64TruncSatF64S_RS { result, input })
            }
            Self::I64TruncSatF64S_SR { result, input } => {
                encoder.encode(crate::op::I64TruncSatF64S_SR { result, input })
            }
            Self::I64TruncSatF64S_SS { result, input } => {
                encoder.encode(crate::op::I64TruncSatF64S_SS { result, input })
            }
            Self::I64TruncSatF64U_RR { result, input } => {
                encoder.encode(crate::op::I64TruncSatF64U_RR { result, input })
            }
            Self::I64TruncSatF64U_RS { result, input } => {
                encoder.encode(crate::op::I64TruncSatF64U_RS { result, input })
            }
            Self::I64TruncSatF64U_SR { result, input } => {
                encoder.encode(crate::op::I64TruncSatF64U_SR { result, input })
            }
            Self::I64TruncSatF64U_SS { result, input } => {
                encoder.encode(crate::op::I64TruncSatF64U_SS { result, input })
            }
            Self::I32Extend8S_RR { result, input } => {
                encoder.encode(crate::op::I32Extend8S_RR { result, input })
            }
            Self::I32Extend8S_RS { result, input } => {
                encoder.encode(crate::op::I32Extend8S_RS { result, input })
            }
            Self::I32Extend8S_SR { result, input } => {
                encoder.encode(crate::op::I32Extend8S_SR { result, input })
            }
            Self::I32Extend8S_SS { result, input } => {
                encoder.encode(crate::op::I32Extend8S_SS { result, input })
            }
            Self::I32Extend16S_RR { result, input } => {
                encoder.encode(crate::op::I32Extend16S_RR { result, input })
            }
            Self::I32Extend16S_RS { result, input } => {
                encoder.encode(crate::op::I32Extend16S_RS { result, input })
            }
            Self::I32Extend16S_SR { result, input } => {
                encoder.encode(crate::op::I32Extend16S_SR { result, input })
            }
            Self::I32Extend16S_SS { result, input } => {
                encoder.encode(crate::op::I32Extend16S_SS { result, input })
            }
            Self::I64Extend8S_RR { result, input } => {
                encoder.encode(crate::op::I64Extend8S_RR { result, input })
            }
            Self::I64Extend8S_RS { result, input } => {
                encoder.encode(crate::op::I64Extend8S_RS { result, input })
            }
            Self::I64Extend8S_SR { result, input } => {
                encoder.encode(crate::op::I64Extend8S_SR { result, input })
            }
            Self::I64Extend8S_SS { result, input } => {
                encoder.encode(crate::op::I64Extend8S_SS { result, input })
            }
            Self::I64Extend16S_RR { result, input } => {
                encoder.encode(crate::op::I64Extend16S_RR { result, input })
            }
            Self::I64Extend16S_RS { result, input } => {
                encoder.encode(crate::op::I64Extend16S_RS { result, input })
            }
            Self::I64Extend16S_SR { result, input } => {
                encoder.encode(crate::op::I64Extend16S_SR { result, input })
            }
            Self::I64Extend16S_SS { result, input } => {
                encoder.encode(crate::op::I64Extend16S_SS { result, input })
            }
            Self::I64Extend32S_RR { result, input } => {
                encoder.encode(crate::op::I64Extend32S_RR { result, input })
            }
            Self::I64Extend32S_RS { result, input } => {
                encoder.encode(crate::op::I64Extend32S_RS { result, input })
            }
            Self::I64Extend32S_SR { result, input } => {
                encoder.encode(crate::op::I64Extend32S_SR { result, input })
            }
            Self::I64Extend32S_SS { result, input } => {
                encoder.encode(crate::op::I64Extend32S_SS { result, input })
            }
            Self::I32WrapI64_RR { result, input } => {
                encoder.encode(crate::op::I32WrapI64_RR { result, input })
            }
            Self::I32WrapI64_RS { result, input } => {
                encoder.encode(crate::op::I32WrapI64_RS { result, input })
            }
            Self::I32WrapI64_SR { result, input } => {
                encoder.encode(crate::op::I32WrapI64_SR { result, input })
            }
            Self::I32WrapI64_SS { result, input } => {
                encoder.encode(crate::op::I32WrapI64_SS { result, input })
            }
            Self::I32Add_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Add_RRS { result, lhs, rhs })
            }
            Self::I32Add_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Add_RRI { result, lhs, rhs })
            }
            Self::I32Add_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Add_RSS { result, lhs, rhs })
            }
            Self::I32Add_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Add_RSI { result, lhs, rhs })
            }
            Self::I32Add_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Add_SRS { result, lhs, rhs })
            }
            Self::I32Add_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Add_SRI { result, lhs, rhs })
            }
            Self::I32Add_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Add_SSS { result, lhs, rhs })
            }
            Self::I32Add_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Add_SSI { result, lhs, rhs })
            }
            Self::I64Add_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Add_RRS { result, lhs, rhs })
            }
            Self::I64Add_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Add_RRI { result, lhs, rhs })
            }
            Self::I64Add_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Add_RSS { result, lhs, rhs })
            }
            Self::I64Add_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Add_RSI { result, lhs, rhs })
            }
            Self::I64Add_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Add_SRS { result, lhs, rhs })
            }
            Self::I64Add_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Add_SRI { result, lhs, rhs })
            }
            Self::I64Add_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Add_SSS { result, lhs, rhs })
            }
            Self::I64Add_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Add_SSI { result, lhs, rhs })
            }
            Self::I32Mul_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Mul_RRS { result, lhs, rhs })
            }
            Self::I32Mul_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Mul_RRI { result, lhs, rhs })
            }
            Self::I32Mul_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Mul_RSS { result, lhs, rhs })
            }
            Self::I32Mul_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Mul_RSI { result, lhs, rhs })
            }
            Self::I32Mul_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Mul_SRS { result, lhs, rhs })
            }
            Self::I32Mul_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Mul_SRI { result, lhs, rhs })
            }
            Self::I32Mul_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Mul_SSS { result, lhs, rhs })
            }
            Self::I32Mul_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Mul_SSI { result, lhs, rhs })
            }
            Self::I64Mul_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Mul_RRS { result, lhs, rhs })
            }
            Self::I64Mul_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Mul_RRI { result, lhs, rhs })
            }
            Self::I64Mul_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Mul_RSS { result, lhs, rhs })
            }
            Self::I64Mul_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Mul_RSI { result, lhs, rhs })
            }
            Self::I64Mul_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Mul_SRS { result, lhs, rhs })
            }
            Self::I64Mul_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Mul_SRI { result, lhs, rhs })
            }
            Self::I64Mul_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Mul_SSS { result, lhs, rhs })
            }
            Self::I64Mul_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Mul_SSI { result, lhs, rhs })
            }
            Self::I32And_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32And_RRS { result, lhs, rhs })
            }
            Self::I32And_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32And_RRI { result, lhs, rhs })
            }
            Self::I32And_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32And_RSS { result, lhs, rhs })
            }
            Self::I32And_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32And_RSI { result, lhs, rhs })
            }
            Self::I32And_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32And_SRS { result, lhs, rhs })
            }
            Self::I32And_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32And_SRI { result, lhs, rhs })
            }
            Self::I32And_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32And_SSS { result, lhs, rhs })
            }
            Self::I32And_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32And_SSI { result, lhs, rhs })
            }
            Self::I64And_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64And_RRS { result, lhs, rhs })
            }
            Self::I64And_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64And_RRI { result, lhs, rhs })
            }
            Self::I64And_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64And_RSS { result, lhs, rhs })
            }
            Self::I64And_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64And_RSI { result, lhs, rhs })
            }
            Self::I64And_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64And_SRS { result, lhs, rhs })
            }
            Self::I64And_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64And_SRI { result, lhs, rhs })
            }
            Self::I64And_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64And_SSS { result, lhs, rhs })
            }
            Self::I64And_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64And_SSI { result, lhs, rhs })
            }
            Self::I32Or_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Or_RRS { result, lhs, rhs })
            }
            Self::I32Or_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Or_RRI { result, lhs, rhs })
            }
            Self::I32Or_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Or_RSS { result, lhs, rhs })
            }
            Self::I32Or_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Or_RSI { result, lhs, rhs })
            }
            Self::I32Or_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Or_SRS { result, lhs, rhs })
            }
            Self::I32Or_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Or_SRI { result, lhs, rhs })
            }
            Self::I32Or_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Or_SSS { result, lhs, rhs })
            }
            Self::I32Or_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Or_SSI { result, lhs, rhs })
            }
            Self::I64Or_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Or_RRS { result, lhs, rhs })
            }
            Self::I64Or_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Or_RRI { result, lhs, rhs })
            }
            Self::I64Or_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Or_RSS { result, lhs, rhs })
            }
            Self::I64Or_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Or_RSI { result, lhs, rhs })
            }
            Self::I64Or_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Or_SRS { result, lhs, rhs })
            }
            Self::I64Or_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Or_SRI { result, lhs, rhs })
            }
            Self::I64Or_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Or_SSS { result, lhs, rhs })
            }
            Self::I64Or_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Or_SSI { result, lhs, rhs })
            }
            Self::I32Xor_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Xor_RRS { result, lhs, rhs })
            }
            Self::I32Xor_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Xor_RRI { result, lhs, rhs })
            }
            Self::I32Xor_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Xor_RSS { result, lhs, rhs })
            }
            Self::I32Xor_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Xor_RSI { result, lhs, rhs })
            }
            Self::I32Xor_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Xor_SRS { result, lhs, rhs })
            }
            Self::I32Xor_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Xor_SRI { result, lhs, rhs })
            }
            Self::I32Xor_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Xor_SSS { result, lhs, rhs })
            }
            Self::I32Xor_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Xor_SSI { result, lhs, rhs })
            }
            Self::I64Xor_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Xor_RRS { result, lhs, rhs })
            }
            Self::I64Xor_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Xor_RRI { result, lhs, rhs })
            }
            Self::I64Xor_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Xor_RSS { result, lhs, rhs })
            }
            Self::I64Xor_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Xor_RSI { result, lhs, rhs })
            }
            Self::I64Xor_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Xor_SRS { result, lhs, rhs })
            }
            Self::I64Xor_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Xor_SRI { result, lhs, rhs })
            }
            Self::I64Xor_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Xor_SSS { result, lhs, rhs })
            }
            Self::I64Xor_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Xor_SSI { result, lhs, rhs })
            }
            Self::I32Eq_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Eq_RRS { result, lhs, rhs })
            }
            Self::I32Eq_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Eq_RRI { result, lhs, rhs })
            }
            Self::I32Eq_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Eq_RSS { result, lhs, rhs })
            }
            Self::I32Eq_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Eq_RSI { result, lhs, rhs })
            }
            Self::I32Eq_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Eq_SRS { result, lhs, rhs })
            }
            Self::I32Eq_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Eq_SRI { result, lhs, rhs })
            }
            Self::I32Eq_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Eq_SSS { result, lhs, rhs })
            }
            Self::I32Eq_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Eq_SSI { result, lhs, rhs })
            }
            Self::I64Eq_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Eq_RRS { result, lhs, rhs })
            }
            Self::I64Eq_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Eq_RRI { result, lhs, rhs })
            }
            Self::I64Eq_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Eq_RSS { result, lhs, rhs })
            }
            Self::I64Eq_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Eq_RSI { result, lhs, rhs })
            }
            Self::I64Eq_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Eq_SRS { result, lhs, rhs })
            }
            Self::I64Eq_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Eq_SRI { result, lhs, rhs })
            }
            Self::I64Eq_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Eq_SSS { result, lhs, rhs })
            }
            Self::I64Eq_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Eq_SSI { result, lhs, rhs })
            }
            Self::I32Ne_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Ne_RRS { result, lhs, rhs })
            }
            Self::I32Ne_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Ne_RRI { result, lhs, rhs })
            }
            Self::I32Ne_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Ne_RSS { result, lhs, rhs })
            }
            Self::I32Ne_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Ne_RSI { result, lhs, rhs })
            }
            Self::I32Ne_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Ne_SRS { result, lhs, rhs })
            }
            Self::I32Ne_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Ne_SRI { result, lhs, rhs })
            }
            Self::I32Ne_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Ne_SSS { result, lhs, rhs })
            }
            Self::I32Ne_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Ne_SSI { result, lhs, rhs })
            }
            Self::I64Ne_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Ne_RRS { result, lhs, rhs })
            }
            Self::I64Ne_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Ne_RRI { result, lhs, rhs })
            }
            Self::I64Ne_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Ne_RSS { result, lhs, rhs })
            }
            Self::I64Ne_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Ne_RSI { result, lhs, rhs })
            }
            Self::I64Ne_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Ne_SRS { result, lhs, rhs })
            }
            Self::I64Ne_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Ne_SRI { result, lhs, rhs })
            }
            Self::I64Ne_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Ne_SSS { result, lhs, rhs })
            }
            Self::I64Ne_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Ne_SSI { result, lhs, rhs })
            }
            Self::F32Add_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Add_RRS { result, lhs, rhs })
            }
            Self::F32Add_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Add_RRI { result, lhs, rhs })
            }
            Self::F32Add_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Add_RSS { result, lhs, rhs })
            }
            Self::F32Add_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Add_RSI { result, lhs, rhs })
            }
            Self::F32Add_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Add_SRS { result, lhs, rhs })
            }
            Self::F32Add_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Add_SRI { result, lhs, rhs })
            }
            Self::F32Add_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Add_SSS { result, lhs, rhs })
            }
            Self::F32Add_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Add_SSI { result, lhs, rhs })
            }
            Self::F64Add_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Add_RRS { result, lhs, rhs })
            }
            Self::F64Add_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Add_RRI { result, lhs, rhs })
            }
            Self::F64Add_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Add_RSS { result, lhs, rhs })
            }
            Self::F64Add_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Add_RSI { result, lhs, rhs })
            }
            Self::F64Add_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Add_SRS { result, lhs, rhs })
            }
            Self::F64Add_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Add_SRI { result, lhs, rhs })
            }
            Self::F64Add_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Add_SSS { result, lhs, rhs })
            }
            Self::F64Add_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Add_SSI { result, lhs, rhs })
            }
            Self::F32Mul_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Mul_RRS { result, lhs, rhs })
            }
            Self::F32Mul_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Mul_RRI { result, lhs, rhs })
            }
            Self::F32Mul_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Mul_RSS { result, lhs, rhs })
            }
            Self::F32Mul_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Mul_RSI { result, lhs, rhs })
            }
            Self::F32Mul_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Mul_SRS { result, lhs, rhs })
            }
            Self::F32Mul_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Mul_SRI { result, lhs, rhs })
            }
            Self::F32Mul_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Mul_SSS { result, lhs, rhs })
            }
            Self::F32Mul_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Mul_SSI { result, lhs, rhs })
            }
            Self::F64Mul_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Mul_RRS { result, lhs, rhs })
            }
            Self::F64Mul_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Mul_RRI { result, lhs, rhs })
            }
            Self::F64Mul_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Mul_RSS { result, lhs, rhs })
            }
            Self::F64Mul_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Mul_RSI { result, lhs, rhs })
            }
            Self::F64Mul_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Mul_SRS { result, lhs, rhs })
            }
            Self::F64Mul_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Mul_SRI { result, lhs, rhs })
            }
            Self::F64Mul_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Mul_SSS { result, lhs, rhs })
            }
            Self::F64Mul_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Mul_SSI { result, lhs, rhs })
            }
            Self::F32Eq_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Eq_RRS { result, lhs, rhs })
            }
            Self::F32Eq_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Eq_RRI { result, lhs, rhs })
            }
            Self::F32Eq_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Eq_RSS { result, lhs, rhs })
            }
            Self::F32Eq_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Eq_RSI { result, lhs, rhs })
            }
            Self::F32Eq_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Eq_SRS { result, lhs, rhs })
            }
            Self::F32Eq_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Eq_SRI { result, lhs, rhs })
            }
            Self::F32Eq_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Eq_SSS { result, lhs, rhs })
            }
            Self::F32Eq_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Eq_SSI { result, lhs, rhs })
            }
            Self::F64Eq_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Eq_RRS { result, lhs, rhs })
            }
            Self::F64Eq_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Eq_RRI { result, lhs, rhs })
            }
            Self::F64Eq_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Eq_RSS { result, lhs, rhs })
            }
            Self::F64Eq_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Eq_RSI { result, lhs, rhs })
            }
            Self::F64Eq_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Eq_SRS { result, lhs, rhs })
            }
            Self::F64Eq_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Eq_SRI { result, lhs, rhs })
            }
            Self::F64Eq_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Eq_SSS { result, lhs, rhs })
            }
            Self::F64Eq_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Eq_SSI { result, lhs, rhs })
            }
            Self::F32Ne_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Ne_RRS { result, lhs, rhs })
            }
            Self::F32Ne_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Ne_RRI { result, lhs, rhs })
            }
            Self::F32Ne_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Ne_RSS { result, lhs, rhs })
            }
            Self::F32Ne_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Ne_RSI { result, lhs, rhs })
            }
            Self::F32Ne_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Ne_SRS { result, lhs, rhs })
            }
            Self::F32Ne_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Ne_SRI { result, lhs, rhs })
            }
            Self::F32Ne_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Ne_SSS { result, lhs, rhs })
            }
            Self::F32Ne_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Ne_SSI { result, lhs, rhs })
            }
            Self::F64Ne_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Ne_RRS { result, lhs, rhs })
            }
            Self::F64Ne_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Ne_RRI { result, lhs, rhs })
            }
            Self::F64Ne_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Ne_RSS { result, lhs, rhs })
            }
            Self::F64Ne_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Ne_RSI { result, lhs, rhs })
            }
            Self::F64Ne_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Ne_SRS { result, lhs, rhs })
            }
            Self::F64Ne_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Ne_SRI { result, lhs, rhs })
            }
            Self::F64Ne_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Ne_SSS { result, lhs, rhs })
            }
            Self::F64Ne_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Ne_SSI { result, lhs, rhs })
            }
            Self::F32Min_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Min_RRS { result, lhs, rhs })
            }
            Self::F32Min_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Min_RRI { result, lhs, rhs })
            }
            Self::F32Min_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Min_RSS { result, lhs, rhs })
            }
            Self::F32Min_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Min_RSI { result, lhs, rhs })
            }
            Self::F32Min_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Min_SRS { result, lhs, rhs })
            }
            Self::F32Min_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Min_SRI { result, lhs, rhs })
            }
            Self::F32Min_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Min_SSS { result, lhs, rhs })
            }
            Self::F32Min_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Min_SSI { result, lhs, rhs })
            }
            Self::F64Min_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Min_RRS { result, lhs, rhs })
            }
            Self::F64Min_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Min_RRI { result, lhs, rhs })
            }
            Self::F64Min_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Min_RSS { result, lhs, rhs })
            }
            Self::F64Min_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Min_RSI { result, lhs, rhs })
            }
            Self::F64Min_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Min_SRS { result, lhs, rhs })
            }
            Self::F64Min_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Min_SRI { result, lhs, rhs })
            }
            Self::F64Min_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Min_SSS { result, lhs, rhs })
            }
            Self::F64Min_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Min_SSI { result, lhs, rhs })
            }
            Self::F32Max_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Max_RRS { result, lhs, rhs })
            }
            Self::F32Max_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Max_RRI { result, lhs, rhs })
            }
            Self::F32Max_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Max_RSS { result, lhs, rhs })
            }
            Self::F32Max_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Max_RSI { result, lhs, rhs })
            }
            Self::F32Max_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Max_SRS { result, lhs, rhs })
            }
            Self::F32Max_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Max_SRI { result, lhs, rhs })
            }
            Self::F32Max_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Max_SSS { result, lhs, rhs })
            }
            Self::F32Max_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Max_SSI { result, lhs, rhs })
            }
            Self::F64Max_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Max_RRS { result, lhs, rhs })
            }
            Self::F64Max_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Max_RRI { result, lhs, rhs })
            }
            Self::F64Max_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Max_RSS { result, lhs, rhs })
            }
            Self::F64Max_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Max_RSI { result, lhs, rhs })
            }
            Self::F64Max_SRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Max_SRS { result, lhs, rhs })
            }
            Self::F64Max_SRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Max_SRI { result, lhs, rhs })
            }
            Self::F64Max_SSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Max_SSS { result, lhs, rhs })
            }
            Self::F64Max_SSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Max_SSI { result, lhs, rhs })
            }
            Self::I32Sub_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Sub_RRS { result, lhs, rhs })
            }
            Self::I32Sub_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Sub_RRI { result, lhs, rhs })
            }
            Self::I32Sub_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Sub_RSR { result, lhs, rhs })
            }
            Self::I32Sub_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Sub_RSS { result, lhs, rhs })
            }
            Self::I32Sub_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Sub_RSI { result, lhs, rhs })
            }
            Self::I32Sub_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Sub_RIR { result, lhs, rhs })
            }
            Self::I32Sub_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Sub_RIS { result, lhs, rhs })
            }
            Self::I64Sub_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Sub_RRS { result, lhs, rhs })
            }
            Self::I64Sub_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Sub_RRI { result, lhs, rhs })
            }
            Self::I64Sub_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Sub_RSR { result, lhs, rhs })
            }
            Self::I64Sub_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Sub_RSS { result, lhs, rhs })
            }
            Self::I64Sub_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Sub_RSI { result, lhs, rhs })
            }
            Self::I64Sub_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Sub_RIR { result, lhs, rhs })
            }
            Self::I64Sub_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Sub_RIS { result, lhs, rhs })
            }
            Self::I32LtS_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LtS_RRS { result, lhs, rhs })
            }
            Self::I32LtS_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LtS_RRI { result, lhs, rhs })
            }
            Self::I32LtS_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LtS_RSR { result, lhs, rhs })
            }
            Self::I32LtS_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LtS_RSS { result, lhs, rhs })
            }
            Self::I32LtS_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LtS_RSI { result, lhs, rhs })
            }
            Self::I32LtS_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LtS_RIR { result, lhs, rhs })
            }
            Self::I32LtS_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LtS_RIS { result, lhs, rhs })
            }
            Self::I64LtS_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LtS_RRS { result, lhs, rhs })
            }
            Self::I64LtS_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LtS_RRI { result, lhs, rhs })
            }
            Self::I64LtS_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LtS_RSR { result, lhs, rhs })
            }
            Self::I64LtS_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LtS_RSS { result, lhs, rhs })
            }
            Self::I64LtS_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LtS_RSI { result, lhs, rhs })
            }
            Self::I64LtS_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LtS_RIR { result, lhs, rhs })
            }
            Self::I64LtS_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LtS_RIS { result, lhs, rhs })
            }
            Self::I32LtU_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LtU_RRS { result, lhs, rhs })
            }
            Self::I32LtU_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LtU_RRI { result, lhs, rhs })
            }
            Self::I32LtU_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LtU_RSR { result, lhs, rhs })
            }
            Self::I32LtU_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LtU_RSS { result, lhs, rhs })
            }
            Self::I32LtU_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LtU_RSI { result, lhs, rhs })
            }
            Self::I32LtU_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LtU_RIR { result, lhs, rhs })
            }
            Self::I32LtU_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LtU_RIS { result, lhs, rhs })
            }
            Self::I64LtU_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LtU_RRS { result, lhs, rhs })
            }
            Self::I64LtU_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LtU_RRI { result, lhs, rhs })
            }
            Self::I64LtU_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LtU_RSR { result, lhs, rhs })
            }
            Self::I64LtU_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LtU_RSS { result, lhs, rhs })
            }
            Self::I64LtU_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LtU_RSI { result, lhs, rhs })
            }
            Self::I64LtU_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LtU_RIR { result, lhs, rhs })
            }
            Self::I64LtU_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LtU_RIS { result, lhs, rhs })
            }
            Self::I32LeS_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LeS_RRS { result, lhs, rhs })
            }
            Self::I32LeS_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LeS_RRI { result, lhs, rhs })
            }
            Self::I32LeS_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LeS_RSR { result, lhs, rhs })
            }
            Self::I32LeS_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LeS_RSS { result, lhs, rhs })
            }
            Self::I32LeS_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LeS_RSI { result, lhs, rhs })
            }
            Self::I32LeS_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LeS_RIR { result, lhs, rhs })
            }
            Self::I32LeS_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LeS_RIS { result, lhs, rhs })
            }
            Self::I64LeS_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LeS_RRS { result, lhs, rhs })
            }
            Self::I64LeS_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LeS_RRI { result, lhs, rhs })
            }
            Self::I64LeS_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LeS_RSR { result, lhs, rhs })
            }
            Self::I64LeS_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LeS_RSS { result, lhs, rhs })
            }
            Self::I64LeS_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LeS_RSI { result, lhs, rhs })
            }
            Self::I64LeS_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LeS_RIR { result, lhs, rhs })
            }
            Self::I64LeS_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LeS_RIS { result, lhs, rhs })
            }
            Self::I32LeU_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LeU_RRS { result, lhs, rhs })
            }
            Self::I32LeU_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LeU_RRI { result, lhs, rhs })
            }
            Self::I32LeU_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LeU_RSR { result, lhs, rhs })
            }
            Self::I32LeU_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LeU_RSS { result, lhs, rhs })
            }
            Self::I32LeU_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LeU_RSI { result, lhs, rhs })
            }
            Self::I32LeU_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LeU_RIR { result, lhs, rhs })
            }
            Self::I32LeU_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32LeU_RIS { result, lhs, rhs })
            }
            Self::I64LeU_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LeU_RRS { result, lhs, rhs })
            }
            Self::I64LeU_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LeU_RRI { result, lhs, rhs })
            }
            Self::I64LeU_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LeU_RSR { result, lhs, rhs })
            }
            Self::I64LeU_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LeU_RSS { result, lhs, rhs })
            }
            Self::I64LeU_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LeU_RSI { result, lhs, rhs })
            }
            Self::I64LeU_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LeU_RIR { result, lhs, rhs })
            }
            Self::I64LeU_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64LeU_RIS { result, lhs, rhs })
            }
            Self::I32DivS_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32DivS_RRS { result, lhs, rhs })
            }
            Self::I32DivS_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32DivS_RRI { result, lhs, rhs })
            }
            Self::I32DivS_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32DivS_RSR { result, lhs, rhs })
            }
            Self::I32DivS_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32DivS_RSS { result, lhs, rhs })
            }
            Self::I32DivS_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32DivS_RSI { result, lhs, rhs })
            }
            Self::I32DivS_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32DivS_RIR { result, lhs, rhs })
            }
            Self::I32DivS_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32DivS_RIS { result, lhs, rhs })
            }
            Self::I64DivS_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64DivS_RRS { result, lhs, rhs })
            }
            Self::I64DivS_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64DivS_RRI { result, lhs, rhs })
            }
            Self::I64DivS_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64DivS_RSR { result, lhs, rhs })
            }
            Self::I64DivS_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64DivS_RSS { result, lhs, rhs })
            }
            Self::I64DivS_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64DivS_RSI { result, lhs, rhs })
            }
            Self::I64DivS_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64DivS_RIR { result, lhs, rhs })
            }
            Self::I64DivS_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64DivS_RIS { result, lhs, rhs })
            }
            Self::I32DivU_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32DivU_RRS { result, lhs, rhs })
            }
            Self::I32DivU_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32DivU_RRI { result, lhs, rhs })
            }
            Self::I32DivU_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32DivU_RSR { result, lhs, rhs })
            }
            Self::I32DivU_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32DivU_RSS { result, lhs, rhs })
            }
            Self::I32DivU_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32DivU_RSI { result, lhs, rhs })
            }
            Self::I32DivU_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32DivU_RIR { result, lhs, rhs })
            }
            Self::I32DivU_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32DivU_RIS { result, lhs, rhs })
            }
            Self::I64DivU_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64DivU_RRS { result, lhs, rhs })
            }
            Self::I64DivU_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64DivU_RRI { result, lhs, rhs })
            }
            Self::I64DivU_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64DivU_RSR { result, lhs, rhs })
            }
            Self::I64DivU_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64DivU_RSS { result, lhs, rhs })
            }
            Self::I64DivU_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64DivU_RSI { result, lhs, rhs })
            }
            Self::I64DivU_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64DivU_RIR { result, lhs, rhs })
            }
            Self::I64DivU_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64DivU_RIS { result, lhs, rhs })
            }
            Self::I32RemS_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32RemS_RRS { result, lhs, rhs })
            }
            Self::I32RemS_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32RemS_RRI { result, lhs, rhs })
            }
            Self::I32RemS_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32RemS_RSR { result, lhs, rhs })
            }
            Self::I32RemS_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32RemS_RSS { result, lhs, rhs })
            }
            Self::I32RemS_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32RemS_RSI { result, lhs, rhs })
            }
            Self::I32RemS_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32RemS_RIR { result, lhs, rhs })
            }
            Self::I32RemS_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32RemS_RIS { result, lhs, rhs })
            }
            Self::I64RemS_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64RemS_RRS { result, lhs, rhs })
            }
            Self::I64RemS_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64RemS_RRI { result, lhs, rhs })
            }
            Self::I64RemS_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64RemS_RSR { result, lhs, rhs })
            }
            Self::I64RemS_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64RemS_RSS { result, lhs, rhs })
            }
            Self::I64RemS_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64RemS_RSI { result, lhs, rhs })
            }
            Self::I64RemS_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64RemS_RIR { result, lhs, rhs })
            }
            Self::I64RemS_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64RemS_RIS { result, lhs, rhs })
            }
            Self::I32RemU_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32RemU_RRS { result, lhs, rhs })
            }
            Self::I32RemU_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32RemU_RRI { result, lhs, rhs })
            }
            Self::I32RemU_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32RemU_RSR { result, lhs, rhs })
            }
            Self::I32RemU_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32RemU_RSS { result, lhs, rhs })
            }
            Self::I32RemU_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32RemU_RSI { result, lhs, rhs })
            }
            Self::I32RemU_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32RemU_RIR { result, lhs, rhs })
            }
            Self::I32RemU_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32RemU_RIS { result, lhs, rhs })
            }
            Self::I64RemU_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64RemU_RRS { result, lhs, rhs })
            }
            Self::I64RemU_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64RemU_RRI { result, lhs, rhs })
            }
            Self::I64RemU_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64RemU_RSR { result, lhs, rhs })
            }
            Self::I64RemU_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64RemU_RSS { result, lhs, rhs })
            }
            Self::I64RemU_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64RemU_RSI { result, lhs, rhs })
            }
            Self::I64RemU_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64RemU_RIR { result, lhs, rhs })
            }
            Self::I64RemU_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64RemU_RIS { result, lhs, rhs })
            }
            Self::I32Shl_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Shl_RRS { result, lhs, rhs })
            }
            Self::I32Shl_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Shl_RRI { result, lhs, rhs })
            }
            Self::I32Shl_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Shl_RSR { result, lhs, rhs })
            }
            Self::I32Shl_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Shl_RSS { result, lhs, rhs })
            }
            Self::I32Shl_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Shl_RSI { result, lhs, rhs })
            }
            Self::I32Shl_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Shl_RIR { result, lhs, rhs })
            }
            Self::I32Shl_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Shl_RIS { result, lhs, rhs })
            }
            Self::I64Shl_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Shl_RRS { result, lhs, rhs })
            }
            Self::I64Shl_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Shl_RRI { result, lhs, rhs })
            }
            Self::I64Shl_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Shl_RSR { result, lhs, rhs })
            }
            Self::I64Shl_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Shl_RSS { result, lhs, rhs })
            }
            Self::I64Shl_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Shl_RSI { result, lhs, rhs })
            }
            Self::I64Shl_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Shl_RIR { result, lhs, rhs })
            }
            Self::I64Shl_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Shl_RIS { result, lhs, rhs })
            }
            Self::I32ShrS_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32ShrS_RRS { result, lhs, rhs })
            }
            Self::I32ShrS_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32ShrS_RRI { result, lhs, rhs })
            }
            Self::I32ShrS_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32ShrS_RSR { result, lhs, rhs })
            }
            Self::I32ShrS_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32ShrS_RSS { result, lhs, rhs })
            }
            Self::I32ShrS_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32ShrS_RSI { result, lhs, rhs })
            }
            Self::I32ShrS_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32ShrS_RIR { result, lhs, rhs })
            }
            Self::I32ShrS_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32ShrS_RIS { result, lhs, rhs })
            }
            Self::I64ShrS_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64ShrS_RRS { result, lhs, rhs })
            }
            Self::I64ShrS_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64ShrS_RRI { result, lhs, rhs })
            }
            Self::I64ShrS_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64ShrS_RSR { result, lhs, rhs })
            }
            Self::I64ShrS_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64ShrS_RSS { result, lhs, rhs })
            }
            Self::I64ShrS_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64ShrS_RSI { result, lhs, rhs })
            }
            Self::I64ShrS_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64ShrS_RIR { result, lhs, rhs })
            }
            Self::I64ShrS_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64ShrS_RIS { result, lhs, rhs })
            }
            Self::I32ShrU_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32ShrU_RRS { result, lhs, rhs })
            }
            Self::I32ShrU_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32ShrU_RRI { result, lhs, rhs })
            }
            Self::I32ShrU_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32ShrU_RSR { result, lhs, rhs })
            }
            Self::I32ShrU_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32ShrU_RSS { result, lhs, rhs })
            }
            Self::I32ShrU_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32ShrU_RSI { result, lhs, rhs })
            }
            Self::I32ShrU_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32ShrU_RIR { result, lhs, rhs })
            }
            Self::I32ShrU_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32ShrU_RIS { result, lhs, rhs })
            }
            Self::I64ShrU_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64ShrU_RRS { result, lhs, rhs })
            }
            Self::I64ShrU_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64ShrU_RRI { result, lhs, rhs })
            }
            Self::I64ShrU_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64ShrU_RSR { result, lhs, rhs })
            }
            Self::I64ShrU_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64ShrU_RSS { result, lhs, rhs })
            }
            Self::I64ShrU_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64ShrU_RSI { result, lhs, rhs })
            }
            Self::I64ShrU_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64ShrU_RIR { result, lhs, rhs })
            }
            Self::I64ShrU_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64ShrU_RIS { result, lhs, rhs })
            }
            Self::I32Rotl_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Rotl_RRS { result, lhs, rhs })
            }
            Self::I32Rotl_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Rotl_RRI { result, lhs, rhs })
            }
            Self::I32Rotl_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Rotl_RSR { result, lhs, rhs })
            }
            Self::I32Rotl_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Rotl_RSS { result, lhs, rhs })
            }
            Self::I32Rotl_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Rotl_RSI { result, lhs, rhs })
            }
            Self::I32Rotl_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Rotl_RIR { result, lhs, rhs })
            }
            Self::I32Rotl_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Rotl_RIS { result, lhs, rhs })
            }
            Self::I64Rotl_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Rotl_RRS { result, lhs, rhs })
            }
            Self::I64Rotl_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Rotl_RRI { result, lhs, rhs })
            }
            Self::I64Rotl_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Rotl_RSR { result, lhs, rhs })
            }
            Self::I64Rotl_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Rotl_RSS { result, lhs, rhs })
            }
            Self::I64Rotl_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Rotl_RSI { result, lhs, rhs })
            }
            Self::I64Rotl_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Rotl_RIR { result, lhs, rhs })
            }
            Self::I64Rotl_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Rotl_RIS { result, lhs, rhs })
            }
            Self::I32Rotr_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Rotr_RRS { result, lhs, rhs })
            }
            Self::I32Rotr_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Rotr_RRI { result, lhs, rhs })
            }
            Self::I32Rotr_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Rotr_RSR { result, lhs, rhs })
            }
            Self::I32Rotr_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Rotr_RSS { result, lhs, rhs })
            }
            Self::I32Rotr_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Rotr_RSI { result, lhs, rhs })
            }
            Self::I32Rotr_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Rotr_RIR { result, lhs, rhs })
            }
            Self::I32Rotr_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I32Rotr_RIS { result, lhs, rhs })
            }
            Self::I64Rotr_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Rotr_RRS { result, lhs, rhs })
            }
            Self::I64Rotr_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Rotr_RRI { result, lhs, rhs })
            }
            Self::I64Rotr_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Rotr_RSR { result, lhs, rhs })
            }
            Self::I64Rotr_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Rotr_RSS { result, lhs, rhs })
            }
            Self::I64Rotr_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Rotr_RSI { result, lhs, rhs })
            }
            Self::I64Rotr_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Rotr_RIR { result, lhs, rhs })
            }
            Self::I64Rotr_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::I64Rotr_RIS { result, lhs, rhs })
            }
            Self::F32Sub_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Sub_RRS { result, lhs, rhs })
            }
            Self::F32Sub_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Sub_RRI { result, lhs, rhs })
            }
            Self::F32Sub_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Sub_RSR { result, lhs, rhs })
            }
            Self::F32Sub_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Sub_RSS { result, lhs, rhs })
            }
            Self::F32Sub_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Sub_RSI { result, lhs, rhs })
            }
            Self::F32Sub_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Sub_RIR { result, lhs, rhs })
            }
            Self::F32Sub_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Sub_RIS { result, lhs, rhs })
            }
            Self::F64Sub_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Sub_RRS { result, lhs, rhs })
            }
            Self::F64Sub_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Sub_RRI { result, lhs, rhs })
            }
            Self::F64Sub_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Sub_RSR { result, lhs, rhs })
            }
            Self::F64Sub_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Sub_RSS { result, lhs, rhs })
            }
            Self::F64Sub_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Sub_RSI { result, lhs, rhs })
            }
            Self::F64Sub_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Sub_RIR { result, lhs, rhs })
            }
            Self::F64Sub_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Sub_RIS { result, lhs, rhs })
            }
            Self::F32Div_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Div_RRS { result, lhs, rhs })
            }
            Self::F32Div_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Div_RRI { result, lhs, rhs })
            }
            Self::F32Div_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Div_RSR { result, lhs, rhs })
            }
            Self::F32Div_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Div_RSS { result, lhs, rhs })
            }
            Self::F32Div_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Div_RSI { result, lhs, rhs })
            }
            Self::F32Div_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Div_RIR { result, lhs, rhs })
            }
            Self::F32Div_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Div_RIS { result, lhs, rhs })
            }
            Self::F64Div_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Div_RRS { result, lhs, rhs })
            }
            Self::F64Div_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Div_RRI { result, lhs, rhs })
            }
            Self::F64Div_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Div_RSR { result, lhs, rhs })
            }
            Self::F64Div_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Div_RSS { result, lhs, rhs })
            }
            Self::F64Div_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Div_RSI { result, lhs, rhs })
            }
            Self::F64Div_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Div_RIR { result, lhs, rhs })
            }
            Self::F64Div_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Div_RIS { result, lhs, rhs })
            }
            Self::F32Copysign_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Copysign_RRS { result, lhs, rhs })
            }
            Self::F32Copysign_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Copysign_RRI { result, lhs, rhs })
            }
            Self::F32Copysign_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Copysign_RSR { result, lhs, rhs })
            }
            Self::F32Copysign_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Copysign_RSS { result, lhs, rhs })
            }
            Self::F32Copysign_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Copysign_RSI { result, lhs, rhs })
            }
            Self::F32Copysign_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Copysign_RIR { result, lhs, rhs })
            }
            Self::F32Copysign_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::F32Copysign_RIS { result, lhs, rhs })
            }
            Self::F64Copysign_RRS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Copysign_RRS { result, lhs, rhs })
            }
            Self::F64Copysign_RRI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Copysign_RRI { result, lhs, rhs })
            }
            Self::F64Copysign_RSR { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Copysign_RSR { result, lhs, rhs })
            }
            Self::F64Copysign_RSS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Copysign_RSS { result, lhs, rhs })
            }
            Self::F64Copysign_RSI { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Copysign_RSI { result, lhs, rhs })
            }
            Self::F64Copysign_RIR { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Copysign_RIR { result, lhs, rhs })
            }
            Self::F64Copysign_RIS { result, lhs, rhs } => {
                encoder.encode(crate::op::F64Copysign_RIS { result, lhs, rhs })
            }
            Self::I32Load_RR { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I32Load_RR { result, ptr, offset, memory })
            }
            Self::I32Load_RS { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I32Load_RS { result, ptr, offset, memory })
            }
            Self::I32Load_RI { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I32Load_RI { result, ptr, offset, memory })
            }
            Self::I32LoadMem0_RR { result, ptr, offset } => {
                encoder.encode(crate::op::I32LoadMem0_RR { result, ptr, offset })
            }
            Self::I32LoadMem0_RS { result, ptr, offset } => {
                encoder.encode(crate::op::I32LoadMem0_RS { result, ptr, offset })
            }
            Self::I32LoadMem0_RI { result, ptr, offset } => {
                encoder.encode(crate::op::I32LoadMem0_RI { result, ptr, offset })
            }
            Self::I32LoadMem0_SR { result, ptr, offset } => {
                encoder.encode(crate::op::I32LoadMem0_SR { result, ptr, offset })
            }
            Self::I32LoadMem0_SS { result, ptr, offset } => {
                encoder.encode(crate::op::I32LoadMem0_SS { result, ptr, offset })
            }
            Self::I32LoadMem0_SI { result, ptr, offset } => {
                encoder.encode(crate::op::I32LoadMem0_SI { result, ptr, offset })
            }
            Self::I64Load_RR { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load_RR { result, ptr, offset, memory })
            }
            Self::I64Load_RS { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load_RS { result, ptr, offset, memory })
            }
            Self::I64Load_RI { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load_RI { result, ptr, offset, memory })
            }
            Self::I64LoadMem0_RR { result, ptr, offset } => {
                encoder.encode(crate::op::I64LoadMem0_RR { result, ptr, offset })
            }
            Self::I64LoadMem0_RS { result, ptr, offset } => {
                encoder.encode(crate::op::I64LoadMem0_RS { result, ptr, offset })
            }
            Self::I64LoadMem0_RI { result, ptr, offset } => {
                encoder.encode(crate::op::I64LoadMem0_RI { result, ptr, offset })
            }
            Self::I64LoadMem0_SR { result, ptr, offset } => {
                encoder.encode(crate::op::I64LoadMem0_SR { result, ptr, offset })
            }
            Self::I64LoadMem0_SS { result, ptr, offset } => {
                encoder.encode(crate::op::I64LoadMem0_SS { result, ptr, offset })
            }
            Self::I64LoadMem0_SI { result, ptr, offset } => {
                encoder.encode(crate::op::I64LoadMem0_SI { result, ptr, offset })
            }
            Self::F32Load_RR { result, ptr, offset, memory } => {
                encoder.encode(crate::op::F32Load_RR { result, ptr, offset, memory })
            }
            Self::F32Load_RS { result, ptr, offset, memory } => {
                encoder.encode(crate::op::F32Load_RS { result, ptr, offset, memory })
            }
            Self::F32Load_RI { result, ptr, offset, memory } => {
                encoder.encode(crate::op::F32Load_RI { result, ptr, offset, memory })
            }
            Self::F32LoadMem0_RR { result, ptr, offset } => {
                encoder.encode(crate::op::F32LoadMem0_RR { result, ptr, offset })
            }
            Self::F32LoadMem0_RS { result, ptr, offset } => {
                encoder.encode(crate::op::F32LoadMem0_RS { result, ptr, offset })
            }
            Self::F32LoadMem0_RI { result, ptr, offset } => {
                encoder.encode(crate::op::F32LoadMem0_RI { result, ptr, offset })
            }
            Self::F32LoadMem0_SR { result, ptr, offset } => {
                encoder.encode(crate::op::F32LoadMem0_SR { result, ptr, offset })
            }
            Self::F32LoadMem0_SS { result, ptr, offset } => {
                encoder.encode(crate::op::F32LoadMem0_SS { result, ptr, offset })
            }
            Self::F32LoadMem0_SI { result, ptr, offset } => {
                encoder.encode(crate::op::F32LoadMem0_SI { result, ptr, offset })
            }
            Self::F64Load_RR { result, ptr, offset, memory } => {
                encoder.encode(crate::op::F64Load_RR { result, ptr, offset, memory })
            }
            Self::F64Load_RS { result, ptr, offset, memory } => {
                encoder.encode(crate::op::F64Load_RS { result, ptr, offset, memory })
            }
            Self::F64Load_RI { result, ptr, offset, memory } => {
                encoder.encode(crate::op::F64Load_RI { result, ptr, offset, memory })
            }
            Self::F64LoadMem0_RR { result, ptr, offset } => {
                encoder.encode(crate::op::F64LoadMem0_RR { result, ptr, offset })
            }
            Self::F64LoadMem0_RS { result, ptr, offset } => {
                encoder.encode(crate::op::F64LoadMem0_RS { result, ptr, offset })
            }
            Self::F64LoadMem0_RI { result, ptr, offset } => {
                encoder.encode(crate::op::F64LoadMem0_RI { result, ptr, offset })
            }
            Self::F64LoadMem0_SR { result, ptr, offset } => {
                encoder.encode(crate::op::F64LoadMem0_SR { result, ptr, offset })
            }
            Self::F64LoadMem0_SS { result, ptr, offset } => {
                encoder.encode(crate::op::F64LoadMem0_SS { result, ptr, offset })
            }
            Self::F64LoadMem0_SI { result, ptr, offset } => {
                encoder.encode(crate::op::F64LoadMem0_SI { result, ptr, offset })
            }
            Self::I32Load8S_RR { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I32Load8S_RR { result, ptr, offset, memory })
            }
            Self::I32Load8S_RS { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I32Load8S_RS { result, ptr, offset, memory })
            }
            Self::I32Load8S_RI { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I32Load8S_RI { result, ptr, offset, memory })
            }
            Self::I32Load8SMem0_RR { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load8SMem0_RR { result, ptr, offset })
            }
            Self::I32Load8SMem0_RS { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load8SMem0_RS { result, ptr, offset })
            }
            Self::I32Load8SMem0_RI { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load8SMem0_RI { result, ptr, offset })
            }
            Self::I32Load8SMem0_SR { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load8SMem0_SR { result, ptr, offset })
            }
            Self::I32Load8SMem0_SS { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load8SMem0_SS { result, ptr, offset })
            }
            Self::I32Load8SMem0_SI { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load8SMem0_SI { result, ptr, offset })
            }
            Self::I64Load8S_RR { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load8S_RR { result, ptr, offset, memory })
            }
            Self::I64Load8S_RS { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load8S_RS { result, ptr, offset, memory })
            }
            Self::I64Load8S_RI { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load8S_RI { result, ptr, offset, memory })
            }
            Self::I64Load8SMem0_RR { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load8SMem0_RR { result, ptr, offset })
            }
            Self::I64Load8SMem0_RS { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load8SMem0_RS { result, ptr, offset })
            }
            Self::I64Load8SMem0_RI { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load8SMem0_RI { result, ptr, offset })
            }
            Self::I64Load8SMem0_SR { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load8SMem0_SR { result, ptr, offset })
            }
            Self::I64Load8SMem0_SS { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load8SMem0_SS { result, ptr, offset })
            }
            Self::I64Load8SMem0_SI { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load8SMem0_SI { result, ptr, offset })
            }
            Self::I32Load8U_RR { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I32Load8U_RR { result, ptr, offset, memory })
            }
            Self::I32Load8U_RS { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I32Load8U_RS { result, ptr, offset, memory })
            }
            Self::I32Load8U_RI { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I32Load8U_RI { result, ptr, offset, memory })
            }
            Self::I32Load8UMem0_RR { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load8UMem0_RR { result, ptr, offset })
            }
            Self::I32Load8UMem0_RS { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load8UMem0_RS { result, ptr, offset })
            }
            Self::I32Load8UMem0_RI { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load8UMem0_RI { result, ptr, offset })
            }
            Self::I32Load8UMem0_SR { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load8UMem0_SR { result, ptr, offset })
            }
            Self::I32Load8UMem0_SS { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load8UMem0_SS { result, ptr, offset })
            }
            Self::I32Load8UMem0_SI { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load8UMem0_SI { result, ptr, offset })
            }
            Self::I64Load8U_RR { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load8U_RR { result, ptr, offset, memory })
            }
            Self::I64Load8U_RS { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load8U_RS { result, ptr, offset, memory })
            }
            Self::I64Load8U_RI { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load8U_RI { result, ptr, offset, memory })
            }
            Self::I64Load8UMem0_RR { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load8UMem0_RR { result, ptr, offset })
            }
            Self::I64Load8UMem0_RS { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load8UMem0_RS { result, ptr, offset })
            }
            Self::I64Load8UMem0_RI { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load8UMem0_RI { result, ptr, offset })
            }
            Self::I64Load8UMem0_SR { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load8UMem0_SR { result, ptr, offset })
            }
            Self::I64Load8UMem0_SS { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load8UMem0_SS { result, ptr, offset })
            }
            Self::I64Load8UMem0_SI { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load8UMem0_SI { result, ptr, offset })
            }
            Self::I32Load16S_RR { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I32Load16S_RR { result, ptr, offset, memory })
            }
            Self::I32Load16S_RS { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I32Load16S_RS { result, ptr, offset, memory })
            }
            Self::I32Load16S_RI { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I32Load16S_RI { result, ptr, offset, memory })
            }
            Self::I32Load16SMem0_RR { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load16SMem0_RR { result, ptr, offset })
            }
            Self::I32Load16SMem0_RS { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load16SMem0_RS { result, ptr, offset })
            }
            Self::I32Load16SMem0_RI { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load16SMem0_RI { result, ptr, offset })
            }
            Self::I32Load16SMem0_SR { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load16SMem0_SR { result, ptr, offset })
            }
            Self::I32Load16SMem0_SS { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load16SMem0_SS { result, ptr, offset })
            }
            Self::I32Load16SMem0_SI { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load16SMem0_SI { result, ptr, offset })
            }
            Self::I64Load16S_RR { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load16S_RR { result, ptr, offset, memory })
            }
            Self::I64Load16S_RS { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load16S_RS { result, ptr, offset, memory })
            }
            Self::I64Load16S_RI { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load16S_RI { result, ptr, offset, memory })
            }
            Self::I64Load16SMem0_RR { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load16SMem0_RR { result, ptr, offset })
            }
            Self::I64Load16SMem0_RS { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load16SMem0_RS { result, ptr, offset })
            }
            Self::I64Load16SMem0_RI { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load16SMem0_RI { result, ptr, offset })
            }
            Self::I64Load16SMem0_SR { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load16SMem0_SR { result, ptr, offset })
            }
            Self::I64Load16SMem0_SS { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load16SMem0_SS { result, ptr, offset })
            }
            Self::I64Load16SMem0_SI { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load16SMem0_SI { result, ptr, offset })
            }
            Self::I32Load16U_RR { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I32Load16U_RR { result, ptr, offset, memory })
            }
            Self::I32Load16U_RS { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I32Load16U_RS { result, ptr, offset, memory })
            }
            Self::I32Load16U_RI { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I32Load16U_RI { result, ptr, offset, memory })
            }
            Self::I32Load16UMem0_RR { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load16UMem0_RR { result, ptr, offset })
            }
            Self::I32Load16UMem0_RS { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load16UMem0_RS { result, ptr, offset })
            }
            Self::I32Load16UMem0_RI { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load16UMem0_RI { result, ptr, offset })
            }
            Self::I32Load16UMem0_SR { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load16UMem0_SR { result, ptr, offset })
            }
            Self::I32Load16UMem0_SS { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load16UMem0_SS { result, ptr, offset })
            }
            Self::I32Load16UMem0_SI { result, ptr, offset } => {
                encoder.encode(crate::op::I32Load16UMem0_SI { result, ptr, offset })
            }
            Self::I64Load16U_RR { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load16U_RR { result, ptr, offset, memory })
            }
            Self::I64Load16U_RS { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load16U_RS { result, ptr, offset, memory })
            }
            Self::I64Load16U_RI { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load16U_RI { result, ptr, offset, memory })
            }
            Self::I64Load16UMem0_RR { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load16UMem0_RR { result, ptr, offset })
            }
            Self::I64Load16UMem0_RS { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load16UMem0_RS { result, ptr, offset })
            }
            Self::I64Load16UMem0_RI { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load16UMem0_RI { result, ptr, offset })
            }
            Self::I64Load16UMem0_SR { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load16UMem0_SR { result, ptr, offset })
            }
            Self::I64Load16UMem0_SS { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load16UMem0_SS { result, ptr, offset })
            }
            Self::I64Load16UMem0_SI { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load16UMem0_SI { result, ptr, offset })
            }
            Self::I64Load32S_RR { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load32S_RR { result, ptr, offset, memory })
            }
            Self::I64Load32S_RS { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load32S_RS { result, ptr, offset, memory })
            }
            Self::I64Load32S_RI { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load32S_RI { result, ptr, offset, memory })
            }
            Self::I64Load32SMem0_RR { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load32SMem0_RR { result, ptr, offset })
            }
            Self::I64Load32SMem0_RS { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load32SMem0_RS { result, ptr, offset })
            }
            Self::I64Load32SMem0_RI { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load32SMem0_RI { result, ptr, offset })
            }
            Self::I64Load32SMem0_SR { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load32SMem0_SR { result, ptr, offset })
            }
            Self::I64Load32SMem0_SS { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load32SMem0_SS { result, ptr, offset })
            }
            Self::I64Load32SMem0_SI { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load32SMem0_SI { result, ptr, offset })
            }
            Self::I64Load32U_RR { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load32U_RR { result, ptr, offset, memory })
            }
            Self::I64Load32U_RS { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load32U_RS { result, ptr, offset, memory })
            }
            Self::I64Load32U_RI { result, ptr, offset, memory } => {
                encoder.encode(crate::op::I64Load32U_RI { result, ptr, offset, memory })
            }
            Self::I64Load32UMem0_RR { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load32UMem0_RR { result, ptr, offset })
            }
            Self::I64Load32UMem0_RS { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load32UMem0_RS { result, ptr, offset })
            }
            Self::I64Load32UMem0_RI { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load32UMem0_RI { result, ptr, offset })
            }
            Self::I64Load32UMem0_SR { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load32UMem0_SR { result, ptr, offset })
            }
            Self::I64Load32UMem0_SS { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load32UMem0_SS { result, ptr, offset })
            }
            Self::I64Load32UMem0_SI { result, ptr, offset } => {
                encoder.encode(crate::op::I64Load32UMem0_SI { result, ptr, offset })
            }
            Self::I32Store_RS { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I32Store_RS { ptr, value, offset, memory })
            }
            Self::I32Store_RI { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I32Store_RI { ptr, value, offset, memory })
            }
            Self::I32Store_SR { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I32Store_SR { ptr, value, offset, memory })
            }
            Self::I32Store_SS { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I32Store_SS { ptr, value, offset, memory })
            }
            Self::I32Store_SI { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I32Store_SI { ptr, value, offset, memory })
            }
            Self::I32Store_IR { address, value, memory } => {
                encoder.encode(crate::op::I32Store_IR { address, value, memory })
            }
            Self::I32Store_IS { address, value, memory } => {
                encoder.encode(crate::op::I32Store_IS { address, value, memory })
            }
            Self::I32Store_II { address, value, memory } => {
                encoder.encode(crate::op::I32Store_II { address, value, memory })
            }
            Self::I32StoreMem0_RS { ptr, value, offset } => {
                encoder.encode(crate::op::I32StoreMem0_RS { ptr, value, offset })
            }
            Self::I32StoreMem0_RI { ptr, value, offset } => {
                encoder.encode(crate::op::I32StoreMem0_RI { ptr, value, offset })
            }
            Self::I32StoreMem0_SR { ptr, value, offset } => {
                encoder.encode(crate::op::I32StoreMem0_SR { ptr, value, offset })
            }
            Self::I32StoreMem0_SS { ptr, value, offset } => {
                encoder.encode(crate::op::I32StoreMem0_SS { ptr, value, offset })
            }
            Self::I32StoreMem0_SI { ptr, value, offset } => {
                encoder.encode(crate::op::I32StoreMem0_SI { ptr, value, offset })
            }
            Self::I32StoreMem0_IR { address, value } => {
                encoder.encode(crate::op::I32StoreMem0_IR { address, value })
            }
            Self::I32StoreMem0_IS { address, value } => {
                encoder.encode(crate::op::I32StoreMem0_IS { address, value })
            }
            Self::I32StoreMem0_II { address, value } => {
                encoder.encode(crate::op::I32StoreMem0_II { address, value })
            }
            Self::I64Store_RS { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I64Store_RS { ptr, value, offset, memory })
            }
            Self::I64Store_RI { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I64Store_RI { ptr, value, offset, memory })
            }
            Self::I64Store_SR { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I64Store_SR { ptr, value, offset, memory })
            }
            Self::I64Store_SS { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I64Store_SS { ptr, value, offset, memory })
            }
            Self::I64Store_SI { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I64Store_SI { ptr, value, offset, memory })
            }
            Self::I64Store_IR { address, value, memory } => {
                encoder.encode(crate::op::I64Store_IR { address, value, memory })
            }
            Self::I64Store_IS { address, value, memory } => {
                encoder.encode(crate::op::I64Store_IS { address, value, memory })
            }
            Self::I64Store_II { address, value, memory } => {
                encoder.encode(crate::op::I64Store_II { address, value, memory })
            }
            Self::I64StoreMem0_RS { ptr, value, offset } => {
                encoder.encode(crate::op::I64StoreMem0_RS { ptr, value, offset })
            }
            Self::I64StoreMem0_RI { ptr, value, offset } => {
                encoder.encode(crate::op::I64StoreMem0_RI { ptr, value, offset })
            }
            Self::I64StoreMem0_SR { ptr, value, offset } => {
                encoder.encode(crate::op::I64StoreMem0_SR { ptr, value, offset })
            }
            Self::I64StoreMem0_SS { ptr, value, offset } => {
                encoder.encode(crate::op::I64StoreMem0_SS { ptr, value, offset })
            }
            Self::I64StoreMem0_SI { ptr, value, offset } => {
                encoder.encode(crate::op::I64StoreMem0_SI { ptr, value, offset })
            }
            Self::I64StoreMem0_IR { address, value } => {
                encoder.encode(crate::op::I64StoreMem0_IR { address, value })
            }
            Self::I64StoreMem0_IS { address, value } => {
                encoder.encode(crate::op::I64StoreMem0_IS { address, value })
            }
            Self::I64StoreMem0_II { address, value } => {
                encoder.encode(crate::op::I64StoreMem0_II { address, value })
            }
            Self::F32Store_RR { ptr, value, offset, memory } => {
                encoder.encode(crate::op::F32Store_RR { ptr, value, offset, memory })
            }
            Self::F32Store_RS { ptr, value, offset, memory } => {
                encoder.encode(crate::op::F32Store_RS { ptr, value, offset, memory })
            }
            Self::F32Store_RI { ptr, value, offset, memory } => {
                encoder.encode(crate::op::F32Store_RI { ptr, value, offset, memory })
            }
            Self::F32Store_SR { ptr, value, offset, memory } => {
                encoder.encode(crate::op::F32Store_SR { ptr, value, offset, memory })
            }
            Self::F32Store_SS { ptr, value, offset, memory } => {
                encoder.encode(crate::op::F32Store_SS { ptr, value, offset, memory })
            }
            Self::F32Store_SI { ptr, value, offset, memory } => {
                encoder.encode(crate::op::F32Store_SI { ptr, value, offset, memory })
            }
            Self::F32Store_IR { address, value, memory } => {
                encoder.encode(crate::op::F32Store_IR { address, value, memory })
            }
            Self::F32Store_IS { address, value, memory } => {
                encoder.encode(crate::op::F32Store_IS { address, value, memory })
            }
            Self::F32Store_II { address, value, memory } => {
                encoder.encode(crate::op::F32Store_II { address, value, memory })
            }
            Self::F32StoreMem0_RR { ptr, value, offset } => {
                encoder.encode(crate::op::F32StoreMem0_RR { ptr, value, offset })
            }
            Self::F32StoreMem0_RS { ptr, value, offset } => {
                encoder.encode(crate::op::F32StoreMem0_RS { ptr, value, offset })
            }
            Self::F32StoreMem0_RI { ptr, value, offset } => {
                encoder.encode(crate::op::F32StoreMem0_RI { ptr, value, offset })
            }
            Self::F32StoreMem0_SR { ptr, value, offset } => {
                encoder.encode(crate::op::F32StoreMem0_SR { ptr, value, offset })
            }
            Self::F32StoreMem0_SS { ptr, value, offset } => {
                encoder.encode(crate::op::F32StoreMem0_SS { ptr, value, offset })
            }
            Self::F32StoreMem0_SI { ptr, value, offset } => {
                encoder.encode(crate::op::F32StoreMem0_SI { ptr, value, offset })
            }
            Self::F32StoreMem0_IR { address, value } => {
                encoder.encode(crate::op::F32StoreMem0_IR { address, value })
            }
            Self::F32StoreMem0_IS { address, value } => {
                encoder.encode(crate::op::F32StoreMem0_IS { address, value })
            }
            Self::F32StoreMem0_II { address, value } => {
                encoder.encode(crate::op::F32StoreMem0_II { address, value })
            }
            Self::F64Store_RR { ptr, value, offset, memory } => {
                encoder.encode(crate::op::F64Store_RR { ptr, value, offset, memory })
            }
            Self::F64Store_RS { ptr, value, offset, memory } => {
                encoder.encode(crate::op::F64Store_RS { ptr, value, offset, memory })
            }
            Self::F64Store_RI { ptr, value, offset, memory } => {
                encoder.encode(crate::op::F64Store_RI { ptr, value, offset, memory })
            }
            Self::F64Store_SR { ptr, value, offset, memory } => {
                encoder.encode(crate::op::F64Store_SR { ptr, value, offset, memory })
            }
            Self::F64Store_SS { ptr, value, offset, memory } => {
                encoder.encode(crate::op::F64Store_SS { ptr, value, offset, memory })
            }
            Self::F64Store_SI { ptr, value, offset, memory } => {
                encoder.encode(crate::op::F64Store_SI { ptr, value, offset, memory })
            }
            Self::F64Store_IR { address, value, memory } => {
                encoder.encode(crate::op::F64Store_IR { address, value, memory })
            }
            Self::F64Store_IS { address, value, memory } => {
                encoder.encode(crate::op::F64Store_IS { address, value, memory })
            }
            Self::F64Store_II { address, value, memory } => {
                encoder.encode(crate::op::F64Store_II { address, value, memory })
            }
            Self::F64StoreMem0_RR { ptr, value, offset } => {
                encoder.encode(crate::op::F64StoreMem0_RR { ptr, value, offset })
            }
            Self::F64StoreMem0_RS { ptr, value, offset } => {
                encoder.encode(crate::op::F64StoreMem0_RS { ptr, value, offset })
            }
            Self::F64StoreMem0_RI { ptr, value, offset } => {
                encoder.encode(crate::op::F64StoreMem0_RI { ptr, value, offset })
            }
            Self::F64StoreMem0_SR { ptr, value, offset } => {
                encoder.encode(crate::op::F64StoreMem0_SR { ptr, value, offset })
            }
            Self::F64StoreMem0_SS { ptr, value, offset } => {
                encoder.encode(crate::op::F64StoreMem0_SS { ptr, value, offset })
            }
            Self::F64StoreMem0_SI { ptr, value, offset } => {
                encoder.encode(crate::op::F64StoreMem0_SI { ptr, value, offset })
            }
            Self::F64StoreMem0_IR { address, value } => {
                encoder.encode(crate::op::F64StoreMem0_IR { address, value })
            }
            Self::F64StoreMem0_IS { address, value } => {
                encoder.encode(crate::op::F64StoreMem0_IS { address, value })
            }
            Self::F64StoreMem0_II { address, value } => {
                encoder.encode(crate::op::F64StoreMem0_II { address, value })
            }
            Self::I32Store8_RS { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I32Store8_RS { ptr, value, offset, memory })
            }
            Self::I32Store8_RI { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I32Store8_RI { ptr, value, offset, memory })
            }
            Self::I32Store8_SR { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I32Store8_SR { ptr, value, offset, memory })
            }
            Self::I32Store8_SS { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I32Store8_SS { ptr, value, offset, memory })
            }
            Self::I32Store8_SI { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I32Store8_SI { ptr, value, offset, memory })
            }
            Self::I32Store8_IR { address, value, memory } => {
                encoder.encode(crate::op::I32Store8_IR { address, value, memory })
            }
            Self::I32Store8_IS { address, value, memory } => {
                encoder.encode(crate::op::I32Store8_IS { address, value, memory })
            }
            Self::I32Store8_II { address, value, memory } => {
                encoder.encode(crate::op::I32Store8_II { address, value, memory })
            }
            Self::I32Store8Mem0_RS { ptr, value, offset } => {
                encoder.encode(crate::op::I32Store8Mem0_RS { ptr, value, offset })
            }
            Self::I32Store8Mem0_RI { ptr, value, offset } => {
                encoder.encode(crate::op::I32Store8Mem0_RI { ptr, value, offset })
            }
            Self::I32Store8Mem0_SR { ptr, value, offset } => {
                encoder.encode(crate::op::I32Store8Mem0_SR { ptr, value, offset })
            }
            Self::I32Store8Mem0_SS { ptr, value, offset } => {
                encoder.encode(crate::op::I32Store8Mem0_SS { ptr, value, offset })
            }
            Self::I32Store8Mem0_SI { ptr, value, offset } => {
                encoder.encode(crate::op::I32Store8Mem0_SI { ptr, value, offset })
            }
            Self::I32Store8Mem0_IR { address, value } => {
                encoder.encode(crate::op::I32Store8Mem0_IR { address, value })
            }
            Self::I32Store8Mem0_IS { address, value } => {
                encoder.encode(crate::op::I32Store8Mem0_IS { address, value })
            }
            Self::I32Store8Mem0_II { address, value } => {
                encoder.encode(crate::op::I32Store8Mem0_II { address, value })
            }
            Self::I64Store8_RS { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I64Store8_RS { ptr, value, offset, memory })
            }
            Self::I64Store8_RI { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I64Store8_RI { ptr, value, offset, memory })
            }
            Self::I64Store8_SR { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I64Store8_SR { ptr, value, offset, memory })
            }
            Self::I64Store8_SS { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I64Store8_SS { ptr, value, offset, memory })
            }
            Self::I64Store8_SI { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I64Store8_SI { ptr, value, offset, memory })
            }
            Self::I64Store8_IR { address, value, memory } => {
                encoder.encode(crate::op::I64Store8_IR { address, value, memory })
            }
            Self::I64Store8_IS { address, value, memory } => {
                encoder.encode(crate::op::I64Store8_IS { address, value, memory })
            }
            Self::I64Store8_II { address, value, memory } => {
                encoder.encode(crate::op::I64Store8_II { address, value, memory })
            }
            Self::I64Store8Mem0_RS { ptr, value, offset } => {
                encoder.encode(crate::op::I64Store8Mem0_RS { ptr, value, offset })
            }
            Self::I64Store8Mem0_RI { ptr, value, offset } => {
                encoder.encode(crate::op::I64Store8Mem0_RI { ptr, value, offset })
            }
            Self::I64Store8Mem0_SR { ptr, value, offset } => {
                encoder.encode(crate::op::I64Store8Mem0_SR { ptr, value, offset })
            }
            Self::I64Store8Mem0_SS { ptr, value, offset } => {
                encoder.encode(crate::op::I64Store8Mem0_SS { ptr, value, offset })
            }
            Self::I64Store8Mem0_SI { ptr, value, offset } => {
                encoder.encode(crate::op::I64Store8Mem0_SI { ptr, value, offset })
            }
            Self::I64Store8Mem0_IR { address, value } => {
                encoder.encode(crate::op::I64Store8Mem0_IR { address, value })
            }
            Self::I64Store8Mem0_IS { address, value } => {
                encoder.encode(crate::op::I64Store8Mem0_IS { address, value })
            }
            Self::I64Store8Mem0_II { address, value } => {
                encoder.encode(crate::op::I64Store8Mem0_II { address, value })
            }
            Self::I32Store16_RS { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I32Store16_RS { ptr, value, offset, memory })
            }
            Self::I32Store16_RI { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I32Store16_RI { ptr, value, offset, memory })
            }
            Self::I32Store16_SR { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I32Store16_SR { ptr, value, offset, memory })
            }
            Self::I32Store16_SS { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I32Store16_SS { ptr, value, offset, memory })
            }
            Self::I32Store16_SI { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I32Store16_SI { ptr, value, offset, memory })
            }
            Self::I32Store16_IR { address, value, memory } => {
                encoder.encode(crate::op::I32Store16_IR { address, value, memory })
            }
            Self::I32Store16_IS { address, value, memory } => {
                encoder.encode(crate::op::I32Store16_IS { address, value, memory })
            }
            Self::I32Store16_II { address, value, memory } => {
                encoder.encode(crate::op::I32Store16_II { address, value, memory })
            }
            Self::I32Store16Mem0_RS { ptr, value, offset } => {
                encoder.encode(crate::op::I32Store16Mem0_RS { ptr, value, offset })
            }
            Self::I32Store16Mem0_RI { ptr, value, offset } => {
                encoder.encode(crate::op::I32Store16Mem0_RI { ptr, value, offset })
            }
            Self::I32Store16Mem0_SR { ptr, value, offset } => {
                encoder.encode(crate::op::I32Store16Mem0_SR { ptr, value, offset })
            }
            Self::I32Store16Mem0_SS { ptr, value, offset } => {
                encoder.encode(crate::op::I32Store16Mem0_SS { ptr, value, offset })
            }
            Self::I32Store16Mem0_SI { ptr, value, offset } => {
                encoder.encode(crate::op::I32Store16Mem0_SI { ptr, value, offset })
            }
            Self::I32Store16Mem0_IR { address, value } => {
                encoder.encode(crate::op::I32Store16Mem0_IR { address, value })
            }
            Self::I32Store16Mem0_IS { address, value } => {
                encoder.encode(crate::op::I32Store16Mem0_IS { address, value })
            }
            Self::I32Store16Mem0_II { address, value } => {
                encoder.encode(crate::op::I32Store16Mem0_II { address, value })
            }
            Self::I64Store16_RS { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I64Store16_RS { ptr, value, offset, memory })
            }
            Self::I64Store16_RI { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I64Store16_RI { ptr, value, offset, memory })
            }
            Self::I64Store16_SR { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I64Store16_SR { ptr, value, offset, memory })
            }
            Self::I64Store16_SS { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I64Store16_SS { ptr, value, offset, memory })
            }
            Self::I64Store16_SI { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I64Store16_SI { ptr, value, offset, memory })
            }
            Self::I64Store16_IR { address, value, memory } => {
                encoder.encode(crate::op::I64Store16_IR { address, value, memory })
            }
            Self::I64Store16_IS { address, value, memory } => {
                encoder.encode(crate::op::I64Store16_IS { address, value, memory })
            }
            Self::I64Store16_II { address, value, memory } => {
                encoder.encode(crate::op::I64Store16_II { address, value, memory })
            }
            Self::I64Store16Mem0_RS { ptr, value, offset } => {
                encoder.encode(crate::op::I64Store16Mem0_RS { ptr, value, offset })
            }
            Self::I64Store16Mem0_RI { ptr, value, offset } => {
                encoder.encode(crate::op::I64Store16Mem0_RI { ptr, value, offset })
            }
            Self::I64Store16Mem0_SR { ptr, value, offset } => {
                encoder.encode(crate::op::I64Store16Mem0_SR { ptr, value, offset })
            }
            Self::I64Store16Mem0_SS { ptr, value, offset } => {
                encoder.encode(crate::op::I64Store16Mem0_SS { ptr, value, offset })
            }
            Self::I64Store16Mem0_SI { ptr, value, offset } => {
                encoder.encode(crate::op::I64Store16Mem0_SI { ptr, value, offset })
            }
            Self::I64Store16Mem0_IR { address, value } => {
                encoder.encode(crate::op::I64Store16Mem0_IR { address, value })
            }
            Self::I64Store16Mem0_IS { address, value } => {
                encoder.encode(crate::op::I64Store16Mem0_IS { address, value })
            }
            Self::I64Store16Mem0_II { address, value } => {
                encoder.encode(crate::op::I64Store16Mem0_II { address, value })
            }
            Self::I64Store32_RS { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I64Store32_RS { ptr, value, offset, memory })
            }
            Self::I64Store32_RI { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I64Store32_RI { ptr, value, offset, memory })
            }
            Self::I64Store32_SR { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I64Store32_SR { ptr, value, offset, memory })
            }
            Self::I64Store32_SS { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I64Store32_SS { ptr, value, offset, memory })
            }
            Self::I64Store32_SI { ptr, value, offset, memory } => {
                encoder.encode(crate::op::I64Store32_SI { ptr, value, offset, memory })
            }
            Self::I64Store32_IR { address, value, memory } => {
                encoder.encode(crate::op::I64Store32_IR { address, value, memory })
            }
            Self::I64Store32_IS { address, value, memory } => {
                encoder.encode(crate::op::I64Store32_IS { address, value, memory })
            }
            Self::I64Store32_II { address, value, memory } => {
                encoder.encode(crate::op::I64Store32_II { address, value, memory })
            }
            Self::I64Store32Mem0_RS { ptr, value, offset } => {
                encoder.encode(crate::op::I64Store32Mem0_RS { ptr, value, offset })
            }
            Self::I64Store32Mem0_RI { ptr, value, offset } => {
                encoder.encode(crate::op::I64Store32Mem0_RI { ptr, value, offset })
            }
            Self::I64Store32Mem0_SR { ptr, value, offset } => {
                encoder.encode(crate::op::I64Store32Mem0_SR { ptr, value, offset })
            }
            Self::I64Store32Mem0_SS { ptr, value, offset } => {
                encoder.encode(crate::op::I64Store32Mem0_SS { ptr, value, offset })
            }
            Self::I64Store32Mem0_SI { ptr, value, offset } => {
                encoder.encode(crate::op::I64Store32Mem0_SI { ptr, value, offset })
            }
            Self::I64Store32Mem0_IR { address, value } => {
                encoder.encode(crate::op::I64Store32Mem0_IR { address, value })
            }
            Self::I64Store32Mem0_IS { address, value } => {
                encoder.encode(crate::op::I64Store32Mem0_IS { address, value })
            }
            Self::I64Store32Mem0_II { address, value } => {
                encoder.encode(crate::op::I64Store32Mem0_II { address, value })
            }
            Self::Select { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::Select { result, condition, lhs, rhs })
            }
            Self::SelectI32_RSSS { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectI32_RSSS { result, condition, lhs, rhs })
            }
            Self::SelectI32_RSSI { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectI32_RSSI { result, condition, lhs, rhs })
            }
            Self::SelectI32_RSIS { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectI32_RSIS { result, condition, lhs, rhs })
            }
            Self::SelectI32_RSII { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectI32_RSII { result, condition, lhs, rhs })
            }
            Self::SelectI64_RRSS { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectI64_RRSS { result, condition, lhs, rhs })
            }
            Self::SelectI64_RRSI { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectI64_RRSI { result, condition, lhs, rhs })
            }
            Self::SelectI64_RRIS { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectI64_RRIS { result, condition, lhs, rhs })
            }
            Self::SelectI64_RRII { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectI64_RRII { result, condition, lhs, rhs })
            }
            Self::SelectI64_RSRS { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectI64_RSRS { result, condition, lhs, rhs })
            }
            Self::SelectI64_RSRI { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectI64_RSRI { result, condition, lhs, rhs })
            }
            Self::SelectI64_RSSR { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectI64_RSSR { result, condition, lhs, rhs })
            }
            Self::SelectI64_RSSS { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectI64_RSSS { result, condition, lhs, rhs })
            }
            Self::SelectI64_RSSI { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectI64_RSSI { result, condition, lhs, rhs })
            }
            Self::SelectI64_RSIR { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectI64_RSIR { result, condition, lhs, rhs })
            }
            Self::SelectI64_RSIS { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectI64_RSIS { result, condition, lhs, rhs })
            }
            Self::SelectI64_RSII { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectI64_RSII { result, condition, lhs, rhs })
            }
            Self::SelectF32_RRSS { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF32_RRSS { result, condition, lhs, rhs })
            }
            Self::SelectF32_RRSI { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF32_RRSI { result, condition, lhs, rhs })
            }
            Self::SelectF32_RRIS { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF32_RRIS { result, condition, lhs, rhs })
            }
            Self::SelectF32_RRII { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF32_RRII { result, condition, lhs, rhs })
            }
            Self::SelectF32_RSRS { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF32_RSRS { result, condition, lhs, rhs })
            }
            Self::SelectF32_RSRI { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF32_RSRI { result, condition, lhs, rhs })
            }
            Self::SelectF32_RSSR { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF32_RSSR { result, condition, lhs, rhs })
            }
            Self::SelectF32_RSSS { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF32_RSSS { result, condition, lhs, rhs })
            }
            Self::SelectF32_RSSI { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF32_RSSI { result, condition, lhs, rhs })
            }
            Self::SelectF32_RSIR { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF32_RSIR { result, condition, lhs, rhs })
            }
            Self::SelectF32_RSIS { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF32_RSIS { result, condition, lhs, rhs })
            }
            Self::SelectF32_RSII { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF32_RSII { result, condition, lhs, rhs })
            }
            Self::SelectF64_RRSS { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF64_RRSS { result, condition, lhs, rhs })
            }
            Self::SelectF64_RRSI { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF64_RRSI { result, condition, lhs, rhs })
            }
            Self::SelectF64_RRIS { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF64_RRIS { result, condition, lhs, rhs })
            }
            Self::SelectF64_RRII { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF64_RRII { result, condition, lhs, rhs })
            }
            Self::SelectF64_RSRS { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF64_RSRS { result, condition, lhs, rhs })
            }
            Self::SelectF64_RSRI { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF64_RSRI { result, condition, lhs, rhs })
            }
            Self::SelectF64_RSSR { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF64_RSSR { result, condition, lhs, rhs })
            }
            Self::SelectF64_RSSS { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF64_RSSS { result, condition, lhs, rhs })
            }
            Self::SelectF64_RSSI { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF64_RSSI { result, condition, lhs, rhs })
            }
            Self::SelectF64_RSIR { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF64_RSIR { result, condition, lhs, rhs })
            }
            Self::SelectF64_RSIS { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF64_RSIS { result, condition, lhs, rhs })
            }
            Self::SelectF64_RSII { result, condition, lhs, rhs } => {
                encoder.encode(crate::op::SelectF64_RSII { result, condition, lhs, rhs })
            }
            Self::TableSize_R { result, table } => {
                encoder.encode(crate::op::TableSize_R { result, table })
            }
            Self::TableSize_S { result, table } => {
                encoder.encode(crate::op::TableSize_S { result, table })
            }
            Self::TableGet_RR { result, index, table } => {
                encoder.encode(crate::op::TableGet_RR { result, index, table })
            }
            Self::TableGet_RS { result, index, table } => {
                encoder.encode(crate::op::TableGet_RS { result, index, table })
            }
            Self::TableGet_RI { result, index, table } => {
                encoder.encode(crate::op::TableGet_RI { result, index, table })
            }
            Self::TableSet_RS { index, value, table } => {
                encoder.encode(crate::op::TableSet_RS { index, value, table })
            }
            Self::TableSet_RI { index, value, table } => {
                encoder.encode(crate::op::TableSet_RI { index, value, table })
            }
            Self::TableSet_SR { index, value, table } => {
                encoder.encode(crate::op::TableSet_SR { index, value, table })
            }
            Self::TableSet_SS { index, value, table } => {
                encoder.encode(crate::op::TableSet_SS { index, value, table })
            }
            Self::TableSet_SI { index, value, table } => {
                encoder.encode(crate::op::TableSet_SI { index, value, table })
            }
            Self::TableSet_IR { index, value, table } => {
                encoder.encode(crate::op::TableSet_IR { index, value, table })
            }
            Self::TableSet_IS { index, value, table } => {
                encoder.encode(crate::op::TableSet_IS { index, value, table })
            }
            Self::TableSet_II { index, value, table } => {
                encoder.encode(crate::op::TableSet_II { index, value, table })
            }
            Self::TableGrow { result, delta, table } => {
                encoder.encode(crate::op::TableGrow { result, delta, table })
            }
            Self::TableCopy { dst_index, src_index, len, dst_table, src_table } => {
                encoder.encode(crate::op::TableCopy { dst_index, src_index, len, dst_table, src_table })
            }
            Self::TableFill { dst_index, value, len, table } => {
                encoder.encode(crate::op::TableFill { dst_index, value, len, table })
            }
            Self::TableInit { dst_index, src_index, len, table, elem } => {
                encoder.encode(crate::op::TableInit { dst_index, src_index, len, table, elem })
            }
            Self::MemorySize_R { result, memory } => {
                encoder.encode(crate::op::MemorySize_R { result, memory })
            }
            Self::MemorySize_S { result, memory } => {
                encoder.encode(crate::op::MemorySize_S { result, memory })
            }
            Self::MemoryGrow { result, delta, memory } => {
                encoder.encode(crate::op::MemoryGrow { result, delta, memory })
            }
            Self::MemoryCopy { dst_index, src_index, len, dst_memory, src_memory } => {
                encoder.encode(crate::op::MemoryCopy { dst_index, src_index, len, dst_memory, src_memory })
            }
            Self::MemoryFill { dst_index, value, len, memory } => {
                encoder.encode(crate::op::MemoryFill { dst_index, value, len, memory })
            }
            Self::MemoryInit { dst_index, src_index, len, memory, data } => {
                encoder.encode(crate::op::MemoryInit { dst_index, src_index, len, memory, data })
            }
            Self::CallInternal { func, len_params, len_results } => {
                encoder.encode(crate::op::CallInternal { func, len_params, len_results })
            }
            Self::ReturnCallInternal { func, len_params, len_results } => {
                encoder.encode(crate::op::ReturnCallInternal { func, len_params, len_results })
            }
            Self::CallImported { func, len_params, len_results } => {
                encoder.encode(crate::op::CallImported { func, len_params, len_results })
            }
            Self::ReturnCallImported { func, len_params, len_results } => {
                encoder.encode(crate::op::ReturnCallImported { func, len_params, len_results })
            }
            Self::CallIndirect_R { table, index, len_params, len_results } => {
                encoder.encode(crate::op::CallIndirect_R { table, index, len_params, len_results })
            }
            Self::CallIndirect_S { table, index, len_params, len_results } => {
                encoder.encode(crate::op::CallIndirect_S { table, index, len_params, len_results })
            }
            Self::CallIndirect_I { table, index, len_params, len_results } => {
                encoder.encode(crate::op::CallIndirect_I { table, index, len_params, len_results })
            }
            Self::ReturnCallIndirect_R { table, index, len_params, len_results } => {
                encoder.encode(crate::op::ReturnCallIndirect_R { table, index, len_params, len_results })
            }
            Self::ReturnCallIndirect_S { table, index, len_params, len_results } => {
                encoder.encode(crate::op::ReturnCallIndirect_S { table, index, len_params, len_results })
            }
            Self::ReturnCallIndirect_I { table, index, len_params, len_results } => {
                encoder.encode(crate::op::ReturnCallIndirect_I { table, index, len_params, len_results })
            }
        }
    }
}
