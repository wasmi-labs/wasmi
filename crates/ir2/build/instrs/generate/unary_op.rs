use super::{Context, DisplayIndent, UnaryOp};
use crate::instrs::instrs::utils::Operand;
use core::{fmt, fmt::Display};

pub struct DisplayOpClasses<'a> {
    ctx: &'a Context,
    indent: DisplayIndent,
}

impl<'a> DisplayOpClasses<'a> {
    pub fn new(ctx: &'a Context, indent: DisplayIndent) -> Self {
        Self { ctx, indent }
    }
}

impl Display for DisplayOpClasses<'_> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let indent = self.indent;
        let unary_ops = DisplayUnaryOpClasses::new(&self.ctx.unary_ops, indent);
        emit!(f, indent =>
            "// This file is automatically generated by the `build.rs` script."
            "//"
            "// Do _not_ edit this file directly but change `build.rs` script logic instead."
            ""
            unary_ops
        );
        Ok(())
    }
}

pub struct DisplayUnaryOpClasses<'a> {
    ops: &'a [UnaryOp],
    indent: DisplayIndent,
}

impl<'a> DisplayUnaryOpClasses<'a> {
    pub fn new(ops: &'a [UnaryOp], indent: DisplayIndent) -> Self {
        Self { ops, indent }
    }

    fn emit(&self, f: &mut fmt::Formatter, op: &UnaryOp) -> fmt::Result {
        let indent = self.indent;
        let name = &*op.name;
        let r_id = Operand::Reg.id();
        let s_id = Operand::Stack.id();
        let op_rr = format!("{}_{}{}", name, r_id, r_id);
        let op_rs = format!("{}_{}{}", name, r_id, s_id);
        let op_sr = format!("{}_{}{}", name, s_id, r_id);
        let op_ss = format!("{}_{}{}", name, s_id, s_id);
        write!(
            f,
            "\
            {indent}pub enum {name} {{}}\n\
            {indent}impl crate::UnaryOperator for {name} {{\n\
            {indent}    const NAME: &'static ::core::primitive::str = \"{name}\";\n\
            {indent}    type OpRr = crate::op::{op_rr};\n\
            {indent}    type OpRs = crate::op::{op_rs};\n\
            {indent}    type OpSr = crate::op::{op_sr};\n\
            {indent}    type OpSs = crate::op::{op_ss};\n\
            {indent}    fn make_rr(result: crate::Reg, input: crate::Reg) -> Self::OpRr {{\n\
            {indent}        Self::OpRr {{ result, input }}\n\
            {indent}    }}\n\
            {indent}    fn make_rs(result: crate::Reg, input: crate::Stack) -> Self::OpRs {{\n\
            {indent}        Self::OpRs {{ result, input }}\n\
            {indent}    }}\n\
            {indent}    fn make_sr(result: crate::Stack, input: crate::Reg) -> Self::OpSr {{\n\
            {indent}        Self::OpSr {{ result, input }}\n\
            {indent}    }}\n\
            {indent}    fn make_ss(result: crate::Stack, input: crate::Stack) -> Self::OpSs {{\n\
            {indent}        Self::OpSs {{ result, input }}\n\
            {indent}    }}\n\
            {indent}}}\
            "
        )
    }
}

impl Display for DisplayUnaryOpClasses<'_> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let Some((first, rest)) = self.ops.split_first() else {
            return Ok(());
        };
        self.emit(f, first)?;
        for op in rest {
            writeln!(f)?;
            self.emit(f, op)?;
        }
        Ok(())
    }
}
