use super::super::{DisplayIndent, ImmediateTy, Operand};
use crate::instrs::{BinaryCommutativeOp, Context};
use core::{fmt, fmt::Display};

pub struct DisplayBinaryOpImplsFile<'a> {
    ctx: &'a Context,
    indent: DisplayIndent,
}

impl<'a> DisplayBinaryOpImplsFile<'a> {
    pub fn new(ctx: &'a Context, indent: DisplayIndent) -> Self {
        Self { ctx, indent }
    }
}

impl Display for DisplayBinaryOpImplsFile<'_> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let indent = self.indent;
        let unary_ops = DisplayBinaryOpImpls::new(&self.ctx.binary_commutative_ops, indent);
        emit!(f, indent =>
            "// This file is automatically generated by the `build.rs` script."
            "//"
            "// Do _not_ edit this file directly but change `build.rs` script logic instead."
            ""
            unary_ops
        );
        Ok(())
    }
}

pub struct DisplayBinaryOpImpls<'a> {
    ops: &'a [BinaryCommutativeOp],
    indent: DisplayIndent,
}

impl<'a> DisplayBinaryOpImpls<'a> {
    pub fn new(ops: &'a [BinaryCommutativeOp], indent: DisplayIndent) -> Self {
        Self { ops, indent }
    }

    fn emit(&self, f: &mut fmt::Formatter, op: &BinaryCommutativeOp) -> fmt::Result {
        let indent = self.indent;
        let name = &*op.name;
        let r_id = Operand::Reg.id();
        let s_id = Operand::Stack.id();
        let i_id = Operand::Immediate.id();
        let op_rri = format!("{}_{}{}{}", name, r_id, r_id, i_id);
        let op_rrs = format!("{}_{}{}{}", name, r_id, r_id, s_id);
        let op_rsi = format!("{}_{}{}{}", name, r_id, s_id, i_id);
        let op_rss = format!("{}_{}{}{}", name, r_id, s_id, s_id);
        let op_sri = format!("{}_{}{}{}", name, s_id, r_id, i_id);
        let op_srs = format!("{}_{}{}{}", name, s_id, r_id, s_id);
        let op_ssi = format!("{}_{}{}{}", name, s_id, s_id, i_id);
        let op_sss = format!("{}_{}{}{}", name, s_id, s_id, s_id);
        let imm = ImmediateTy::from(op.input_ty);
        write!(
            f,
            "\
            {indent}pub enum {name} {{}}\n\
            {indent}impl crate::BinaryCommutativeOperator for {name} {{\n\
            {indent}    const NAME: &'static ::core::primitive::str = \"{name}\";\n\
            {indent}    type Imm = {imm};\n\
            {indent}    type OpRri = crate::op::{op_rri};\n\
            {indent}    type OpRrs = crate::op::{op_rrs};\n\
            {indent}    type OpRsi = crate::op::{op_rsi};\n\
            {indent}    type OpRss = crate::op::{op_rss};\n\
            {indent}    type OpSri = crate::op::{op_sri};\n\
            {indent}    type OpSrs = crate::op::{op_srs};\n\
            {indent}    type OpSsi = crate::op::{op_ssi};\n\
            {indent}    type OpSss = crate::op::{op_sss};\n\
            {indent}    fn make_rri(result: crate::Reg, lhs: crate::Reg, rhs: Self::Imm) -> Self::OpRri {{\n\
            {indent}        Self::OpRri {{ result, lhs, rhs }}\n\
            {indent}    }}\n\
            {indent}    fn make_rrs(result: crate::Reg, lhs: crate::Reg, rhs: crate::Stack) -> Self::OpRrs {{\n\
            {indent}        Self::OpRrs {{ result, lhs, rhs }}\n\
            {indent}    }}\n\
            {indent}    fn make_rsi(result: crate::Reg, lhs: crate::Stack, rhs: Self::Imm) -> Self::OpRsi {{\n\
            {indent}        Self::OpRsi {{ result, lhs, rhs }}\n\
            {indent}    }}\n\
            {indent}    fn make_rss(result: crate::Reg, lhs: crate::Stack, rhs: crate::Stack) -> Self::OpRss {{\n\
            {indent}        Self::OpRss {{ result, lhs, rhs }}\n\
            {indent}    }}\n\
            {indent}    fn make_sri(result: crate::Stack, lhs: crate::Reg, rhs: Self::Imm) -> Self::OpSri {{\n\
            {indent}        Self::OpSri {{ result, lhs, rhs }}\n\
            {indent}    }}\n\
            {indent}    fn make_srs(result: crate::Stack, lhs: crate::Reg, rhs: crate::Stack) -> Self::OpSrs {{\n\
            {indent}        Self::OpSrs {{ result, lhs, rhs }}\n\
            {indent}    }}\n\
            {indent}    fn make_ssi(result: crate::Stack, lhs: crate::Stack, rhs: Self::Imm) -> Self::OpSsi {{\n\
            {indent}        Self::OpSsi {{ result, lhs, rhs }}\n\
            {indent}    }}\n\
            {indent}    fn make_sss(result: crate::Stack, lhs: crate::Stack, rhs: crate::Stack) -> Self::OpSss {{\n\
            {indent}        Self::OpSss {{ result, lhs, rhs }}\n\
            {indent}    }}\n\
            {indent}}}\
            "
        )
    }
}

impl Display for DisplayBinaryOpImpls<'_> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let Some((first, rest)) = self.ops.split_first() else {
            return Ok(());
        };
        self.emit(f, first)?;
        for op in rest {
            writeln!(f)?;
            self.emit(f, op)?;
        }
        Ok(())
    }
}
