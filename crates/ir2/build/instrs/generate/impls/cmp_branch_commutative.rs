use super::super::{DisplayIndent, ImmediateTy, Operand};
use crate::instrs::CmpBranchOp;
use core::{fmt, fmt::Display};

pub struct DisplayCmpBranchCommutativeOperatorImpls<'a> {
    ops: &'a [CmpBranchOp],
    indent: DisplayIndent,
}

impl<'a> DisplayCmpBranchCommutativeOperatorImpls<'a> {
    pub fn new(ops: &'a [CmpBranchOp], indent: DisplayIndent) -> Self {
        Self { ops, indent }
    }

    fn emit(&self, f: &mut fmt::Formatter, op: &CmpBranchOp) -> fmt::Result {
        let indent = self.indent;
        let name = &*op.name;
        let r_id = Operand::Reg.id();
        let s_id = Operand::Stack.id();
        let i_id = Operand::Immediate.id();
        let op_ri = format!("{}_{}{}", name, r_id, i_id);
        let op_rs = format!("{}_{}{}", name, r_id, s_id);
        let op_si = format!("{}_{}{}", name, s_id, i_id);
        let op_ss = format!("{}_{}{}", name, s_id, s_id);
        let imm = ImmediateTy::from(op.input_ty);
        write!(
            f,
            "\
            {indent}pub enum {name} {{}}\n\
            {indent}impl crate::CmpBranchCommutativeOperator for {name} {{\n\
            {indent}    const NAME: &'static ::core::primitive::str = \"{name}\";\n\
            {indent}    type Imm = {imm};\n\
            {indent}    type OpRi = crate::op::{op_ri};\n\
            {indent}    type OpRs = crate::op::{op_rs};\n\
            {indent}    type OpSi = crate::op::{op_si};\n\
            {indent}    type OpSs = crate::op::{op_ss};\n\
            {indent}    fn make_ri(lhs: crate::Reg, rhs: Self::Imm, offset: crate::BranchOffset) -> Self::OpRi {{\n\
            {indent}        Self::OpRi {{ lhs, rhs, offset }}\n\
            {indent}    }}\n\
            {indent}    fn make_rs(lhs: crate::Reg, rhs: crate::Stack, offset: crate::BranchOffset) -> Self::OpRs {{\n\
            {indent}        Self::OpRs {{ lhs, rhs, offset }}\n\
            {indent}    }}\n\
            {indent}    fn make_si(lhs: crate::Stack, rhs: Self::Imm, offset: crate::BranchOffset) -> Self::OpSi {{\n\
            {indent}        Self::OpSi {{ lhs, rhs, offset }}\n\
            {indent}    }}\n\
            {indent}    fn make_ss(lhs: crate::Stack, rhs: crate::Stack, offset: crate::BranchOffset) -> Self::OpSs {{\n\
            {indent}        Self::OpSs {{ lhs, rhs, offset }}\n\
            {indent}    }}\n\
            {indent}}}\
            "
        )
    }
}

impl Display for DisplayCmpBranchCommutativeOperatorImpls<'_> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        emit!(f, self.indent =>
            "// This file is automatically generated by the `build.rs` script."
            "//"
            "// Do _not_ edit this file directly but change `build.rs` script logic instead."
            ""
        );
        let Some((first, rest)) = self.ops.split_first() else {
            return Ok(());
        };
        self.emit(f, first)?;
        for op in rest {
            writeln!(f)?;
            self.emit(f, op)?;
        }
        writeln!(f)?;
        Ok(())
    }
}
