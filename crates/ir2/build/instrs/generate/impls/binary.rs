use super::super::{DisplayIndent, ImmediateTy, Operand};
use crate::instrs::OpClass;
use core::{fmt, fmt::Display};

pub struct DisplayBinaryOperatorImpls<'a> {
    ops: &'a [OpClass],
    indent: DisplayIndent,
}

impl<'a> DisplayBinaryOperatorImpls<'a> {
    pub fn new(ops: &'a [OpClass], indent: DisplayIndent) -> Self {
        Self { ops, indent }
    }

    fn emit(&self, f: &mut fmt::Formatter, op: &OpClass) -> fmt::Result {
        let indent = self.indent;
        let name = &*op.name;
        let r_id = Operand::Reg.id();
        let s_id = Operand::Stack.id();
        let i_id = Operand::Immediate.id();
        let op_rir = format!("{}_{}{}{}", name, r_id, i_id, r_id);
        let op_ris = format!("{}_{}{}{}", name, r_id, i_id, s_id);
        let op_rri = format!("{}_{}{}{}", name, r_id, r_id, i_id);
        let op_rrs = format!("{}_{}{}{}", name, r_id, r_id, s_id);
        let op_rsi = format!("{}_{}{}{}", name, r_id, s_id, i_id);
        let op_rsr = format!("{}_{}{}{}", name, r_id, s_id, r_id);
        let op_rss = format!("{}_{}{}{}", name, r_id, s_id, s_id);
        let imm = ImmediateTy::from(op.ty);
        write!(
            f,
            "\
            {indent}pub enum {name} {{}}\n\
            {indent}impl crate::BinaryOperator for {name} {{\n\
            {indent}    const NAME: &'static ::core::primitive::str = \"{name}\";\n\
            {indent}    type Imm = {imm};\n\
            {indent}    type OpRir = crate::op::{op_rir};\n\
            {indent}    type OpRis = crate::op::{op_ris};\n\
            {indent}    type OpRri = crate::op::{op_rri};\n\
            {indent}    type OpRrs = crate::op::{op_rrs};\n\
            {indent}    type OpRsi = crate::op::{op_rsi};\n\
            {indent}    type OpRsr = crate::op::{op_rsr};\n\
            {indent}    type OpRss = crate::op::{op_rss};\n\
            {indent}    fn make_rir(result: crate::Reg, lhs: Self::Imm, rhs: crate::Reg) -> Self::OpRir {{\n\
            {indent}        Self::OpRir {{ result, lhs, rhs }}\n\
            {indent}    }}\n\
            {indent}    fn make_ris(result: crate::Reg, lhs: Self::Imm, rhs: crate::Stack) -> Self::OpRis {{\n\
            {indent}        Self::OpRis {{ result, lhs, rhs }}\n\
            {indent}    }}\n\
            {indent}    fn make_rri(result: crate::Reg, lhs: crate::Reg, rhs: Self::Imm) -> Self::OpRri {{\n\
            {indent}        Self::OpRri {{ result, lhs, rhs }}\n\
            {indent}    }}\n\
            {indent}    fn make_rrs(result: crate::Reg, lhs: crate::Reg, rhs: crate::Stack) -> Self::OpRrs {{\n\
            {indent}        Self::OpRrs {{ result, lhs, rhs }}\n\
            {indent}    }}\n\
            {indent}    fn make_rsi(result: crate::Reg, lhs: crate::Stack, rhs: Self::Imm) -> Self::OpRsi {{\n\
            {indent}        Self::OpRsi {{ result, lhs, rhs }}\n\
            {indent}    }}\n\
            {indent}    fn make_rsr(result: crate::Reg, lhs: crate::Stack, rhs: crate::Reg) -> Self::OpRsr {{\n\
            {indent}        Self::OpRsr {{ result, lhs, rhs }}\n\
            {indent}    }}\n\
            {indent}    fn make_rss(result: crate::Reg, lhs: crate::Stack, rhs: crate::Stack) -> Self::OpRss {{\n\
            {indent}        Self::OpRss {{ result, lhs, rhs }}\n\
            {indent}    }}\n\
            {indent}}}\
            "
        )
    }
}

impl Display for DisplayBinaryOperatorImpls<'_> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        emit!(f, self.indent =>
            "// This file is automatically generated by the `build.rs` script."
            "//"
            "// Do _not_ edit this file directly but change `build.rs` script logic instead."
            ""
        );
        let Some((first, rest)) = self.ops.split_first() else {
            return Ok(());
        };
        self.emit(f, first)?;
        for op in rest {
            writeln!(f)?;
            self.emit(f, op)?;
        }
        writeln!(f)?;
        Ok(())
    }
}
