#[macro_use]
mod utils;
mod opcode;
mod openum;
mod opmod;

use self::{
    opcode::DisplayOpCodeEnum,
    openum::DisplayOpEnum,
    opmod::DisplayOpMod,
    utils::{DisplayFields, DisplayIndent, Visibility},
};
use super::{Context, Field, FieldName, FieldTy, ImmediateTy, Op};
use std::{
    fmt::{self, Display},
    write,
    writeln,
};

pub fn generate_instrs(ctx: &Context) {
    std::fs::write("src/instr/mod.rs", format!("{ctx}")).unwrap();
}

impl Display for Context {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let indent = DisplayIndent::default();
        emit!(f, indent =>
            "//! This file is automatically generated by the `build.rs` script."
            "//!"
            "//! Do _not_ edit this file directly but change `build.rs` script logic instead."
            ""
            "pub mod utils;"
            ""
        );
        DisplayOpEnum::new(self, indent).fmt(f)?;
        DisplayOpCodeEnum::new(self, indent).fmt(f)?;
        DisplayOpMod::new(self, indent).fmt(f)?;
        Ok(())
    }
}
